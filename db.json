{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/testcomp.txt","path":"testcomp.txt","modified":1,"renderable":0},{"_id":"source/fonts/Fh4uPib9Iyv2ucM6pGQMWimMp004La2Cfw.woff2","path":"fonts/Fh4uPib9Iyv2ucM6pGQMWimMp004La2Cfw.woff2","modified":1,"renderable":0},{"_id":"source/images/又拍云_logo6.png","path":"images/又拍云_logo6.png","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data link.yml","hash":"df3a2b2d57c4333a70e3414a9204e16221b6ff7f","modified":1614127920000},{"_id":"source/CNAME","hash":"b8a4efd002e69d260370c1bd8567756f62b4b7b1","modified":1614127920000},{"_id":"source/robots.txt","hash":"0e78bd496fcd8e3979c02444f24a9e124437f549","modified":1614127920000},{"_id":"source/testcomp.txt","hash":"7c4a8d09ca3762af61e59520943dc26494f8941b","modified":1614127920000},{"_id":"source/google8e3486a0e2529a3c.html","hash":"5f317abfbc489ffa4fa6053c8cf2f14b511e2be9","modified":1614127920000},{"_id":"source/_posts/2020-07-20测试.md","hash":"de91e8c472409063a8a6ef79aacb38f217795a8b","modified":1614127920000},{"_id":"source/_posts/20200608递归测试T2地盘划分题解.md","hash":"1e6a1d8945ba776935416f519278d85c891531a9","modified":1614127920000},{"_id":"source/_posts/2020年3月8日NOIP课程知识整理.md","hash":"b6a657a1e3c717b176ae75510a70ff871b888bde","modified":1614127920000},{"_id":"source/_posts/2021Planners.md","hash":"16fcd8cdbfa50b2e312df1763f3122b224c4af1b","modified":1614127920000},{"_id":"source/_posts/57级返校测试-T3-成绩单.md","hash":"54ab5dc10c088d0d2ebfeb8f98f5a6343ceb3c00","modified":1614127920000},{"_id":"source/_posts/About.md","hash":"9c34a6811ee1e0a9d0f15c7c84832b5967d45837","modified":1614127920000},{"_id":"source/_posts/CSP2020游记.md","hash":"012244ede3968b898910f9832a25229bf5b7861c","modified":1614127920000},{"_id":"source/_posts/P1553数字反转（升级版).md","hash":"41f9fcf04676e59be17454845a60b8011aa02d3c","modified":1614127920000},{"_id":"source/_posts/P3372【模板】线段树1.md","hash":"d58dc336452634d090c6693c8328629424000411","modified":1614127920000},{"_id":"source/_posts/STL总结.md","hash":"382a3e326dd55463f057b0155780cc28902dafef","modified":1614127920000},{"_id":"source/_posts/UOJ-T1-T15-题解.md","hash":"ee4553d2409d58ea539f0c24fcd80d23abfe62d5","modified":1614127920000},{"_id":"source/_posts/char-const-char-string的转换.md","hash":"11cd0c10c5d5f58470e11f7eafebfaff129bd12b","modified":1614127920000},{"_id":"source/_posts/一本通题库1058：求一元二次方程.md","hash":"c75eda75076c300da79a7ba3bdf217e231ceba90","modified":1614127920000},{"_id":"source/_posts/关于class.md","hash":"4a70567c89af1da048dcd143bfe46c8e9656d222","modified":1614127920000},{"_id":"source/_posts/关于各种背包问题.md","hash":"ed6a0c258664467050000a01d73efe906e7583cc","modified":1614127920000},{"_id":"source/_posts/关于运算符重载.md","hash":"fc02e4c5337ac63793d7c1ae65d950af6893c53c","modified":1614127920000},{"_id":"source/_posts/关于递归与递推.md","hash":"2e41bbb57e69760981fe5285405696b4f619c5d1","modified":1614127920000},{"_id":"source/_posts/关于C++读入数字按位取出与进制转换问题.md","hash":"80c5903fc34b28a873a06fa430402ebbf4fd2bcf","modified":1614127920000},{"_id":"source/_posts/总结一下当前阶段我认为比较常用的字符串操作.md","hash":"fb53e549d17bb674349af6c0b5461e8f1ddf50e4","modified":1614127920000},{"_id":"source/_posts/很急的灾题解.md","hash":"a3fd55fd4581ce7e233643797286c282becb8dec","modified":1614127920000},{"_id":"source/_posts/最短路径问题的几种算法.md","hash":"db619c51fed56f5295e571e82a4cfd1be3c60d2a","modified":1614127920000},{"_id":"source/_posts/洛谷P1217USACO1.5回文质数PrimePalindromes.md","hash":"5a24959cf10d8fd6b5fc2c1a436799ff0d422042","modified":1614127920000},{"_id":"source/_posts/洛谷P6492COCI2010-20116STEP.md","hash":"e4c80d03f551c4e8cc420bd419c8526cec29314a","modified":1614127920000},{"_id":"source/_posts/数据离散化.md","hash":"18ea86e38aa0936f478c99fb2628e9fd9fe2f272","modified":1614127920000},{"_id":"source/_posts/关于SBT平衡树.md","hash":"a5bebd445680b335e9125d892a1cfb3077453be6","modified":1614127920000},{"_id":"source/_posts/清北学堂笔记.md","hash":"b4687d8a13ea91838999eab812202cf3fe574ebd","modified":1614127920000},{"_id":"source/_posts/递推;矩阵加速.md","hash":"2c9fcffd7c1d69ed5ded8bb5e0df2467af2ab098","modified":1614127920000},{"_id":"source/_posts/莫比乌斯反演.md","hash":"36be08040f916de801db3172bdbee8f52a2d5fb5","modified":1614127920000},{"_id":"source/link/index-1.md","hash":"f8b9acf0ceae2ef88394be3764c0438eeb01e44c","modified":1614127920000},{"_id":"source/fonts/Fh4uPib9Iyv2ucM6pGQMWimMp004La2Cfw.woff2","hash":"f5617a0f087645703c874453960be6382c8a7427","modified":1614127920000},{"_id":"source/images/test.md","hash":"4dec59bf99b4491eab936b8d940b53825178e0dd","modified":1614127920000},{"_id":"source/tags/index.md","hash":"15bbbf8c5171f3d8f88a50fd7eca9d2f76aa4a3a","modified":1614127920000},{"_id":"source/link/index.md","hash":"f9eb9e097f03e564a41ce166a857bdda3ddda45b","modified":1614127920000},{"_id":"source/images/又拍云_logo6.png","hash":"bb641b9d6a3fc28b38904931a2bcab3847e998f5","modified":1614127920000},{"_id":"source/categories/index.md","hash":"ff9a1ed69a4df1f8a6762ba2856f93666e071547","modified":1614127920000},{"_id":"source/很重的罪/index.md","hash":"7bcecb292b4a614d5a385c75299c101f8f3b18ab","modified":1614127920000},{"_id":"source/末梢阻断/index.md","hash":"876152bfa3fba2b1266e258409f237fb88823dee","modified":1614127920000},{"_id":"source/很绿的城/index.md","hash":"102d44e771cf9e95e3d02b37ec7155c1b4ca36d9","modified":1614127920000},{"_id":"source/很急的灾/index.md","hash":"7efcf8f8ce708bf16aa5b9f75a54434b76a71d60","modified":1614127920000},{"_id":"source/favicon.ico","hash":"57065c40cbace21db19654329c9d07658a1fc6ad","modified":1614127920000},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"605ae2826b86f304cffc14db8898d1af0790dedc","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"a4aa41871437dc9cf6c56ab2861becc60257bb07","modified":1614184723920},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"6fb49415adfefe85efc530cfb0a74dadb0bd1159","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"591ad5bbdbaaa748b6c0a8b6d06b9458912d49e9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/404.pug","hash":"58cfa5985e58e10c97a9f8a9dc354f1c766154b3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"58d0f81279a52fe060560a2ede825beafc44fe93","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"aa105ea4eaecc951f7474b549b6ac0095a5fab1f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"76d672c91f6bb6f20c6936e05067c42f7917ac61","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"3c30dbd8b910ce7d8d7d8353cf2266cbc5d8775d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"43b245c308797c2d62cb70429a85f1a05d3395ab","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"e9cf275c362d8634f093e63068da7ed1e53c7600","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"0f5017be123ae2b2ddf231d9d71a5c4cd1f2f206","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"81459adf885a15c6e9784bc2275c07efe67ab0b4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"1da73cd47b78c6dbc3f04ce500d6cc5711c94412","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"0d8ba6120dce617a2a1fbc9167572db2ee9f22ef","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"e75283267f3a4773e6d803593d557e218396f260","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"a3298d12181d739dedd2ea20b65594797e42e6d7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"f81b25dfabfa50e76acd100b97774936179ad85f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"e92eaefda462315051872b7894a6f6eb70a29006","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"8cf2fb897890fa5fbbffbe936d6fa80b383584d9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"41481019ef510c74e744f4f7ec4d0a13b5ccc04c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"68dfd3c6a0f00b3ffc0333c81e165b4626f7425f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"6058de23612ab1ed17d2ad93f5866d5f745135f0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/artitalk.pug","hash":"2a435df727ba4a0e6678c06c1b4b83745dfef841","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"45f0d36b1ac686b5984909dae55d3c522f549c3a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"edebe930a2e3c4a4de5a35b9c1b1409cdd401372","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"5b61b65dd030aed0cd2446549cf150ecdac49156","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"50f0574a1db1c62d56042b10880ba348d65d8fd9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"64bd872377d190966727668a00b156a8b3d95da3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e356f916ceb28702812d8f66c1fea0ae75eece47","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"36b368516b5a746be84a6aa08767ee24d220d509","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"1c9652cf71da32414a79b0ea6704421a59bdce2e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_self.pug","hash":"a1b2f5575b6804c5c4b9288db143b5164cbbd289","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"9e91f2543ab39815309268d07ae248a78887acf9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"6ba9dcda7ff1ceda4e07c8c08517259e8b7dbcd5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"3305ab95795801339bc515affca56c11ddc954e6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"fa7a4c1685f391d60ed863e869b9604b59746c27","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/404.styl","hash":"d6548e332e6e57e2a7ba2eb53cdd838c3cd1846d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"32008b58a76f486854b242ad686d4151bc54bbd6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"dd8cdf639ba2b726437c77fa7aa8d5edbabe8f9b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"cb1770e1dfc82ad5fb5ef3dc7f5fa7a5b0dc3297","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"3b5ed196e64a0bbd0f93d82dd85a7f3a27c9ec9e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"7a6e1f21173022a3a1f18a62785cdd657a1af0a1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"788a28f68e29fad5328dc03be2f3268324281652","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"b59ae684b5baeb5efc7f5ccd053dca768a009ebf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"4dbf1ecdd9837fa77bc8ba9739b62ff704dfda69","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"d60b7a94a7adeac489b8c1afdf7e679994829742","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"a6f8637e90e44e23338209d4a3438e3e67766971","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"6b05ca4409d2dc09e123af4e0af9f9d0f7142b73","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"89e744abc5e41f4855e7b87b13b854f4ec4ffc0e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"51f2bd03a2d0787911d0c090fb555a664b3fac8b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"a7fc7624a8d893bdf9444f14154484c29c790e99","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"c8e3d8944ced189ac27a20e2853735b44eb9cab3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"14cd0f9c0c578512896b487263cd48570d74771a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"0a8b0b3d82bef350fea5b42b1f69dbb6551b8627","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"136fb938ace9904f7f68725fcb543312ccfeef2c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"d43e7209864627a06b06879867d51841025ab9ee","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"5390f2aea030486bf78678b910bda177b0ba5d05","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"798dbbe9146e8e2379b39a49acf8c8a1eeabb8fb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"62cf37e28795d8b68a0e850ec8c94987b9e08db5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"76c061a16d7e5935f02acd27c6cdb4933c642b97","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"b2fb4af74d54f1daa39d4afc321d38a2a72e0ddd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"353ebd0bdecdfde6dee32c3aa208cc87c72b15c0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f617cacf5d1e8335abba96ee1ce4b79c17411e1e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"99dbf2b87b372f07315a3b879a77131eaf3da066","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"881618ffb26b13ad6276a65e34846e6bda2145cb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"5b015bb6fc61d136512f78aa4e3bc3165afb9cf2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"544fb85361c61dffc39a87e808d8bda04cfd863f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"4afc12ce42d067fa4012039aa444343a36f73599","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"9820d731bb66a1d9c2e0083361d0c99c68c93fdf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"21b7ec96c606823d3d72e72775495ef77502b4cb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"a13246714c9b9c6d6e5093f131a57bb49d653940","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"18dcf05ab58107bbff426376aef2577f59583fc2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"9657b1b08ff3f98e49ca250ed47a81b8b202ac7a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"3bcd66576d13db8f93fa5b799a973d55e060a708","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"52c63a50a37fa315753e72b3661676156aeae794","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"d40f1baec16c4a62e4a3a9a0379d1ca3ac6746b2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"897a18a82c0cad141b3ed9e2f1b4af60c24c334b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":499162500000},{"_id":"public/404.html","hash":"f0adb6c28d8fcbb3670480b111112ec132747d90","modified":1614249687045},{"_id":"public/categories/index.html","hash":"ecea72e6f2b72ded8c096a6764b8f8e0821ffbf9","modified":1614249687045},{"_id":"public/google8e3486a0e2529a3c.html","hash":"31493c0c58fd6f79ad8b70df8da3536dc34f234c","modified":1614249687045},{"_id":"public/link/index-1.html","hash":"690d9179e89d6aec4f02a53f520dbc08ea30ab46","modified":1614249687045},{"_id":"public/images/test.html","hash":"9980d39e92c62c0386597fc374d0e21b2bfcae62","modified":1614249687045},{"_id":"public/link/index.html","hash":"3756bd9f1c26bf5f09d3bd60f5088fbc6d7dc8e6","modified":1614249687045},{"_id":"public/tags/index.html","hash":"cdc96e30ca14605512f5ae962a6c1d9adfde0e19","modified":1614249687045},{"_id":"public/很急的灾/index.html","hash":"ffb8516c6edb5017e26effde85f46a23791de4ab","modified":1614249687045},{"_id":"public/很绿的城/index.html","hash":"a33960d9069689794f4ad3423788c4236c83f7d8","modified":1614249687045},{"_id":"public/末梢阻断/index.html","hash":"5f3e1702ae11f8c12fd04230134f28df64ef269a","modified":1614249687045},{"_id":"public/很重的罪/index.html","hash":"b6e4c48d0a7e22a94134cf8f33485199455427c6","modified":1614249687045},{"_id":"public/2021/02/08/清北学堂笔记/index.html","hash":"8e6168af8bf35c618185a63c40849fd6d26ffd9b","modified":1614249687045},{"_id":"public/2021/01/15/关于SBT平衡树/index.html","hash":"cb95160c2850c892790336dd1bf37385452ae81a","modified":1614249687045},{"_id":"public/2021/01/03/2021Planners/index.html","hash":"abaf1a96ffad79969b1f8d986ccd8983a574da23","modified":1614249687045},{"_id":"public/2021/01/01/STL总结/index.html","hash":"acc0340456832580de3914b9fbef5003f1eded34","modified":1614249687045},{"_id":"public/2020/11/26/UOJ-T1-T15-题解/index.html","hash":"effbaeecf7affc001d2acb7734e1d2380f7a2295","modified":1614249687045},{"_id":"public/2020/11/08/CSP2020游记/index.html","hash":"1eb58b644d28c6bb20cbe626e42727e2412bef2d","modified":1614249687045},{"_id":"public/2020/07/29/关于class/index.html","hash":"b3191940205ac32aa39a70c64eb23c1fb2aa080e","modified":1614249687045},{"_id":"public/2020/07/27/很急的灾题解/index.html","hash":"0e2c043671139b311544bc16ca4322e8494b9b1b","modified":1614249687045},{"_id":"public/2020/07/20/2020-07-20测试/index.html","hash":"37b80e7c30bbacf873942deb15cf18ebe4f12fa0","modified":1614249687045},{"_id":"public/2020/07/17/char-const-char-string的转换/index.html","hash":"05d6f1bdf44c2c63a8fb877b370360f3ee5a981a","modified":1614249687045},{"_id":"public/2020/07/11/About/index.html","hash":"f76f4744f4102ecaed142df91109497ebd5b7a75","modified":1614249687045},{"_id":"public/2020/07/06/P3372【模板】线段树1/index.html","hash":"eda7837a7ad7907c972d07c82444b345a93f39d8","modified":1614249687045},{"_id":"public/2020/07/05/洛谷P6492COCI2010-20116STEP/index.html","hash":"204fa930bd2cd82d42dfc2c9c0039f72b254a581","modified":1614249687045},{"_id":"public/2020/06/09/20200608递归测试T2地盘划分题解/index.html","hash":"7a6289d4c552155758cf72e257e6c8a2554e3dad","modified":1614249687045},{"_id":"public/2020/05/22/关于各种背包问题/index.html","hash":"2bbf1ad8c81e660055caaa14c7fd48bf9f261734","modified":1614249687045},{"_id":"public/2020/05/17/57级返校测试-T3-成绩单/index.html","hash":"5abd72689b0b9ea5350ef176531ff9ab4894240d","modified":1614249687045},{"_id":"public/2020/04/25/关于运算符重载/index.html","hash":"78e9b7515350164de34dfa11cd7e2b5b4d73bfe3","modified":1614249687045},{"_id":"public/2020/04/18/最短路径问题的几种算法/index.html","hash":"05269dab4f0afefedfb457320b9f8440aa6d44bb","modified":1614249687045},{"_id":"public/2020/04/18/数据离散化/index.html","hash":"624cfef2a4086d35732bf9ecd153098bdc9fe9d6","modified":1614249687045},{"_id":"public/2020/03/15/莫比乌斯反演/index.html","hash":"be6635d33329684a04d8d845edda1d1cff5764fb","modified":1614249687045},{"_id":"public/2020/03/09/2020年3月8日NOIP课程知识整理/index.html","hash":"b2acf07d89768526384717ba021afc700f7e6c31","modified":1614249687045},{"_id":"public/2020/03/03/递推;矩阵加速/index.html","hash":"d79cfc29ee8a31ab262647d4d37d3534347e1480","modified":1614249687045},{"_id":"public/2020/02/06/洛谷P1217USACO1.5回文质数PrimePalindromes/index.html","hash":"97826f77262c897d29d48dcba319a613542fc670","modified":1614249687045},{"_id":"public/2020/01/30/P1553数字反转（升级版)/index.html","hash":"ab41c9de7c57becf5bc7a2e7ceba30a970bf264d","modified":1614249687045},{"_id":"public/2020/01/30/关于递归与递推/index.html","hash":"92c2ad229949d590cdbced6212b6ab6b23a6b27c","modified":1614249687045},{"_id":"public/2020/01/30/总结一下当前阶段我认为比较常用的字符串操作/index.html","hash":"711f131061284fc32ffc063e2fa261e7e1021480","modified":1614249687045},{"_id":"public/2020/01/27/关于C++读入数字按位取出与进制转换问题/index.html","hash":"040ebf734cb86b70ff3cdf7def2793c11d758632","modified":1614249687045},{"_id":"public/2020/01/19/一本通题库1058：求一元二次方程/index.html","hash":"1e3378e4d0bce92c4bcf4c0c7e978853138a6a78","modified":1614249687045},{"_id":"public/archives/index.html","hash":"202dd370bfa3cbabe6da927b2ab9b3c1726cd57f","modified":1614249687045},{"_id":"public/archives/page/2/index.html","hash":"b5f46b6efbabd22ac4e6bbbf8ce683b4e992888b","modified":1614249687045},{"_id":"public/archives/page/3/index.html","hash":"2eb8c385ea298cfce91b688f1b30378b2e36c3d7","modified":1614249687045},{"_id":"public/archives/2020/index.html","hash":"80d99f29cc20bd85520a5b6932dd99c02777655c","modified":1614249687045},{"_id":"public/archives/2020/page/2/index.html","hash":"3c75170540433718ba6f259e2fc25271e38fa325","modified":1614249687045},{"_id":"public/archives/2020/page/3/index.html","hash":"d4fa1c0158b7ff22694d5ce278198e45eac3a73e","modified":1614249687045},{"_id":"public/archives/2020/01/index.html","hash":"c9d3bc6b74aead813e4ed8a3a8850443c9964edf","modified":1614249687045},{"_id":"public/archives/2020/02/index.html","hash":"893265f690cc9a529040e81dacfd79575f7a30e1","modified":1614249687045},{"_id":"public/archives/2020/03/index.html","hash":"dcf37a235476e5bd2058c0ecc396128f138854eb","modified":1614249687045},{"_id":"public/archives/2020/04/index.html","hash":"e58b04808fa661e55198b448fe0edb619aabc278","modified":1614249687045},{"_id":"public/archives/2020/05/index.html","hash":"731d854c27ffaf43dcc69db76eef07ac7fbb3802","modified":1614249687045},{"_id":"public/archives/2020/06/index.html","hash":"0c8d6f9bf5005d9c0c09e27e075caeb7fa18a10b","modified":1614249687045},{"_id":"public/archives/2020/07/index.html","hash":"e4c03ff68d56cb0a43c7d1ee1f74ac1a2ecaae28","modified":1614249687045},{"_id":"public/archives/2020/11/index.html","hash":"2a851862bf1ae4fd240f007de28c18a996fbe388","modified":1614249687045},{"_id":"public/archives/2021/index.html","hash":"357684aad94e0b58f1e481f828456cd08d50eb65","modified":1614249687045},{"_id":"public/archives/2021/01/index.html","hash":"0f8fd6aefaa1694a31b416661273474f6db27eb0","modified":1614249687045},{"_id":"public/archives/2021/02/index.html","hash":"8df3b1cd87047ab0fb1673ac2085ee02477251f7","modified":1614249687045},{"_id":"public/categories/校内测试/index.html","hash":"4cdb262235d229cb04a3c915b9f9d4b15b80e569","modified":1614249687045},{"_id":"public/categories/非技术文章/index.html","hash":"d1782c8a75c760005932cbe7dd1b9a6c90180a54","modified":1614249687045},{"_id":"public/categories/关于/index.html","hash":"e622aaf0f0160935799f9a47b8944d1b05667663","modified":1614249687045},{"_id":"public/categories/游记/index.html","hash":"4915eca2621ebd9be06dbdbad6e0925a88815f31","modified":1614249687045},{"_id":"public/categories/C-基础/index.html","hash":"134a0180ed7a4f5380e3353d1ac0c54d6fb43bdd","modified":1614249687045},{"_id":"public/categories/数据结构/index.html","hash":"db9483a6e206995fcd8ff85a3d9a11688d397ed0","modified":1614249687045},{"_id":"public/categories/背包问题/index.html","hash":"fc9272b6dec327a46a178b866cc7005eac8ca47d","modified":1614249687045},{"_id":"public/index.html","hash":"4226fcd4359e72a080f771241db8a7f8283cc9f8","modified":1614249687045},{"_id":"public/page/2/index.html","hash":"73d7225db4f89d830043526b5baff2fac684a122","modified":1614249687045},{"_id":"public/page/3/index.html","hash":"4b79a81a88f0209dd68e0cfb6cc3b7e39f0c13eb","modified":1614249687045},{"_id":"public/tags/递归/index.html","hash":"58314eab4fb9c47644110664735a81c1c5874fda","modified":1614249687045},{"_id":"public/tags/校内考试/index.html","hash":"32f550e8eb20610d5e3611bebcfda5706fe4af54","modified":1614249687045},{"_id":"public/tags/校内测试/index.html","hash":"a9b7138d11ce8c98ddc3f309c421609de7518127","modified":1614249687045},{"_id":"public/tags/BFS/index.html","hash":"d3e629738a7e78b3399ee47e0abc847e1c07caf2","modified":1614249687045},{"_id":"public/tags/背包问题/index.html","hash":"369ce93dbaa13e0e89870c55c89cb99818c0c893","modified":1614249687045},{"_id":"public/tags/算法概述/index.html","hash":"2d0ee1ccd079e79d91be5b79580086a621357243","modified":1614249687045},{"_id":"public/tags/数论/index.html","hash":"9411d9f038c3d6ded744c2be9ef0f8cbd5835241","modified":1614249687045},{"_id":"public/tags/非技术/index.html","hash":"2bf1dfc35b8bc4a910eab765d2efde5975c87d64","modified":1614249687045},{"_id":"public/tags/字符串/index.html","hash":"6e8c0984df22adc1360e1528c3702ef4ba92ab10","modified":1614249687045},{"_id":"public/tags/排序/index.html","hash":"5047b079304dca2c93a28bf6fd6c832d24ccd37c","modified":1614249687045},{"_id":"public/tags/About/index.html","hash":"44b40ecfc2696e62e24472243403bd0705f458d2","modified":1614249687045},{"_id":"public/tags/CSP/index.html","hash":"61b11733a06c8faf9c81eda3ea49ddb82b3bbc8d","modified":1614249687045},{"_id":"public/tags/游记/index.html","hash":"ba196f3969b937a0e74dd9237318e649db1df85d","modified":1614249687045},{"_id":"public/tags/C-一本通题库/index.html","hash":"b7437b9d12e8e2978a425517a9958feaffea4df5","modified":1614249687045},{"_id":"public/tags/洛谷/index.html","hash":"d2ca33c170dedad61a0e9d2d2ec63a1b295b2a56","modified":1614249687045},{"_id":"public/tags/线段树/index.html","hash":"5690927cf1eb37f8417581feafc5ca6c316fba85","modified":1614249687045},{"_id":"public/tags/C-基础/index.html","hash":"4eaddfcd3a37369e1c6141ddeffca443349fe3ca","modified":1614249687045},{"_id":"public/tags/校内事务/index.html","hash":"46629533e1e68ece447733d7ecae073c09e38602","modified":1614249687045},{"_id":"public/tags/数据结构/index.html","hash":"d8480be1eaaf187472f2588c3d237644cb614e93","modified":1614249687045},{"_id":"public/tags/递推/index.html","hash":"1ba7b86eb2d31b86d2853d6c4beb437a4beab0ff","modified":1614249687045},{"_id":"public/tags/运算符重载/index.html","hash":"4bdff0edc76fd452548106be650821aa0473a1e7","modified":1614249687045},{"_id":"public/tags/Tarjian/index.html","hash":"bc063f20a4f7d110bb22b228130fd35d1c7f9a5a","modified":1614249687045},{"_id":"public/tags/二分图最大匹配/index.html","hash":"de2c0e0116eb6adfb7f086680653e44cd0ed6700","modified":1614249687045},{"_id":"public/tags/最短路/index.html","hash":"29c40168933ff8ebffb4c64f0e26b89528ababf6","modified":1614249687045},{"_id":"public/tags/离散化/index.html","hash":"0b591a012f8672d3771a99e08fbad2bd71bd8da9","modified":1614249687045},{"_id":"public/tags/矩阵加速/index.html","hash":"1240fb902865a6e6bab083dca21691dbcd67d9a9","modified":1614249687045},{"_id":"public/CNAME","hash":"b8a4efd002e69d260370c1bd8567756f62b4b7b1","modified":1614249687045},{"_id":"public/robots.txt","hash":"0e78bd496fcd8e3979c02444f24a9e124437f549","modified":1614249687045},{"_id":"public/testcomp.txt","hash":"7c4a8d09ca3762af61e59520943dc26494f8941b","modified":1614249687045},{"_id":"public/fonts/Fh4uPib9Iyv2ucM6pGQMWimMp004La2Cfw.woff2","hash":"f5617a0f087645703c874453960be6382c8a7427","modified":1614249687045},{"_id":"public/images/又拍云_logo6.png","hash":"bb641b9d6a3fc28b38904931a2bcab3847e998f5","modified":1614249687045},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1614249687045},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1614249687045},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1614249687045},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1614249687045},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1614249687045},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614249687045},{"_id":"public/js/utils.js","hash":"41481019ef510c74e744f4f7ec4d0a13b5ccc04c","modified":1614249687045},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1614249687045},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1614249687045},{"_id":"public/css/index.css","hash":"1384704c60a31e1bdcd8dd2d69b0ce0b30892372","modified":1614249687045},{"_id":"public/js/main.js","hash":"8cf2fb897890fa5fbbffbe936d6fa80b383584d9","modified":1614249687045},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1614249687045},{"_id":"public/favicon.ico","hash":"57065c40cbace21db19654329c9d07658a1fc6ad","modified":1614249687045}],"Category":[{"name":"校内测试","_id":"cklkql2m50007pb0ygpnm1ag3"},{"name":"非技术文章","_id":"cklkql2ma000fpb0y08vqg71k"},{"name":"关于","_id":"cklkql2mf000npb0y3fxc4py8"},{"name":"游记","_id":"cklkql2mj000vpb0y2fxvajwr"},{"name":"C++基础","_id":"cklkql2mn0010pb0y5eci2fvg"},{"name":"数据结构","_id":"cklkql2my001epb0yhc2d1faz"},{"name":"背包问题","_id":"cklkql2n2001mpb0ycnj33l4e"}],"Data":[],"Page":[{"title":"分类","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---\n","updated":"2021-02-24T00:52:00.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cklkql2lu0000pb0ydxe32pul","content":"","site":{"data":{}},"cover":"https://acg.xydwz.cn/api/api.php","excerpt":"","more":""},{"_content":"google-site-verification: google8e3486a0e2529a3c.html","source":"google8e3486a0e2529a3c.html","raw":"google-site-verification: google8e3486a0e2529a3c.html","date":"2021-02-24T17:13:43.374Z","updated":"2021-02-24T00:52:00.000Z","path":"google8e3486a0e2529a3c.html","title":"","comments":1,"layout":"page","_id":"cklkql2m00002pb0y1t178y62","content":"google-site-verification: google8e3486a0e2529a3c.html","site":{"data":{}},"cover":"https://acg.xydwz.cn/api/api.php","excerpt":"","more":"google-site-verification: google8e3486a0e2529a3c.html"},{"title":"link","date":"2021-01-17T05:13:23.000Z","_content":"","source":"link/index-1.md","raw":"---\ntitle: link\ndate: 2021-01-17 13:13:23\n---\n","updated":"2021-02-24T00:52:00.000Z","path":"link/index-1.html","comments":1,"layout":"page","_id":"cklkql2m40005pb0yfvakcu3t","content":"","site":{"data":{}},"cover":"https://acg.xydwz.cn/api/api.php","excerpt":"","more":""},{"_content":"```\n<div class='tip' ><p>默认情况<p></div>\n<div class='tip success'><p>success<p></div>\n<div class='tip error'><p>error<p></div>\n<div class='tip warning'><p>warning<p></div>\n```\n\n<div class='tip' ><p>默认情况<p></div>\n<div class='tip success'><p>success<p></div>\n<div class='tip error'><p>error<p></div>\n<div class='tip warning'><p>warning<p></div>\n\n```\n/* note语法示例 */\n<p class='div-border green'>绿色</p>\n<p class='div-border red'>红色</p>\n<p class='div-border yellow'>黄色</p>\n<p class='div-border grey'>灰色</p>\n<p class='div-border blue'>蓝色</p>\n/* 小tag标签语法示例 */\n<span class=\"inline-tag red\">红色小标签</span>\n<span class=\"inline-tag green\">绿色小标签</span>\n<span class=\"inline-tag blue\">蓝色小标签</span>\n<span class=\"inline-tag yellow\">黄色小标签</span>\n<span class=\"inline-tag grey\">灰色小标签</span>\n```\n\n/* note语法示例 */\n<p class='div-border green'>绿色</p>\n<p class='div-border red'>红色</p>\n<p class='div-border yellow'>黄色</p>\n<p class='div-border grey'>灰色</p>\n<p class='div-border blue'>蓝色</p>\n/* 小tag标签语法示例 */\n<span class=\"inline-tag red\">红色小标签</span>\n<span class=\"inline-tag green\">绿色小标签</span>\n<span class=\"inline-tag blue\">蓝色小标签</span>\n<span class=\"inline-tag yellow\">黄色小标签</span>\n<span class=\"inline-tag grey\">灰色小标签</span>\n\n<div class=\"snote red\"><p>error<p></div>","source":"images/test.md","raw":"```\n<div class='tip' ><p>默认情况<p></div>\n<div class='tip success'><p>success<p></div>\n<div class='tip error'><p>error<p></div>\n<div class='tip warning'><p>warning<p></div>\n```\n\n<div class='tip' ><p>默认情况<p></div>\n<div class='tip success'><p>success<p></div>\n<div class='tip error'><p>error<p></div>\n<div class='tip warning'><p>warning<p></div>\n\n```\n/* note语法示例 */\n<p class='div-border green'>绿色</p>\n<p class='div-border red'>红色</p>\n<p class='div-border yellow'>黄色</p>\n<p class='div-border grey'>灰色</p>\n<p class='div-border blue'>蓝色</p>\n/* 小tag标签语法示例 */\n<span class=\"inline-tag red\">红色小标签</span>\n<span class=\"inline-tag green\">绿色小标签</span>\n<span class=\"inline-tag blue\">蓝色小标签</span>\n<span class=\"inline-tag yellow\">黄色小标签</span>\n<span class=\"inline-tag grey\">灰色小标签</span>\n```\n\n/* note语法示例 */\n<p class='div-border green'>绿色</p>\n<p class='div-border red'>红色</p>\n<p class='div-border yellow'>黄色</p>\n<p class='div-border grey'>灰色</p>\n<p class='div-border blue'>蓝色</p>\n/* 小tag标签语法示例 */\n<span class=\"inline-tag red\">红色小标签</span>\n<span class=\"inline-tag green\">绿色小标签</span>\n<span class=\"inline-tag blue\">蓝色小标签</span>\n<span class=\"inline-tag yellow\">黄色小标签</span>\n<span class=\"inline-tag grey\">灰色小标签</span>\n\n<div class=\"snote red\"><p>error<p></div>","date":"2021-02-24T17:13:43.347Z","updated":"2021-02-24T00:52:00.000Z","path":"images/test.html","title":"","comments":1,"layout":"page","_id":"cklkql2m60008pb0ydrw43ro9","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&#39;tip&#39; &gt;&lt;p&gt;默认情况&lt;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&#39;tip success&#39;&gt;&lt;p&gt;success&lt;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&#39;tip error&#39;&gt;&lt;p&gt;error&lt;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&#39;tip warning&#39;&gt;&lt;p&gt;warning&lt;p&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<div class='tip' ><p>默认情况<p></div>\n<div class='tip success'><p>success<p></div>\n<div class='tip error'><p>error<p></div>\n<div class='tip warning'><p>warning<p></div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* note语法示例 *&#x2F;</span><br><span class=\"line\">&lt;p class&#x3D;&#39;div-border green&#39;&gt;绿色&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p class&#x3D;&#39;div-border red&#39;&gt;红色&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p class&#x3D;&#39;div-border yellow&#39;&gt;黄色&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p class&#x3D;&#39;div-border grey&#39;&gt;灰色&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p class&#x3D;&#39;div-border blue&#39;&gt;蓝色&lt;&#x2F;p&gt;</span><br><span class=\"line\">&#x2F;* 小tag标签语法示例 *&#x2F;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;inline-tag red&quot;&gt;红色小标签&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;inline-tag green&quot;&gt;绿色小标签&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;inline-tag blue&quot;&gt;蓝色小标签&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;inline-tag yellow&quot;&gt;黄色小标签&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;inline-tag grey&quot;&gt;灰色小标签&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>\n\n<p>/* note语法示例 */</p>\n<p class='div-border green'>绿色</p>\n<p class='div-border red'>红色</p>\n<p class='div-border yellow'>黄色</p>\n<p class='div-border grey'>灰色</p>\n<p class='div-border blue'>蓝色</p>\n/* 小tag标签语法示例 */\n<span class=\"inline-tag red\">红色小标签</span>\n<span class=\"inline-tag green\">绿色小标签</span>\n<span class=\"inline-tag blue\">蓝色小标签</span>\n<span class=\"inline-tag yellow\">黄色小标签</span>\n<span class=\"inline-tag grey\">灰色小标签</span>\n\n<div class=\"snote red\"><p>error<p></div>","site":{"data":{}},"cover":"https://acg.xydwz.cn/api/api.php","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&#39;tip&#39; &gt;&lt;p&gt;默认情况&lt;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&#39;tip success&#39;&gt;&lt;p&gt;success&lt;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&#39;tip error&#39;&gt;&lt;p&gt;error&lt;p&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&#39;tip warning&#39;&gt;&lt;p&gt;warning&lt;p&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<div class='tip' ><p>默认情况<p></div>\n<div class='tip success'><p>success<p></div>\n<div class='tip error'><p>error<p></div>\n<div class='tip warning'><p>warning<p></div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* note语法示例 *&#x2F;</span><br><span class=\"line\">&lt;p class&#x3D;&#39;div-border green&#39;&gt;绿色&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p class&#x3D;&#39;div-border red&#39;&gt;红色&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p class&#x3D;&#39;div-border yellow&#39;&gt;黄色&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p class&#x3D;&#39;div-border grey&#39;&gt;灰色&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p class&#x3D;&#39;div-border blue&#39;&gt;蓝色&lt;&#x2F;p&gt;</span><br><span class=\"line\">&#x2F;* 小tag标签语法示例 *&#x2F;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;inline-tag red&quot;&gt;红色小标签&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;inline-tag green&quot;&gt;绿色小标签&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;inline-tag blue&quot;&gt;蓝色小标签&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;inline-tag yellow&quot;&gt;黄色小标签&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span class&#x3D;&quot;inline-tag grey&quot;&gt;灰色小标签&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>\n\n<p>/* note语法示例 */</p>\n<p class='div-border green'>绿色</p>\n<p class='div-border red'>红色</p>\n<p class='div-border yellow'>黄色</p>\n<p class='div-border grey'>灰色</p>\n<p class='div-border blue'>蓝色</p>\n/* 小tag标签语法示例 */\n<span class=\"inline-tag red\">红色小标签</span>\n<span class=\"inline-tag green\">绿色小标签</span>\n<span class=\"inline-tag blue\">蓝色小标签</span>\n<span class=\"inline-tag yellow\">黄色小标签</span>\n<span class=\"inline-tag grey\">灰色小标签</span>\n\n<div class=\"snote red\"><p>error<p></div>"},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","type":"link","_content":"\n\n- class_name: OI网站\n  class_desc: OI学习宝藏网站\n  link_list: \n    - name: 洛谷\n      link: https://luogu.com.cn/\n      avatar: https://cdn.luogu.com.cn/upload/usericon/3.png\n      descr: 大型刷题网站\n    - name: OI Wiki\n      link: https://oi-wiki.org/\n      avatar: https://cdn.jsdelivr.net/npm/oicdn@0.0.1/wordArt.webp\n      descr: OI知识整理\n","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2018-06-07 22:17:49\ntype: \"link\"\n---\n\n\n- class_name: OI网站\n  class_desc: OI学习宝藏网站\n  link_list: \n    - name: 洛谷\n      link: https://luogu.com.cn/\n      avatar: https://cdn.luogu.com.cn/upload/usericon/3.png\n      descr: 大型刷题网站\n    - name: OI Wiki\n      link: https://oi-wiki.org/\n      avatar: https://cdn.jsdelivr.net/npm/oicdn@0.0.1/wordArt.webp\n      descr: OI知识整理\n","updated":"2021-02-24T00:52:00.000Z","path":"link/index.html","comments":1,"layout":"page","_id":"cklkql2m7000apb0y3iag5iae","content":"<ul>\n<li>class_name: OI网站<br>class_desc: OI学习宝藏网站<br>link_list: <ul>\n<li>name: 洛谷<br>link: <a href=\"https://luogu.com.cn/\">https://luogu.com.cn/</a><br>avatar: <a href=\"https://cdn.luogu.com.cn/upload/usericon/3.png\">https://cdn.luogu.com.cn/upload/usericon/3.png</a><br>descr: 大型刷题网站</li>\n<li>name: OI Wiki<br>link: <a href=\"https://oi-wiki.org/\">https://oi-wiki.org/</a><br>avatar: <a href=\"https://cdn.jsdelivr.net/npm/oicdn@0.0.1/wordArt.webp\">https://cdn.jsdelivr.net/npm/oicdn@0.0.1/wordArt.webp</a><br>descr: OI知识整理</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"cover":"https://acg.xydwz.cn/api/api.php","excerpt":"","more":"<ul>\n<li>class_name: OI网站<br>class_desc: OI学习宝藏网站<br>link_list: <ul>\n<li>name: 洛谷<br>link: <a href=\"https://luogu.com.cn/\">https://luogu.com.cn/</a><br>avatar: <a href=\"https://cdn.luogu.com.cn/upload/usericon/3.png\">https://cdn.luogu.com.cn/upload/usericon/3.png</a><br>descr: 大型刷题网站</li>\n<li>name: OI Wiki<br>link: <a href=\"https://oi-wiki.org/\">https://oi-wiki.org/</a><br>avatar: <a href=\"https://cdn.jsdelivr.net/npm/oicdn@0.0.1/wordArt.webp\">https://cdn.jsdelivr.net/npm/oicdn@0.0.1/wordArt.webp</a><br>descr: OI知识整理</li>\n</ul>\n</li>\n</ul>\n"},{"title":"标签🏷","date":"2018-01-04T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签🏷\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---\n","updated":"2021-02-24T00:52:00.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cklkql2m9000dpb0y0x4y12bu","content":"","site":{"data":{}},"cover":"https://acg.xydwz.cn/api/api.php","excerpt":"","more":""},{"title":"很急的灾","date":"2020-07-23T00:41:09.000Z","description":"一道非常非常水的图论题。","keywords":"我出的题","cover":"https://acg.xydwz.cn/api/api.php","top_img":"http://ww1.sinaimg.cn/large/0075LAc9ly1gh59qvg8wsj33z41a0aib.jpg","_content":"\n<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n\n<div class='tip'><p>本题题目提供者：WYH</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：256MB</p></div>\n\n## 题目背景\n\n<p class='div-border blue'>天灾即将来临，但是几个村庄的人们还没有藏身之地。</p>\n\n## 题目描述\n\n<p class='div-border red'>有一些房子，某些房子之间有单向的路相连接。其中，有一些房子形成了一个一个的村庄，村庄之间无法互相到达，但是村子之内每家每户之间都可以互相到达。每个房子都会在一个村庄里面，虽然有的村庄可能只有一个房子。每个村子虽然可能大小不同，但是无论大小，一个避难所都只能容纳一个村庄的人，不同村庄的人是无论怎样也不会选择进入同一个避难所的。每个房子都有可能连接向某个避难所。一个避难所区域的所有节点都是可以互相到达的。一个村庄内部的人之间非常友善，愿意让全村人民都通过Ta的房子去他们应该去的避难所。但是，避难所数量有限，而且也并不是每个村庄都可以到达所有的避难所。所以你的任务就是把各个村庄的人安排好应该去的避难所，使得能逃过天灾的人最多。</p>\n\n## 输入格式\n\n<p class='div-border green'>\n    第一行，两个整数，<code>M</code>,<code>S</code>，代表节点有<code>M</code>个，有S条边。\n    <br>后面<code>S</code>行，每行两个整数<code>X</code>，<code>Y</code>，代表从<code>X</code>到<code>Y</code>有一条有向的道路。\n</p>\n\n\n## 举例\n\n![graph_爱奇艺.jpg](http://ww1.sinaimg.cn/large/0075LAc9ly1gh2bvux3qej30g40g40v5.jpg)\n\n（你就当那个4是蓝色的（打错了qwq））\n\n如图，红色的`1`,`2`,`3`号村庄和蓝色的`1`,`2`,`3`,`4`号避难所。\n\n让`3`号村庄的人去`2`号避难所，`2`号村庄的人去`4`号避难所，`1`号村庄的人去`1`号避难所即可全部得救。\n\n## 输出格式\n\n<p class='div-border yellow'>\n    一个整数，<code>A</code>，代表最多有A个村庄的人得救。\n    <br>如果每个村庄的人都不能得救，则输出<code>-1</code>。\n</p>\n<h2>输入输出样例</h2>\n\n<b>输入 #1</b>\n\n```cpp\n34 49\n2 1\n2 3\n3 4\n1 4\n4 2\n3 5\n5 4\n2 6\n6 3\n7 8\n9 7\n10 11\n11 12\n12 13\n13 10\n12 10\n14 15\n15 16\n16 14\n17 16\n15 17\n8 9\n13 14\n17 11\n18 19\n19 20\n18 21 \n21 20\n23 24\n24 25\n25 26\n26 27\n27 23\n20 18\n22 28\n28 29\n29 22\n30 31\n31 32\n34 33\n32 34\n33 31\n33 30\n1 7\n5 22\n11 8\n26 22\n27 20\n17 7\n```\n<b>输出 #1</b>\n\n```cpp\n3\n```\n\n<h2>说明/提示</h2>\n\n很明显，避难所是无法到达村庄的，但是村庄可以到达避难所。\n\n**此题标签**\n\n<p class='div-border blue'>\n    对于$100％$的数据，M≤40000,N≤50000.\n    <br>对于其中$50％$的数据，M≤400,N≤500.\n    <br>对于另外$25％$的数据，M≤7000,N≤10000.\n    <br>对于还有$25％$的数据，M≤40000,N≤50000.\n</p>\n","source":"很急的灾/index.md","raw":"---\ntitle: 很急的灾\ndate: 2020-07-23 08:41:09\ndescription: 一道非常非常水的图论题。\nkeywords: 我出的题\ncover: https://acg.xydwz.cn/api/api.php  \ntop_img: http://ww1.sinaimg.cn/large/0075LAc9ly1gh59qvg8wsj33z41a0aib.jpg\n---\n\n<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n\n<div class='tip'><p>本题题目提供者：WYH</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：256MB</p></div>\n\n## 题目背景\n\n<p class='div-border blue'>天灾即将来临，但是几个村庄的人们还没有藏身之地。</p>\n\n## 题目描述\n\n<p class='div-border red'>有一些房子，某些房子之间有单向的路相连接。其中，有一些房子形成了一个一个的村庄，村庄之间无法互相到达，但是村子之内每家每户之间都可以互相到达。每个房子都会在一个村庄里面，虽然有的村庄可能只有一个房子。每个村子虽然可能大小不同，但是无论大小，一个避难所都只能容纳一个村庄的人，不同村庄的人是无论怎样也不会选择进入同一个避难所的。每个房子都有可能连接向某个避难所。一个避难所区域的所有节点都是可以互相到达的。一个村庄内部的人之间非常友善，愿意让全村人民都通过Ta的房子去他们应该去的避难所。但是，避难所数量有限，而且也并不是每个村庄都可以到达所有的避难所。所以你的任务就是把各个村庄的人安排好应该去的避难所，使得能逃过天灾的人最多。</p>\n\n## 输入格式\n\n<p class='div-border green'>\n    第一行，两个整数，<code>M</code>,<code>S</code>，代表节点有<code>M</code>个，有S条边。\n    <br>后面<code>S</code>行，每行两个整数<code>X</code>，<code>Y</code>，代表从<code>X</code>到<code>Y</code>有一条有向的道路。\n</p>\n\n\n## 举例\n\n![graph_爱奇艺.jpg](http://ww1.sinaimg.cn/large/0075LAc9ly1gh2bvux3qej30g40g40v5.jpg)\n\n（你就当那个4是蓝色的（打错了qwq））\n\n如图，红色的`1`,`2`,`3`号村庄和蓝色的`1`,`2`,`3`,`4`号避难所。\n\n让`3`号村庄的人去`2`号避难所，`2`号村庄的人去`4`号避难所，`1`号村庄的人去`1`号避难所即可全部得救。\n\n## 输出格式\n\n<p class='div-border yellow'>\n    一个整数，<code>A</code>，代表最多有A个村庄的人得救。\n    <br>如果每个村庄的人都不能得救，则输出<code>-1</code>。\n</p>\n<h2>输入输出样例</h2>\n\n<b>输入 #1</b>\n\n```cpp\n34 49\n2 1\n2 3\n3 4\n1 4\n4 2\n3 5\n5 4\n2 6\n6 3\n7 8\n9 7\n10 11\n11 12\n12 13\n13 10\n12 10\n14 15\n15 16\n16 14\n17 16\n15 17\n8 9\n13 14\n17 11\n18 19\n19 20\n18 21 \n21 20\n23 24\n24 25\n25 26\n26 27\n27 23\n20 18\n22 28\n28 29\n29 22\n30 31\n31 32\n34 33\n32 34\n33 31\n33 30\n1 7\n5 22\n11 8\n26 22\n27 20\n17 7\n```\n<b>输出 #1</b>\n\n```cpp\n3\n```\n\n<h2>说明/提示</h2>\n\n很明显，避难所是无法到达村庄的，但是村庄可以到达避难所。\n\n**此题标签**\n\n<p class='div-border blue'>\n    对于$100％$的数据，M≤40000,N≤50000.\n    <br>对于其中$50％$的数据，M≤400,N≤500.\n    <br>对于另外$25％$的数据，M≤7000,N≤10000.\n    <br>对于还有$25％$的数据，M≤40000,N≤50000.\n</p>\n","updated":"2021-02-24T00:52:00.000Z","path":"很急的灾/index.html","comments":1,"layout":"page","_id":"cklkql2mb000gpb0ybn3ghfzm","content":"<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n\n<div class='tip'><p>本题题目提供者：WYH</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：256MB</p></div>\n\n<h2 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h2><p class='div-border blue'>天灾即将来临，但是几个村庄的人们还没有藏身之地。</p>\n\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p class='div-border red'>有一些房子，某些房子之间有单向的路相连接。其中，有一些房子形成了一个一个的村庄，村庄之间无法互相到达，但是村子之内每家每户之间都可以互相到达。每个房子都会在一个村庄里面，虽然有的村庄可能只有一个房子。每个村子虽然可能大小不同，但是无论大小，一个避难所都只能容纳一个村庄的人，不同村庄的人是无论怎样也不会选择进入同一个避难所的。每个房子都有可能连接向某个避难所。一个避难所区域的所有节点都是可以互相到达的。一个村庄内部的人之间非常友善，愿意让全村人民都通过Ta的房子去他们应该去的避难所。但是，避难所数量有限，而且也并不是每个村庄都可以到达所有的避难所。所以你的任务就是把各个村庄的人安排好应该去的避难所，使得能逃过天灾的人最多。</p>\n\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p class='div-border green'>\n    第一行，两个整数，<code>M</code>,<code>S</code>，代表节点有<code>M</code>个，有S条边。\n    <br>后面<code>S</code>行，每行两个整数<code>X</code>，<code>Y</code>，代表从<code>X</code>到<code>Y</code>有一条有向的道路。\n</p>\n\n\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p><img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"http://ww1.sinaimg.cn/large/0075LAc9ly1gh2bvux3qej30g40g40v5.jpg\" alt=\"graph_爱奇艺.jpg\"></p>\n<p>（你就当那个4是蓝色的（打错了qwq））</p>\n<p>如图，红色的<code>1</code>,<code>2</code>,<code>3</code>号村庄和蓝色的<code>1</code>,<code>2</code>,<code>3</code>,<code>4</code>号避难所。</p>\n<p>让<code>3</code>号村庄的人去<code>2</code>号避难所，<code>2</code>号村庄的人去<code>4</code>号避难所，<code>1</code>号村庄的人去<code>1</code>号避难所即可全部得救。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p class='div-border yellow'>\n    一个整数，<code>A</code>，代表最多有A个村庄的人得救。\n    <br>如果每个村庄的人都不能得救，则输出<code>-1</code>。\n</p>\n<h2>输入输出样例</h2>\n\n<p><b>输入 #1</b></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">34</span> <span class=\"number\">49</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">11</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">13</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">14</span> <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">15</span> <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"number\">16</span> <span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">17</span> <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"number\">15</span> <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"number\">8</span> <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">13</span> <span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">17</span> <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">18</span> <span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"number\">19</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">18</span> <span class=\"number\">21</span> </span><br><span class=\"line\"><span class=\"number\">21</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">23</span> <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"number\">24</span> <span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"number\">25</span> <span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"number\">26</span> <span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"number\">27</span> <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">20</span> <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"number\">22</span> <span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"number\">28</span> <span class=\"number\">29</span></span><br><span class=\"line\"><span class=\"number\">29</span> <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"number\">30</span> <span class=\"number\">31</span></span><br><span class=\"line\"><span class=\"number\">31</span> <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"number\">34</span> <span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"number\">32</span> <span class=\"number\">34</span></span><br><span class=\"line\"><span class=\"number\">33</span> <span class=\"number\">31</span></span><br><span class=\"line\"><span class=\"number\">33</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"number\">11</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">26</span> <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"number\">27</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">17</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p><b>输出 #1</b></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h2>说明/提示</h2>\n\n<p>很明显，避难所是无法到达村庄的，但是村庄可以到达避难所。</p>\n<p><strong>此题标签</strong></p>\n<p class='div-border blue'>\n    对于$100％$的数据，M≤40000,N≤50000.\n    <br>对于其中$50％$的数据，M≤400,N≤500.\n    <br>对于另外$25％$的数据，M≤7000,N≤10000.\n    <br>对于还有$25％$的数据，M≤40000,N≤50000.\n</p>\n","site":{"data":{}},"excerpt":"","more":"<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n\n<div class='tip'><p>本题题目提供者：WYH</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：256MB</p></div>\n\n<h2 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h2><p class='div-border blue'>天灾即将来临，但是几个村庄的人们还没有藏身之地。</p>\n\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p class='div-border red'>有一些房子，某些房子之间有单向的路相连接。其中，有一些房子形成了一个一个的村庄，村庄之间无法互相到达，但是村子之内每家每户之间都可以互相到达。每个房子都会在一个村庄里面，虽然有的村庄可能只有一个房子。每个村子虽然可能大小不同，但是无论大小，一个避难所都只能容纳一个村庄的人，不同村庄的人是无论怎样也不会选择进入同一个避难所的。每个房子都有可能连接向某个避难所。一个避难所区域的所有节点都是可以互相到达的。一个村庄内部的人之间非常友善，愿意让全村人民都通过Ta的房子去他们应该去的避难所。但是，避难所数量有限，而且也并不是每个村庄都可以到达所有的避难所。所以你的任务就是把各个村庄的人安排好应该去的避难所，使得能逃过天灾的人最多。</p>\n\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p class='div-border green'>\n    第一行，两个整数，<code>M</code>,<code>S</code>，代表节点有<code>M</code>个，有S条边。\n    <br>后面<code>S</code>行，每行两个整数<code>X</code>，<code>Y</code>，代表从<code>X</code>到<code>Y</code>有一条有向的道路。\n</p>\n\n\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p><img src=\"http://ww1.sinaimg.cn/large/0075LAc9ly1gh2bvux3qej30g40g40v5.jpg\" alt=\"graph_爱奇艺.jpg\"></p>\n<p>（你就当那个4是蓝色的（打错了qwq））</p>\n<p>如图，红色的<code>1</code>,<code>2</code>,<code>3</code>号村庄和蓝色的<code>1</code>,<code>2</code>,<code>3</code>,<code>4</code>号避难所。</p>\n<p>让<code>3</code>号村庄的人去<code>2</code>号避难所，<code>2</code>号村庄的人去<code>4</code>号避难所，<code>1</code>号村庄的人去<code>1</code>号避难所即可全部得救。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p class='div-border yellow'>\n    一个整数，<code>A</code>，代表最多有A个村庄的人得救。\n    <br>如果每个村庄的人都不能得救，则输出<code>-1</code>。\n</p>\n<h2>输入输出样例</h2>\n\n<p><b>输入 #1</b></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">34</span> <span class=\"number\">49</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">11</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">13</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">14</span> <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">15</span> <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"number\">16</span> <span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">17</span> <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"number\">15</span> <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"number\">8</span> <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">13</span> <span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">17</span> <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">18</span> <span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"number\">19</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">18</span> <span class=\"number\">21</span> </span><br><span class=\"line\"><span class=\"number\">21</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">23</span> <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"number\">24</span> <span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"number\">25</span> <span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"number\">26</span> <span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"number\">27</span> <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">20</span> <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"number\">22</span> <span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"number\">28</span> <span class=\"number\">29</span></span><br><span class=\"line\"><span class=\"number\">29</span> <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"number\">30</span> <span class=\"number\">31</span></span><br><span class=\"line\"><span class=\"number\">31</span> <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"number\">34</span> <span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"number\">32</span> <span class=\"number\">34</span></span><br><span class=\"line\"><span class=\"number\">33</span> <span class=\"number\">31</span></span><br><span class=\"line\"><span class=\"number\">33</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"number\">11</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">26</span> <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"number\">27</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">17</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p><b>输出 #1</b></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h2>说明/提示</h2>\n\n<p>很明显，避难所是无法到达村庄的，但是村庄可以到达避难所。</p>\n<p><strong>此题标签</strong></p>\n<p class='div-border blue'>\n    对于$100％$的数据，M≤40000,N≤50000.\n    <br>对于其中$50％$的数据，M≤400,N≤500.\n    <br>对于另外$25％$的数据，M≤7000,N≤10000.\n    <br>对于还有$25％$的数据，M≤40000,N≤50000.\n</p>\n"},{"title":"很绿的城","date":"2020-07-26T09:54:55.000Z","description":"一道非常非常水的图论题。","keywords":"我出的题","cover":"https://acg.xydwz.cn/api/api.php","top_img":"http://ww1.sinaimg.cn/large/0075LAc9ly1gh59qvg8wsj33z41a0aib.jpg","_content":"\n<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n\n<div class='tip'><p>本题题目提供者：ZKW</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：64MB</p></div>\n\n## 题目描述\n\n<p class='div-border red'>某个城市中有多个小区，有的小区之间有道路（只允许单向通行）。为了使城市更加美丽，所以要在道路旁种植树木。若从某个小区出发经过若干条道路又回到了这个小区（即为一个环），则在这个环所围成的封闭图形内建造一个公园，并且要求公园周围的道路旁的所有树不止有一个品种。求最少需要多少种树。<br>确保每一个节点最多在一个环内。</p>\n\n## 输入格式\n\n<p class='div-border green'>第一行 一个数T；代表你有T个城市需要规划；\n    <br>接下来有T组输入，每组第一行输入两个数 $n$和$m$；代表这个城市有$n$个小区，$m$条道路；\n    <br>接下来$m$行每行输入两个数$s$和$t$，代表$s$号小区可以通向$t$号小区。</p>\n\n## 输出格式\n\n<p class='div-border yellow'>对于每组数据输出一个数$k$，代表最少需要$k$种树，一个一行。</p>\n\n## 输入输出样例\n\n**输入#1**\n\n```zkw\n2\n4 3\n1 3\n2 3\n2 4\n\n4 5\n1 2\n1 3\n2 4\n4 3\n3 2\n```\n\n**输出#1**\n\n```zkw\n1\n2\n```\n\n## 数据范围\n\n<p class='div-border red'>对于$10％$的数据$T=1，m=0$\n    <br>对于$20％$的数据$T=1$\n    <br>对于$50％$的数据$n≤500，m≤500$\n    <br>对于$100％$的数据$n≤100000，m≤100000，T≤10$\n    <br>所有数据保证没有自环与重边。\n\n\n","source":"很绿的城/index.md","raw":"---\ntitle: 很绿的城\ndate: 2020-07-26 17:54:55\ndescription: 一道非常非常水的图论题。\nkeywords: 我出的题\ncover: https://acg.xydwz.cn/api/api.php  \ntop_img: http://ww1.sinaimg.cn/large/0075LAc9ly1gh59qvg8wsj33z41a0aib.jpg\n---\n\n<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n\n<div class='tip'><p>本题题目提供者：ZKW</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：64MB</p></div>\n\n## 题目描述\n\n<p class='div-border red'>某个城市中有多个小区，有的小区之间有道路（只允许单向通行）。为了使城市更加美丽，所以要在道路旁种植树木。若从某个小区出发经过若干条道路又回到了这个小区（即为一个环），则在这个环所围成的封闭图形内建造一个公园，并且要求公园周围的道路旁的所有树不止有一个品种。求最少需要多少种树。<br>确保每一个节点最多在一个环内。</p>\n\n## 输入格式\n\n<p class='div-border green'>第一行 一个数T；代表你有T个城市需要规划；\n    <br>接下来有T组输入，每组第一行输入两个数 $n$和$m$；代表这个城市有$n$个小区，$m$条道路；\n    <br>接下来$m$行每行输入两个数$s$和$t$，代表$s$号小区可以通向$t$号小区。</p>\n\n## 输出格式\n\n<p class='div-border yellow'>对于每组数据输出一个数$k$，代表最少需要$k$种树，一个一行。</p>\n\n## 输入输出样例\n\n**输入#1**\n\n```zkw\n2\n4 3\n1 3\n2 3\n2 4\n\n4 5\n1 2\n1 3\n2 4\n4 3\n3 2\n```\n\n**输出#1**\n\n```zkw\n1\n2\n```\n\n## 数据范围\n\n<p class='div-border red'>对于$10％$的数据$T=1，m=0$\n    <br>对于$20％$的数据$T=1$\n    <br>对于$50％$的数据$n≤500，m≤500$\n    <br>对于$100％$的数据$n≤100000，m≤100000，T≤10$\n    <br>所有数据保证没有自环与重边。\n\n\n","updated":"2021-02-24T00:52:00.000Z","path":"很绿的城/index.html","comments":1,"layout":"page","_id":"cklkql2me000jpb0y0wcvfq07","content":"<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n\n<div class='tip'><p>本题题目提供者：ZKW</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：64MB</p></div>\n\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p class='div-border red'>某个城市中有多个小区，有的小区之间有道路（只允许单向通行）。为了使城市更加美丽，所以要在道路旁种植树木。若从某个小区出发经过若干条道路又回到了这个小区（即为一个环），则在这个环所围成的封闭图形内建造一个公园，并且要求公园周围的道路旁的所有树不止有一个品种。求最少需要多少种树。<br>确保每一个节点最多在一个环内。</p>\n\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p class='div-border green'>第一行 一个数T；代表你有T个城市需要规划；\n    <br>接下来有T组输入，每组第一行输入两个数 $n$和$m$；代表这个城市有$n$个小区，$m$条道路；\n    <br>接下来$m$行每行输入两个数$s$和$t$，代表$s$号小区可以通向$t$号小区。</p>\n\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p class='div-border yellow'>对于每组数据输出一个数$k$，代表最少需要$k$种树，一个一行。</p>\n\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><p><strong>输入#1</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">4 3</span><br><span class=\"line\">1 3</span><br><span class=\"line\">2 3</span><br><span class=\"line\">2 4</span><br><span class=\"line\"></span><br><span class=\"line\">4 5</span><br><span class=\"line\">1 2</span><br><span class=\"line\">1 3</span><br><span class=\"line\">2 4</span><br><span class=\"line\">4 3</span><br><span class=\"line\">3 2</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出#1</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h2><p class='div-border red'>对于$10％$的数据$T=1，m=0$\n    <br>对于$20％$的数据$T=1$\n    <br>对于$50％$的数据$n≤500，m≤500$\n    <br>对于$100％$的数据$n≤100000，m≤100000，T≤10$\n    <br>所有数据保证没有自环与重边。\n\n\n","site":{"data":{}},"excerpt":"","more":"<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n\n<div class='tip'><p>本题题目提供者：ZKW</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：64MB</p></div>\n\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p class='div-border red'>某个城市中有多个小区，有的小区之间有道路（只允许单向通行）。为了使城市更加美丽，所以要在道路旁种植树木。若从某个小区出发经过若干条道路又回到了这个小区（即为一个环），则在这个环所围成的封闭图形内建造一个公园，并且要求公园周围的道路旁的所有树不止有一个品种。求最少需要多少种树。<br>确保每一个节点最多在一个环内。</p>\n\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p class='div-border green'>第一行 一个数T；代表你有T个城市需要规划；\n    <br>接下来有T组输入，每组第一行输入两个数 $n$和$m$；代表这个城市有$n$个小区，$m$条道路；\n    <br>接下来$m$行每行输入两个数$s$和$t$，代表$s$号小区可以通向$t$号小区。</p>\n\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p class='div-border yellow'>对于每组数据输出一个数$k$，代表最少需要$k$种树，一个一行。</p>\n\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><p><strong>输入#1</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">4 3</span><br><span class=\"line\">1 3</span><br><span class=\"line\">2 3</span><br><span class=\"line\">2 4</span><br><span class=\"line\"></span><br><span class=\"line\">4 5</span><br><span class=\"line\">1 2</span><br><span class=\"line\">1 3</span><br><span class=\"line\">2 4</span><br><span class=\"line\">4 3</span><br><span class=\"line\">3 2</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出#1</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h2><p class='div-border red'>对于$10％$的数据$T=1，m=0$\n    <br>对于$20％$的数据$T=1$\n    <br>对于$50％$的数据$n≤500，m≤500$\n    <br>对于$100％$的数据$n≤100000，m≤100000，T≤10$\n    <br>所有数据保证没有自环与重边。\n\n\n"},{"title":" 末梢阻断 ","date":"2020-07-23T11:54:35.000Z","description":"一道非常非常水的图论题。","keywords":"我出的题","cover":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9716.php","top_img":"http://ww1.sinaimg.cn/large/0075LAc9ly1gh13309c5ij30hw05rglx.jpg","_content":"\n<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n<div class='tip'><p>本题题目提供者：WYH</p></div>\n\n## 题目背景\n\n<p class='div-border green'>Rhodes的Dr正带领迷迭香和其他几名干员赶往市中心广场。这个城市的地图是一棵树，而市中心广场就在这棵树的根节点。unions有着特殊的能力，他可以制造天灾，使路变得更加难走，来阻挠Dr。而我们Rhodes的后勤队伍会时不时地清理道路，使路更加畅通。迷迭香有着穿越时空的能力，所以她会找到一个好的时机再前往中心广场。</p>\n\n## 题目描述\n\n<p class='div-border red'>Dr现在正在一个叶子节点上。迷迭香的能力可以使我们瞬移到一个节点。但是这种能力并不稳定，瞬移到哪里是随机的。前方会不断传来情报，表示某两个节点之间的路好走了多少，或是难走了多少。迷迭香会问你，从当前所在的节点走到另一个节点要花多少时间。而且，因为她可以穿越时间，到另一个时间的这里再走，所以它还可能问你，在之前的某个时间点上，从一个节点到另一个节点要花多久。</p>\n\n## 输入格式\n\n**操作格式**\n\n```cpp\nbroke x y w    //代表从x到y节点的路线上所有的边需要的时间增加了w%。\ncleaned x y w    //代表从x到y节点的路线上所有的边需要的时间减少了w%。\nask_now x y    //代表询问从目前节点到x节点要多久。\nask_before x y w   //代表询问在时间点w时，从x走到y要多久。\n```\n\n<p class='div-border yellow'>\n\n第1行，3个数，<code>M</code><code>N</code><code>P</code><code>S</code>代表有<code>M</code>个点,<code>N</code>条边，初始位置在<code>P</code>，操作数为<code>S</code>。\n\n<br />第<code>2</code>~<code>n+1</code>行，每行一组<code>X</code><code>Y</code><code>W</code>，代表从<code>X</code>节点到<code>Y</code>节点有一条花费为<code>W</code>的边。\n\n<br />第<code>n+2</code>~<code>n+s+1</code>行，每行一个操作。\n\n</p>\n\n## 说明/提示\n\n<p class='div-border blue'>\n\n所有边花费的时间都大于<code>0</code>。\n\n<br />每次操作经历一个时间。\n\n<br />第<code>1</code>次操作时，在时间<code>1</code> 。\n\n<br />数据保证每次的运算结果为整数。\n\n</p>\n\n\n\n![迷迭香](https://p.pstatp.com/origin/13786000163ed5593647b)","source":"末梢阻断/index.md","raw":"---\ntitle: ' 末梢阻断 '\ndate: 2020-07-23 19:54:35\ndescription: 一道非常非常水的图论题。\nkeywords: 我出的题\ncover: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9716.php\ntop_img: http://ww1.sinaimg.cn/large/0075LAc9ly1gh13309c5ij30hw05rglx.jpg\n---\n\n<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n<div class='tip'><p>本题题目提供者：WYH</p></div>\n\n## 题目背景\n\n<p class='div-border green'>Rhodes的Dr正带领迷迭香和其他几名干员赶往市中心广场。这个城市的地图是一棵树，而市中心广场就在这棵树的根节点。unions有着特殊的能力，他可以制造天灾，使路变得更加难走，来阻挠Dr。而我们Rhodes的后勤队伍会时不时地清理道路，使路更加畅通。迷迭香有着穿越时空的能力，所以她会找到一个好的时机再前往中心广场。</p>\n\n## 题目描述\n\n<p class='div-border red'>Dr现在正在一个叶子节点上。迷迭香的能力可以使我们瞬移到一个节点。但是这种能力并不稳定，瞬移到哪里是随机的。前方会不断传来情报，表示某两个节点之间的路好走了多少，或是难走了多少。迷迭香会问你，从当前所在的节点走到另一个节点要花多少时间。而且，因为她可以穿越时间，到另一个时间的这里再走，所以它还可能问你，在之前的某个时间点上，从一个节点到另一个节点要花多久。</p>\n\n## 输入格式\n\n**操作格式**\n\n```cpp\nbroke x y w    //代表从x到y节点的路线上所有的边需要的时间增加了w%。\ncleaned x y w    //代表从x到y节点的路线上所有的边需要的时间减少了w%。\nask_now x y    //代表询问从目前节点到x节点要多久。\nask_before x y w   //代表询问在时间点w时，从x走到y要多久。\n```\n\n<p class='div-border yellow'>\n\n第1行，3个数，<code>M</code><code>N</code><code>P</code><code>S</code>代表有<code>M</code>个点,<code>N</code>条边，初始位置在<code>P</code>，操作数为<code>S</code>。\n\n<br />第<code>2</code>~<code>n+1</code>行，每行一组<code>X</code><code>Y</code><code>W</code>，代表从<code>X</code>节点到<code>Y</code>节点有一条花费为<code>W</code>的边。\n\n<br />第<code>n+2</code>~<code>n+s+1</code>行，每行一个操作。\n\n</p>\n\n## 说明/提示\n\n<p class='div-border blue'>\n\n所有边花费的时间都大于<code>0</code>。\n\n<br />每次操作经历一个时间。\n\n<br />第<code>1</code>次操作时，在时间<code>1</code> 。\n\n<br />数据保证每次的运算结果为整数。\n\n</p>\n\n\n\n![迷迭香](https://p.pstatp.com/origin/13786000163ed5593647b)","updated":"2021-02-24T00:52:00.000Z","path":"末梢阻断/index.html","comments":1,"layout":"page","_id":"cklkql2mg000opb0y4j2m7dnh","content":"<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n<div class='tip'><p>本题题目提供者：WYH</p></div>\n\n<h2 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h2><p class='div-border green'>Rhodes的Dr正带领迷迭香和其他几名干员赶往市中心广场。这个城市的地图是一棵树，而市中心广场就在这棵树的根节点。unions有着特殊的能力，他可以制造天灾，使路变得更加难走，来阻挠Dr。而我们Rhodes的后勤队伍会时不时地清理道路，使路更加畅通。迷迭香有着穿越时空的能力，所以她会找到一个好的时机再前往中心广场。</p>\n\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p class='div-border red'>Dr现在正在一个叶子节点上。迷迭香的能力可以使我们瞬移到一个节点。但是这种能力并不稳定，瞬移到哪里是随机的。前方会不断传来情报，表示某两个节点之间的路好走了多少，或是难走了多少。迷迭香会问你，从当前所在的节点走到另一个节点要花多少时间。而且，因为她可以穿越时间，到另一个时间的这里再走，所以它还可能问你，在之前的某个时间点上，从一个节点到另一个节点要花多久。</p>\n\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p><strong>操作格式</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">broke x y w    <span class=\"comment\">//代表从x到y节点的路线上所有的边需要的时间增加了w%。</span></span><br><span class=\"line\">cleaned x y w    <span class=\"comment\">//代表从x到y节点的路线上所有的边需要的时间减少了w%。</span></span><br><span class=\"line\">ask_now x y    <span class=\"comment\">//代表询问从目前节点到x节点要多久。</span></span><br><span class=\"line\">ask_before x y w   <span class=\"comment\">//代表询问在时间点w时，从x走到y要多久。</span></span><br></pre></td></tr></table></figure>\n\n<p class='div-border yellow'>\n\n<p>第1行，3个数，<code>M</code><code>N</code><code>P</code><code>S</code>代表有<code>M</code>个点,<code>N</code>条边，初始位置在<code>P</code>，操作数为<code>S</code>。</p>\n<p><br />第<code>2</code>~<code>n+1</code>行，每行一组<code>X</code><code>Y</code><code>W</code>，代表从<code>X</code>节点到<code>Y</code>节点有一条花费为<code>W</code>的边。</p>\n<p><br />第<code>n+2</code>~<code>n+s+1</code>行，每行一个操作。</p>\n</p>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h2><p class='div-border blue'>\n\n<p>所有边花费的时间都大于<code>0</code>。</p>\n<p><br />每次操作经历一个时间。</p>\n<p><br />第<code>1</code>次操作时，在时间<code>1</code> 。</p>\n<p><br />数据保证每次的运算结果为整数。</p>\n</p>\n\n\n\n<p><img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://p.pstatp.com/origin/13786000163ed5593647b\" alt=\"迷迭香\"></p>\n","site":{"data":{}},"excerpt":"","more":"<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n<div class='tip'><p>本题题目提供者：WYH</p></div>\n\n<h2 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h2><p class='div-border green'>Rhodes的Dr正带领迷迭香和其他几名干员赶往市中心广场。这个城市的地图是一棵树，而市中心广场就在这棵树的根节点。unions有着特殊的能力，他可以制造天灾，使路变得更加难走，来阻挠Dr。而我们Rhodes的后勤队伍会时不时地清理道路，使路更加畅通。迷迭香有着穿越时空的能力，所以她会找到一个好的时机再前往中心广场。</p>\n\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p class='div-border red'>Dr现在正在一个叶子节点上。迷迭香的能力可以使我们瞬移到一个节点。但是这种能力并不稳定，瞬移到哪里是随机的。前方会不断传来情报，表示某两个节点之间的路好走了多少，或是难走了多少。迷迭香会问你，从当前所在的节点走到另一个节点要花多少时间。而且，因为她可以穿越时间，到另一个时间的这里再走，所以它还可能问你，在之前的某个时间点上，从一个节点到另一个节点要花多久。</p>\n\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p><strong>操作格式</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">broke x y w    <span class=\"comment\">//代表从x到y节点的路线上所有的边需要的时间增加了w%。</span></span><br><span class=\"line\">cleaned x y w    <span class=\"comment\">//代表从x到y节点的路线上所有的边需要的时间减少了w%。</span></span><br><span class=\"line\">ask_now x y    <span class=\"comment\">//代表询问从目前节点到x节点要多久。</span></span><br><span class=\"line\">ask_before x y w   <span class=\"comment\">//代表询问在时间点w时，从x走到y要多久。</span></span><br></pre></td></tr></table></figure>\n\n<p class='div-border yellow'>\n\n<p>第1行，3个数，<code>M</code><code>N</code><code>P</code><code>S</code>代表有<code>M</code>个点,<code>N</code>条边，初始位置在<code>P</code>，操作数为<code>S</code>。</p>\n<p><br />第<code>2</code>~<code>n+1</code>行，每行一组<code>X</code><code>Y</code><code>W</code>，代表从<code>X</code>节点到<code>Y</code>节点有一条花费为<code>W</code>的边。</p>\n<p><br />第<code>n+2</code>~<code>n+s+1</code>行，每行一个操作。</p>\n</p>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h2><p class='div-border blue'>\n\n<p>所有边花费的时间都大于<code>0</code>。</p>\n<p><br />每次操作经历一个时间。</p>\n<p><br />第<code>1</code>次操作时，在时间<code>1</code> 。</p>\n<p><br />数据保证每次的运算结果为整数。</p>\n</p>\n\n\n\n<p><img src=\"https://p.pstatp.com/origin/13786000163ed5593647b\" alt=\"迷迭香\"></p>\n"},{"title":"很重的罪","date":"2020-07-23T13:00:33.000Z","description":"一道非常非常水的图论题。","keywords":"ArKOI","cover":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9703.php","top_img":"http://ww1.sinaimg.cn/large/0075LAc9ly1gh59qvg8wsj33z41a0aib.jpg","_content":"\n<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n<div class='tip'><p>本题题目提供者：JYC</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：256MB</p></div>\n\n## 题目背景\n\n<p class='div-border green'>\n请注意阅读题目中括号里的内容。\n$\\mathbb N$：非负整数；$\\mathbb N*$：正整数（没有$0$）；$\\mathbb Z$：整数。\n</p>\n\n## 题目描述\n\n你的面前有$1$条铁轨，这条铁轨在眼前分成$$N$$条。每条铁轨上都绑着$$T_i$$个人$$(T_i \\in \\mathbb N* ,0 \\le i \\le N)$$。\n每个人都犯了一些罪过，所以他们都应该受到火车的碾压。然而火车只有一个，你只能选择一条道路。\n绑在铁轨上的每一个人都有一个“罪过程度”$$C_{i,j}(C_{i,j} \\in \\mathbb Z$$，即$$C_{i,j}$$可能是负数）。也就是说，给定一组$$i,j$$,能够唯一确定一个$$C_{i,j}$$，你可以把它看作一个坐标。\n同时，你发现，有许多铁轨有岔路，而且还连到了另一条铁轨上。岔路上没有任何绑着的人或分支岔道，没有岔道的两端连接同一条铁轨，而且岔路具有单向性，方向由岔路的左偏或右偏决定（具体见样例）。\n现在，你想控制电车，使它碾压过的人的“罪过程度”$$\\sum C$$最大。具体操作是：从$$N$$条铁路中任选一条出发，在不倒车的情况下，开过一些铁轨和岔路，直到电车走到一条铁路的尽头（即这之后没有任何一个绑着的人）为止。\n你能解决这个问题吗？\n示例：\n\n![1](https://ddcdn.jd.com/ddimg/jfs/t1/137432/1/5225/133239/5f198ad4E4bf4907d/d6a13dc33032e5a9.jpg)\n\n其中红圈表示人，上面有其坐标$$(i,j)$$，中间的粉色数字表示$$C$$，还有三条岔路。我们可以用一个点组$$\\{(x_1,y_1),(x_2,y_2)\\}$$表示岔路的起点和终点。$$(x_{1or2},y_{1or2})$$表示的是**端点正前方的人的坐标**（“前面”表示左方向，“后面”表示右方向）。特别地，若端点前没有人，则$$y_{1or2}=0$$。比如说上图的蓝色道路可表示为$$\\{(3,0),(2,1)\\}$$或$$\\{(2,1),(3,0)\\}$$。\n在图中很明显，**若$$y_1<y_2$$，则道路从$$(x_1,y_1)$$到达$$(x_2,y_2)$$**。比如说橙色道路$$\\{(1,2),(3,3)\\}$$,由于$$2<3$$,所以只能从铁轨$$1$$走到铁轨$$3$$而不能反着走。蓝色岔道也同理。\n**特别地，若$$y_1=y_2$$，则将这条岔道视作双向的。** 比如说黄色岔道$$\\{(3,1),(4,1)\\}$$,既能从$$3$$号铁轨走向$$4$$号铁轨，也能反着走。\n注意：虽然橙色道路跨越了第$$2$$条铁轨，但是并不连接。也就是说电车走橙色岔道不能在中途切换到第$$2$$条铁轨上，走第$$2$$条铁轨也不能走上橙色岔道。\n最好的规划是：先走第$$4$$条铁轨，碾压了$$(4,1)$$后走过黄色岔道，登上第$$3$$条铁轨，再继续碾压$$(3,2),(3,3),(3,4)$$，最后走到第$$3$$条铁轨的终点，能获得最大$$\\sum C_{max}=16$$。\n\n\n## 输入格式\n\n第$1$行有两个整数$N,M$，分别表示铁轨和岔道的数量。\n第$2$行有$N$个整数，第$i$个整数表示$$T_i$$。\n往下$N$行，第$i$行有$$T_{i}$$个整数，其中第$j$个整数表示$$C_{i,j}$$的值。\n再往下$M$行，每行会有四个整数$$x_1,y_1,x_2,y_2$$，表示有一条岔路，从坐标为$$(x_1,y_1)$$的人的后边连到了$$(x_2,y_2)$$的人的后边。\n\n## 输出格式\n\n<p class='div-border yellow'>\n仅输出一个整数$Ans$，表示你所能碾压的人的“罪过程度”之总和$\\sum C$的最大值。\n</p>\n<h2>输入输出样例</h2>\n\n<b>输入样例#1</b>\n\n```cpp\n4 3\n3 2 4 1\n\n4 2 3\n2 5\n3 3 4 1\n8\n\n1 2  3 3\n3 0  2 1\n3 1  4 1\n```\n\n<b>输出样例#1</b>\n\n```cpp\n16\n```\n<h2>说明/提示</h2>\n\n<p class='div-border red'>\n\t对于所有数据，$N,M,T<1000$，对于任意一个$C$，$-2^{31}\\le C\\le 2^{31}-1$。\n    <br/><b>注意时间限制。</b>\n</p>\n\n","source":"很重的罪/index.md","raw":"---\ntitle: 很重的罪\ndate: 2020-07-23 21:00:33\ndescription: 一道非常非常水的图论题。\nkeywords: ArKOI\ncover: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9703.php\ntop_img: http://ww1.sinaimg.cn/large/0075LAc9ly1gh59qvg8wsj33z41a0aib.jpg\n---\n\n<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n<div class='tip'><p>本题题目提供者：JYC</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：256MB</p></div>\n\n## 题目背景\n\n<p class='div-border green'>\n请注意阅读题目中括号里的内容。\n$\\mathbb N$：非负整数；$\\mathbb N*$：正整数（没有$0$）；$\\mathbb Z$：整数。\n</p>\n\n## 题目描述\n\n你的面前有$1$条铁轨，这条铁轨在眼前分成$$N$$条。每条铁轨上都绑着$$T_i$$个人$$(T_i \\in \\mathbb N* ,0 \\le i \\le N)$$。\n每个人都犯了一些罪过，所以他们都应该受到火车的碾压。然而火车只有一个，你只能选择一条道路。\n绑在铁轨上的每一个人都有一个“罪过程度”$$C_{i,j}(C_{i,j} \\in \\mathbb Z$$，即$$C_{i,j}$$可能是负数）。也就是说，给定一组$$i,j$$,能够唯一确定一个$$C_{i,j}$$，你可以把它看作一个坐标。\n同时，你发现，有许多铁轨有岔路，而且还连到了另一条铁轨上。岔路上没有任何绑着的人或分支岔道，没有岔道的两端连接同一条铁轨，而且岔路具有单向性，方向由岔路的左偏或右偏决定（具体见样例）。\n现在，你想控制电车，使它碾压过的人的“罪过程度”$$\\sum C$$最大。具体操作是：从$$N$$条铁路中任选一条出发，在不倒车的情况下，开过一些铁轨和岔路，直到电车走到一条铁路的尽头（即这之后没有任何一个绑着的人）为止。\n你能解决这个问题吗？\n示例：\n\n![1](https://ddcdn.jd.com/ddimg/jfs/t1/137432/1/5225/133239/5f198ad4E4bf4907d/d6a13dc33032e5a9.jpg)\n\n其中红圈表示人，上面有其坐标$$(i,j)$$，中间的粉色数字表示$$C$$，还有三条岔路。我们可以用一个点组$$\\{(x_1,y_1),(x_2,y_2)\\}$$表示岔路的起点和终点。$$(x_{1or2},y_{1or2})$$表示的是**端点正前方的人的坐标**（“前面”表示左方向，“后面”表示右方向）。特别地，若端点前没有人，则$$y_{1or2}=0$$。比如说上图的蓝色道路可表示为$$\\{(3,0),(2,1)\\}$$或$$\\{(2,1),(3,0)\\}$$。\n在图中很明显，**若$$y_1<y_2$$，则道路从$$(x_1,y_1)$$到达$$(x_2,y_2)$$**。比如说橙色道路$$\\{(1,2),(3,3)\\}$$,由于$$2<3$$,所以只能从铁轨$$1$$走到铁轨$$3$$而不能反着走。蓝色岔道也同理。\n**特别地，若$$y_1=y_2$$，则将这条岔道视作双向的。** 比如说黄色岔道$$\\{(3,1),(4,1)\\}$$,既能从$$3$$号铁轨走向$$4$$号铁轨，也能反着走。\n注意：虽然橙色道路跨越了第$$2$$条铁轨，但是并不连接。也就是说电车走橙色岔道不能在中途切换到第$$2$$条铁轨上，走第$$2$$条铁轨也不能走上橙色岔道。\n最好的规划是：先走第$$4$$条铁轨，碾压了$$(4,1)$$后走过黄色岔道，登上第$$3$$条铁轨，再继续碾压$$(3,2),(3,3),(3,4)$$，最后走到第$$3$$条铁轨的终点，能获得最大$$\\sum C_{max}=16$$。\n\n\n## 输入格式\n\n第$1$行有两个整数$N,M$，分别表示铁轨和岔道的数量。\n第$2$行有$N$个整数，第$i$个整数表示$$T_i$$。\n往下$N$行，第$i$行有$$T_{i}$$个整数，其中第$j$个整数表示$$C_{i,j}$$的值。\n再往下$M$行，每行会有四个整数$$x_1,y_1,x_2,y_2$$，表示有一条岔路，从坐标为$$(x_1,y_1)$$的人的后边连到了$$(x_2,y_2)$$的人的后边。\n\n## 输出格式\n\n<p class='div-border yellow'>\n仅输出一个整数$Ans$，表示你所能碾压的人的“罪过程度”之总和$\\sum C$的最大值。\n</p>\n<h2>输入输出样例</h2>\n\n<b>输入样例#1</b>\n\n```cpp\n4 3\n3 2 4 1\n\n4 2 3\n2 5\n3 3 4 1\n8\n\n1 2  3 3\n3 0  2 1\n3 1  4 1\n```\n\n<b>输出样例#1</b>\n\n```cpp\n16\n```\n<h2>说明/提示</h2>\n\n<p class='div-border red'>\n\t对于所有数据，$N,M,T<1000$，对于任意一个$C$，$-2^{31}\\le C\\le 2^{31}-1$。\n    <br/><b>注意时间限制。</b>\n</p>\n\n","updated":"2021-02-24T00:52:00.000Z","path":"很重的罪/index.html","comments":1,"layout":"page","_id":"cklkql2mi000spb0ybspk3c1u","content":"<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n<div class='tip'><p>本题题目提供者：JYC</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：256MB</p></div>\n\n<h2 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h2><p class='div-border green'>\n请注意阅读题目中括号里的内容。\n$\\mathbb N$：非负整数；$\\mathbb N*$：正整数（没有$0$）；$\\mathbb Z$：整数。\n</p>\n\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>你的面前有$1$条铁轨，这条铁轨在眼前分成$$N$$条。每条铁轨上都绑着$$T_i$$个人$$(T_i \\in \\mathbb N* ,0 \\le i \\le N)$$。<br>每个人都犯了一些罪过，所以他们都应该受到火车的碾压。然而火车只有一个，你只能选择一条道路。<br>绑在铁轨上的每一个人都有一个“罪过程度”$$C_{i,j}(C_{i,j} \\in \\mathbb Z$$，即$$C_{i,j}$$可能是负数）。也就是说，给定一组$$i,j$$,能够唯一确定一个$$C_{i,j}$$，你可以把它看作一个坐标。<br>同时，你发现，有许多铁轨有岔路，而且还连到了另一条铁轨上。岔路上没有任何绑着的人或分支岔道，没有岔道的两端连接同一条铁轨，而且岔路具有单向性，方向由岔路的左偏或右偏决定（具体见样例）。<br>现在，你想控制电车，使它碾压过的人的“罪过程度”$$\\sum C$$最大。具体操作是：从$$N$$条铁路中任选一条出发，在不倒车的情况下，开过一些铁轨和岔路，直到电车走到一条铁路的尽头（即这之后没有任何一个绑着的人）为止。<br>你能解决这个问题吗？<br>示例：</p>\n<p><img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://ddcdn.jd.com/ddimg/jfs/t1/137432/1/5225/133239/5f198ad4E4bf4907d/d6a13dc33032e5a9.jpg\" alt=\"1\"></p>\n<p>其中红圈表示人，上面有其坐标$$(i,j)$$，中间的粉色数字表示$$C$$，还有三条岔路。我们可以用一个点组$${(x_1,y_1),(x_2,y_2)}$$表示岔路的起点和终点。$$(x_{1or2},y_{1or2})$$表示的是<strong>端点正前方的人的坐标</strong>（“前面”表示左方向，“后面”表示右方向）。特别地，若端点前没有人，则$$y_{1or2}=0$$。比如说上图的蓝色道路可表示为$${(3,0),(2,1)}$$或$${(2,1),(3,0)}$$。<br>在图中很明显，<strong>若$$y_1&lt;y_2$$，则道路从$$(x_1,y_1)$$到达$$(x_2,y_2)$$</strong>。比如说橙色道路$${(1,2),(3,3)}$$,由于$$2&lt;3$$,所以只能从铁轨$$1$$走到铁轨$$3$$而不能反着走。蓝色岔道也同理。<br><strong>特别地，若$$y_1=y_2$$，则将这条岔道视作双向的。</strong> 比如说黄色岔道$${(3,1),(4,1)}$$,既能从$$3$$号铁轨走向$$4$$号铁轨，也能反着走。<br>注意：虽然橙色道路跨越了第$$2$$条铁轨，但是并不连接。也就是说电车走橙色岔道不能在中途切换到第$$2$$条铁轨上，走第$$2$$条铁轨也不能走上橙色岔道。<br>最好的规划是：先走第$$4$$条铁轨，碾压了$$(4,1)$$后走过黄色岔道，登上第$$3$$条铁轨，再继续碾压$$(3,2),(3,3),(3,4)$$，最后走到第$$3$$条铁轨的终点，能获得最大$$\\sum C_{max}=16$$。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第$1$行有两个整数$N,M$，分别表示铁轨和岔道的数量。<br>第$2$行有$N$个整数，第$i$个整数表示$$T_i$$。<br>往下$N$行，第$i$行有$$T_{i}$$个整数，其中第$j$个整数表示$$C_{i,j}$$的值。<br>再往下$M$行，每行会有四个整数$$x_1,y_1,x_2,y_2$$，表示有一条岔路，从坐标为$$(x_1,y_1)$$的人的后边连到了$$(x_2,y_2)$$的人的后边。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p class='div-border yellow'>\n仅输出一个整数$Ans$，表示你所能碾压的人的“罪过程度”之总和$\\sum C$的最大值。\n</p>\n<h2>输入输出样例</h2>\n\n<p><b>输入样例#1</b></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">4</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span>  <span class=\"number\">3</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">0</span>  <span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">1</span>  <span class=\"number\">4</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><b>输出样例#1</b></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n<h2>说明/提示</h2>\n\n<p class='div-border red'>\n    对于所有数据，$N,M,T<1000$，对于任意一个$C$，$-2^{31}\\le C\\le 2^{31}-1$。\n    <br/><b>注意时间限制。</b>\n</p>\n\n","site":{"data":{}},"excerpt":"","more":"<div class='tip warning'><p>此题目考试前禁止外泄！！！</p></div>\n<div class='tip'><p>本题题目提供者：JYC</p></div>\n\n<div class='tip success'><p>时间限制：1000ms</p></div>\n\n<div class='tip success'><p>空间限制：256MB</p></div>\n\n<h2 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h2><p class='div-border green'>\n请注意阅读题目中括号里的内容。\n$\\mathbb N$：非负整数；$\\mathbb N*$：正整数（没有$0$）；$\\mathbb Z$：整数。\n</p>\n\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>你的面前有$1$条铁轨，这条铁轨在眼前分成$$N$$条。每条铁轨上都绑着$$T_i$$个人$$(T_i \\in \\mathbb N* ,0 \\le i \\le N)$$。<br>每个人都犯了一些罪过，所以他们都应该受到火车的碾压。然而火车只有一个，你只能选择一条道路。<br>绑在铁轨上的每一个人都有一个“罪过程度”$$C_{i,j}(C_{i,j} \\in \\mathbb Z$$，即$$C_{i,j}$$可能是负数）。也就是说，给定一组$$i,j$$,能够唯一确定一个$$C_{i,j}$$，你可以把它看作一个坐标。<br>同时，你发现，有许多铁轨有岔路，而且还连到了另一条铁轨上。岔路上没有任何绑着的人或分支岔道，没有岔道的两端连接同一条铁轨，而且岔路具有单向性，方向由岔路的左偏或右偏决定（具体见样例）。<br>现在，你想控制电车，使它碾压过的人的“罪过程度”$$\\sum C$$最大。具体操作是：从$$N$$条铁路中任选一条出发，在不倒车的情况下，开过一些铁轨和岔路，直到电车走到一条铁路的尽头（即这之后没有任何一个绑着的人）为止。<br>你能解决这个问题吗？<br>示例：</p>\n<p><img src=\"https://ddcdn.jd.com/ddimg/jfs/t1/137432/1/5225/133239/5f198ad4E4bf4907d/d6a13dc33032e5a9.jpg\" alt=\"1\"></p>\n<p>其中红圈表示人，上面有其坐标$$(i,j)$$，中间的粉色数字表示$$C$$，还有三条岔路。我们可以用一个点组$${(x_1,y_1),(x_2,y_2)}$$表示岔路的起点和终点。$$(x_{1or2},y_{1or2})$$表示的是<strong>端点正前方的人的坐标</strong>（“前面”表示左方向，“后面”表示右方向）。特别地，若端点前没有人，则$$y_{1or2}=0$$。比如说上图的蓝色道路可表示为$${(3,0),(2,1)}$$或$${(2,1),(3,0)}$$。<br>在图中很明显，<strong>若$$y_1&lt;y_2$$，则道路从$$(x_1,y_1)$$到达$$(x_2,y_2)$$</strong>。比如说橙色道路$${(1,2),(3,3)}$$,由于$$2&lt;3$$,所以只能从铁轨$$1$$走到铁轨$$3$$而不能反着走。蓝色岔道也同理。<br><strong>特别地，若$$y_1=y_2$$，则将这条岔道视作双向的。</strong> 比如说黄色岔道$${(3,1),(4,1)}$$,既能从$$3$$号铁轨走向$$4$$号铁轨，也能反着走。<br>注意：虽然橙色道路跨越了第$$2$$条铁轨，但是并不连接。也就是说电车走橙色岔道不能在中途切换到第$$2$$条铁轨上，走第$$2$$条铁轨也不能走上橙色岔道。<br>最好的规划是：先走第$$4$$条铁轨，碾压了$$(4,1)$$后走过黄色岔道，登上第$$3$$条铁轨，再继续碾压$$(3,2),(3,3),(3,4)$$，最后走到第$$3$$条铁轨的终点，能获得最大$$\\sum C_{max}=16$$。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第$1$行有两个整数$N,M$，分别表示铁轨和岔道的数量。<br>第$2$行有$N$个整数，第$i$个整数表示$$T_i$$。<br>往下$N$行，第$i$行有$$T_{i}$$个整数，其中第$j$个整数表示$$C_{i,j}$$的值。<br>再往下$M$行，每行会有四个整数$$x_1,y_1,x_2,y_2$$，表示有一条岔路，从坐标为$$(x_1,y_1)$$的人的后边连到了$$(x_2,y_2)$$的人的后边。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p class='div-border yellow'>\n仅输出一个整数$Ans$，表示你所能碾压的人的“罪过程度”之总和$\\sum C$的最大值。\n</p>\n<h2>输入输出样例</h2>\n\n<p><b>输入样例#1</b></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">4</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span>  <span class=\"number\">3</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">0</span>  <span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">1</span>  <span class=\"number\">4</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><b>输出样例#1</b></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n<h2>说明/提示</h2>\n\n<p class='div-border red'>\n    对于所有数据，$N,M,T<1000$，对于任意一个$C$，$-2^{31}\\le C\\le 2^{31}-1$。\n    <br/><b>注意时间限制。</b>\n</p>\n\n"}],"Post":[{"title":"20200608递归测试T2地盘划分题解","date":"2020-06-08T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://tvax1.sinaimg.cn/large/0072Vf1pgy1foxkfgr4ckj31hc0u0h0r.jpg","_content":"# 题目\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202006/1924270-20200609153230110-1022504966.png\" alt=\"\" loading=\"lazy\" />\n\n# 分析\n\n## 递归分析\n\n首先，看到这个题，我们可以先从样例入手分析。看样例，容易发现每次剩下的长方形的宽就是上次长方形的长减宽，长就是上一个长方形的宽。（如果宽比长大，换一下顺序就可以了）\n\n那我们就容易想到这道题可以用递归来解决。每次传入剩下的长方形的长和宽就行了。\n\n直到长和宽有一个是零就可以了。\n\n到这里，我们就可以写出递归的代码了。\n\n## 递归代码\n\n```cpp\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nunsigned int totX,totY;\nunsigned int RESULT;\n\nvoid clac(unsigned int x,unsigned int y)\n{\n    if(x<y)//如果长比宽小，那就交换顺序，否则会出现负数 \n    {\n        swap(x,y);\n    }\n    if(x==0||y==0)\n    {\n        return;\n    }\n    if(x==1)\n    {\n        RESULT+=y;\n        return;\n    }\n    if(y==1)\n    {\n        RESULT+=x;\n        return;\n    }\n    //优化，如果长和宽有一个是一且都不是零，则还能分成的小正方形个数一定就是另一边的长度 \n    RESULT++;\n    clac(y,x-y);\n}\n\nint main()\n{\n    freopen(\"territory.in\",\"r\",stdin);\n    freopen(\"territory.out\",\"w\",stdout);\n    cin>>totX>>totY;\n    clac(totX,totY);\n    cout<<RESULT<<endl;\n    fclose(stdin);\n    fclose(stdout);\n    return 0;\n}\n```\n\n## 问题&解决方案\n\n这么有理有据的递归代码，竟然会运行错误！！\n\n| 测试点 | 输入文件       | 测试结果   | 运行用时 | 内存消耗 | 得分 |\n| :----- | :------------- | :--------- | :------- | :------- | :--- |\n| #1     | territory1.in  | 答案正确   | 0.000 s  | 2.543 MB | 10   |\n| #2     | territory2.in  | 答案正确   | 0.000 s  | 2.543 MB | 10   |\n| #3     | territory3.in  | 答案正确   | 0.000 s  | 2.535 MB | 10   |\n| #4     | territory4.in  | 答案正确   | 0.000 s  | 2.539 MB | 10   |\n| #5     | territory5.in  | 答案正确   | 0.000 s  | 2.535 MB | 10   |\n| #6     | territory6.in  | 答案正确   | 0.000 s  | 2.539 MB | 10   |\n| #7     | territory7.in  | 答案正确   | 0.000 s  | 2.539 MB | 10   |\n| #8     | territory8.in  | 运行时错误 | 不可用   | 不可用   | 0    |\n| #9     | territory9.in  | 答案正确   | 0.000 s  | 3.547 MB | 10   |\n| #10    | territory10.in | 答案正确   | 0.000 s  | 2.566 MB | 10   |\n\n康康测试点8的数据：\n\n```\n2 10000000\n```\n\n！！！！！\n\n这么大的数据，结合上面的运行错误，明显这是爆栈了。\n\n看来这个题不能使用递归。（那为什么还是递归测试[doge]）\n\n明显只能使用循环了。\n\n也很好写，只需要把刚才传入长和宽改为把长和宽存储在变量中，每次直接调用就可以了。\n\n# 终极代码\n\n```cpp\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n,m,ans;\n\nint main()\n{\n    freopen(\"territory.in\",\"r\",stdin);\n    freopen(\"territory.out\",\"w\",stdout);\n    cin>>n>>m;\n    while(n&&m)\n    {\n        ans++;\n        if(n==m)\n        {\n            cout<<ans<<endl;\n            return 0;\n        }\n        if(n>m)\n        {\n            n-=m;\n        }\n        else\n        {\n            m-=n;\n        }\n    }\n    return 0;\n}\n```\n","source":"_posts/20200608递归测试T2地盘划分题解.md","raw":"---\ntitle: 20200608递归测试T2地盘划分题解\ndate: 2020-06-09\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://tvax1.sinaimg.cn/large/0072Vf1pgy1foxkfgr4ckj31hc0u0h0r.jpg\ntags: \n    - 递归\n    - 校内考试\n---\n# 题目\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202006/1924270-20200609153230110-1022504966.png\" alt=\"\" loading=\"lazy\" />\n\n# 分析\n\n## 递归分析\n\n首先，看到这个题，我们可以先从样例入手分析。看样例，容易发现每次剩下的长方形的宽就是上次长方形的长减宽，长就是上一个长方形的宽。（如果宽比长大，换一下顺序就可以了）\n\n那我们就容易想到这道题可以用递归来解决。每次传入剩下的长方形的长和宽就行了。\n\n直到长和宽有一个是零就可以了。\n\n到这里，我们就可以写出递归的代码了。\n\n## 递归代码\n\n```cpp\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nunsigned int totX,totY;\nunsigned int RESULT;\n\nvoid clac(unsigned int x,unsigned int y)\n{\n    if(x<y)//如果长比宽小，那就交换顺序，否则会出现负数 \n    {\n        swap(x,y);\n    }\n    if(x==0||y==0)\n    {\n        return;\n    }\n    if(x==1)\n    {\n        RESULT+=y;\n        return;\n    }\n    if(y==1)\n    {\n        RESULT+=x;\n        return;\n    }\n    //优化，如果长和宽有一个是一且都不是零，则还能分成的小正方形个数一定就是另一边的长度 \n    RESULT++;\n    clac(y,x-y);\n}\n\nint main()\n{\n    freopen(\"territory.in\",\"r\",stdin);\n    freopen(\"territory.out\",\"w\",stdout);\n    cin>>totX>>totY;\n    clac(totX,totY);\n    cout<<RESULT<<endl;\n    fclose(stdin);\n    fclose(stdout);\n    return 0;\n}\n```\n\n## 问题&解决方案\n\n这么有理有据的递归代码，竟然会运行错误！！\n\n| 测试点 | 输入文件       | 测试结果   | 运行用时 | 内存消耗 | 得分 |\n| :----- | :------------- | :--------- | :------- | :------- | :--- |\n| #1     | territory1.in  | 答案正确   | 0.000 s  | 2.543 MB | 10   |\n| #2     | territory2.in  | 答案正确   | 0.000 s  | 2.543 MB | 10   |\n| #3     | territory3.in  | 答案正确   | 0.000 s  | 2.535 MB | 10   |\n| #4     | territory4.in  | 答案正确   | 0.000 s  | 2.539 MB | 10   |\n| #5     | territory5.in  | 答案正确   | 0.000 s  | 2.535 MB | 10   |\n| #6     | territory6.in  | 答案正确   | 0.000 s  | 2.539 MB | 10   |\n| #7     | territory7.in  | 答案正确   | 0.000 s  | 2.539 MB | 10   |\n| #8     | territory8.in  | 运行时错误 | 不可用   | 不可用   | 0    |\n| #9     | territory9.in  | 答案正确   | 0.000 s  | 3.547 MB | 10   |\n| #10    | territory10.in | 答案正确   | 0.000 s  | 2.566 MB | 10   |\n\n康康测试点8的数据：\n\n```\n2 10000000\n```\n\n！！！！！\n\n这么大的数据，结合上面的运行错误，明显这是爆栈了。\n\n看来这个题不能使用递归。（那为什么还是递归测试[doge]）\n\n明显只能使用循环了。\n\n也很好写，只需要把刚才传入长和宽改为把长和宽存储在变量中，每次直接调用就可以了。\n\n# 终极代码\n\n```cpp\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n,m,ans;\n\nint main()\n{\n    freopen(\"territory.in\",\"r\",stdin);\n    freopen(\"territory.out\",\"w\",stdout);\n    cin>>n>>m;\n    while(n&&m)\n    {\n        ans++;\n        if(n==m)\n        {\n            cout<<ans<<endl;\n            return 0;\n        }\n        if(n>m)\n        {\n            n-=m;\n        }\n        else\n        {\n            m-=n;\n        }\n    }\n    return 0;\n}\n```\n","slug":"20200608递归测试T2地盘划分题解","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2lx0001pb0y1ixvdduc","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/blog/1924270/202006/1924270-20200609153230110-1022504966.png\" alt=\"\" loading=\"lazy\" />\n\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><h2 id=\"递归分析\"><a href=\"#递归分析\" class=\"headerlink\" title=\"递归分析\"></a>递归分析</h2><p>首先，看到这个题，我们可以先从样例入手分析。看样例，容易发现每次剩下的长方形的宽就是上次长方形的长减宽，长就是上一个长方形的宽。（如果宽比长大，换一下顺序就可以了）</p>\n<p>那我们就容易想到这道题可以用递归来解决。每次传入剩下的长方形的长和宽就行了。</p>\n<p>直到长和宽有一个是零就可以了。</p>\n<p>到这里，我们就可以写出递归的代码了。</p>\n<h2 id=\"递归代码\"><a href=\"#递归代码\" class=\"headerlink\" title=\"递归代码\"></a>递归代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(3)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> totX,totY;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> RESULT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clac</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> x,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;y)<span class=\"comment\">//如果长比宽小，那就交换顺序，否则会出现负数 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        swap(x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>||y==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RESULT+=y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RESULT+=x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//优化，如果长和宽有一个是一且都不是零，则还能分成的小正方形个数一定就是另一边的长度 </span></span><br><span class=\"line\">    RESULT++;</span><br><span class=\"line\">    clac(y,x-y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;territory.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;territory.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;totX&gt;&gt;totY;</span><br><span class=\"line\">    clac(totX,totY);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;RESULT&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题-amp-解决方案\"><a href=\"#问题-amp-解决方案\" class=\"headerlink\" title=\"问题&amp;解决方案\"></a>问题&amp;解决方案</h2><p>这么有理有据的递归代码，竟然会运行错误！！</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">测试点</th>\n<th align=\"left\">输入文件</th>\n<th align=\"left\">测试结果</th>\n<th align=\"left\">运行用时</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">得分</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">#1</td>\n<td align=\"left\">territory1.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.543 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#2</td>\n<td align=\"left\">territory2.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.543 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#3</td>\n<td align=\"left\">territory3.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.535 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#4</td>\n<td align=\"left\">territory4.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.539 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#5</td>\n<td align=\"left\">territory5.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.535 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#6</td>\n<td align=\"left\">territory6.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.539 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#7</td>\n<td align=\"left\">territory7.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.539 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#8</td>\n<td align=\"left\">territory8.in</td>\n<td align=\"left\">运行时错误</td>\n<td align=\"left\">不可用</td>\n<td align=\"left\">不可用</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">#9</td>\n<td align=\"left\">territory9.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">3.547 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#10</td>\n<td align=\"left\">territory10.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.566 MB</td>\n<td align=\"left\">10</td>\n</tr>\n</tbody></table>\n<p>康康测试点8的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 10000000</span><br></pre></td></tr></table></figure>\n\n<p>！！！！！</p>\n<p>这么大的数据，结合上面的运行错误，明显这是爆栈了。</p>\n<p>看来这个题不能使用递归。（那为什么还是递归测试[doge]）</p>\n<p>明显只能使用循环了。</p>\n<p>也很好写，只需要把刚才传入长和宽改为把长和宽存储在变量中，每次直接调用就可以了。</p>\n<h1 id=\"终极代码\"><a href=\"#终极代码\" class=\"headerlink\" title=\"终极代码\"></a>终极代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(3)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;territory.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;territory.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&amp;&amp;m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&gt;m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n-=m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m-=n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><img src=\"https://img2020.cnblogs.com/blog/1924270/202006/1924270-20200609153230110-1022504966.png\" alt=\"\" loading=\"lazy\" />\n\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><h2 id=\"递归分析\"><a href=\"#递归分析\" class=\"headerlink\" title=\"递归分析\"></a>递归分析</h2><p>首先，看到这个题，我们可以先从样例入手分析。看样例，容易发现每次剩下的长方形的宽就是上次长方形的长减宽，长就是上一个长方形的宽。（如果宽比长大，换一下顺序就可以了）</p>\n<p>那我们就容易想到这道题可以用递归来解决。每次传入剩下的长方形的长和宽就行了。</p>\n<p>直到长和宽有一个是零就可以了。</p>\n<p>到这里，我们就可以写出递归的代码了。</p>\n<h2 id=\"递归代码\"><a href=\"#递归代码\" class=\"headerlink\" title=\"递归代码\"></a>递归代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(3)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> totX,totY;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> RESULT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clac</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> x,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;y)<span class=\"comment\">//如果长比宽小，那就交换顺序，否则会出现负数 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        swap(x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">0</span>||y==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RESULT+=y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RESULT+=x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//优化，如果长和宽有一个是一且都不是零，则还能分成的小正方形个数一定就是另一边的长度 </span></span><br><span class=\"line\">    RESULT++;</span><br><span class=\"line\">    clac(y,x-y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;territory.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;territory.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;totX&gt;&gt;totY;</span><br><span class=\"line\">    clac(totX,totY);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;RESULT&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题-amp-解决方案\"><a href=\"#问题-amp-解决方案\" class=\"headerlink\" title=\"问题&amp;解决方案\"></a>问题&amp;解决方案</h2><p>这么有理有据的递归代码，竟然会运行错误！！</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">测试点</th>\n<th align=\"left\">输入文件</th>\n<th align=\"left\">测试结果</th>\n<th align=\"left\">运行用时</th>\n<th align=\"left\">内存消耗</th>\n<th align=\"left\">得分</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">#1</td>\n<td align=\"left\">territory1.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.543 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#2</td>\n<td align=\"left\">territory2.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.543 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#3</td>\n<td align=\"left\">territory3.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.535 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#4</td>\n<td align=\"left\">territory4.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.539 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#5</td>\n<td align=\"left\">territory5.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.535 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#6</td>\n<td align=\"left\">territory6.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.539 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#7</td>\n<td align=\"left\">territory7.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.539 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#8</td>\n<td align=\"left\">territory8.in</td>\n<td align=\"left\">运行时错误</td>\n<td align=\"left\">不可用</td>\n<td align=\"left\">不可用</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">#9</td>\n<td align=\"left\">territory9.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">3.547 MB</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">#10</td>\n<td align=\"left\">territory10.in</td>\n<td align=\"left\">答案正确</td>\n<td align=\"left\">0.000 s</td>\n<td align=\"left\">2.566 MB</td>\n<td align=\"left\">10</td>\n</tr>\n</tbody></table>\n<p>康康测试点8的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 10000000</span><br></pre></td></tr></table></figure>\n\n<p>！！！！！</p>\n<p>这么大的数据，结合上面的运行错误，明显这是爆栈了。</p>\n<p>看来这个题不能使用递归。（那为什么还是递归测试[doge]）</p>\n<p>明显只能使用循环了。</p>\n<p>也很好写，只需要把刚才传入长和宽改为把长和宽存储在变量中，每次直接调用就可以了。</p>\n<h1 id=\"终极代码\"><a href=\"#终极代码\" class=\"headerlink\" title=\"终极代码\"></a>终极代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(3)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;territory.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;territory.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&amp;&amp;m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&gt;m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n-=m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m-=n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"2020-07-20测试","date":"2020-07-20T08:32:18.000Z","description":"2020-07-20校内测试的反思与总结。","top_img":"https://api.r10086.com/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F2.php","cover":"https://tvax2.sinaimg.cn/large/0072Vf1pgy1fodqiuq34vj31kw0zkhdt.jpg","_content":"\n# T1 懒羊羊找朋友\n\n## 题目\n\n#### 题目描述\n\n最近电视上热播“喜羊羊与灰太狼”，大家都说“做人要做懒羊羊”，为什么呢？因为他 不愿意多做一个动作、不愿意多动一个脑筋，甚至懒得张嘴吃饭，简直是懒的无与伦比！ 话说羊村的羊还真多啊！每周一早晨，羊村老村长慢羊羊同志学着人类的学校，把所有 羊列队在广场上进行思想教育，主要是保持警惕防止狼类的攻击，当然也包括对懒羊羊之类 的“异类”进行批评教育。 羊群列队成一个 m*n 的方阵，每只羊站在一个格子里，而且是长期固定的，便于点名啊：） 晕倒！当然，这样一来的好处是，大家都知道自己的朋友站在哪个位置，虽然它们可能互相 看不见，但心里都知道，并且在老村长进行无聊的训教时，大家都还想赶快结束赶快找离自 己最近的朋友交流周末的开心事呢？ 懒羊羊也想尽快找到自己的好朋友聊天，但是他既不愿意多走路、又不愿意动脑筋去想 怎么走，所以就请智羊羊同学帮它编个程序，以便快速定位找到离它最近的一位好朋友。 如果你是智羊羊，你怎么完成这个任务呢？\n\n#### 输入格式\n\n问题输入： 第 1 行为两个整数 m 和 n， 2<=m,n<=100。 第 2 行为懒羊羊的位置 x,y，表示在第 x 行 y 列。 以下 m 行为一个 m*n 的数字方阵， 所有 a[i,j]的值相等的表示是好朋友， 1<=a[i,j]<=100。 每行的两个数之间都有一个空格分隔。\n\n#### 输出格式\n\n问题输出： 输出一行两个数 x1,y1，表示懒羊羊最近的一个朋友的位置在第 x1 行 y1 列，之间用一 个空格隔开。 如果最近的的朋友不只一个，则输出 x1 最小的，如果还不唯一则输出 y1 最小的。 数据保证懒羊羊一定有朋友。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```cpp\n4 4\n1 2\n2 1 2 1\n1 3 1 3\n2 1 2 2\n2 2 1 3\n```\n\n**输出 #1**\n\n```cpp\n1 4\n```\n\n## 分析\n\n这道题很明显是一个极其裸的广搜题。\n\n可是我竟然因为太长时间没做广搜的题导致忘记了广搜怎么写……\n\n不过我还是根据自己对于广搜的理解写出了正确的广搜代码。\n\n但是还是不对……对广搜的极度不自信导致我一直在检查我的广搜……\n\n考试的时候调试了将近两个小时，后来又调试了很长时间也没有调试出来。\n\n最后发现竟然是变量名称写错了……\n\n应该是`temp1`结果写成`temp`了……\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n    long long x = 0;\n    int f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch>'9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\n\nint totN;\nint totM;\nint X,Y;\nint mapp[109][109];\nqueue<pair<int,int> > Q;\nint dir[4][2]={{1,0},{-1,0},{0,1},{0,-1}};\nint step[109][109];\nstruct student\n{\n    int x,y;\n}friends[109];\nint fricnt=1;\nbool vis[109][109];\nint mindis=99999999;\n\nbool operator<(student aa,student bb)\n{\n    if(aa.x<bb.x)\n    {\n        return 1;\n    }\n    if(aa.x>bb.x)\n    {\n        return 0;\n    }\n    if(aa.y<bb.y)\n    {\n        return 1;\n    }\n    return 0;\n}\n\nvoid BFS()\n{\n    pair<int,int> temppair;\n    temppair.first=X;\n    temppair.second=Y;\n    Q.push(temppair);\n    vis[X][Y]=true;\n    while(!Q.empty())\n    {\n        int nowx=Q.front().first;\n        int nowy=Q.front().second;\n        int nowstep=step[Q.front().first][Q.front().second];\n        if(mapp[nowx][nowy]==mapp[X][Y]&&nowstep<=mindis&&(nowx!=X||nowy!=Y))\n        {\n            mindis=nowstep;\n            friends[fricnt].x=nowx;\n            friends[fricnt].y=nowy;\n            fricnt++;\n        }\n        if(nowstep>mindis+3)\n        {\n            break;\n        }\n        for(auto & i : dir)\n        {\n            int x=Q.front().first+i[0];\n            int y=Q.front().second+i[1];\n            int astep=step[Q.front().first][Q.front().second];\n            step[x][y]=astep+1;\n            if(x<=totM&&y<=totN&&!vis[x][y]&&x>0&&y>0)\n            {\n                vis[x][y]=true;\n                pair<int,int> temppair1;\n                temppair1.first=x;\n                temppair1.second=y;\n                Q.push(temppair1);\n            }\n        }\n        Q.pop();\n    }\n}\n\nint main()\n{\n    cin>>totM>>totN;\n    cin>>X>>Y;\n    for(int i=1;i<=totM;i++)\n    {\n        for(int j=1;j<=totN;j++)\n        {\n            mapp[i][j]=read();\n        }\n    }\n    BFS();\n    sort(friends+1,friends+fricnt);\n    printf(\"%d %d\",friends[1].x,friends[1].y);\n    return 0;\n}\n```\n\n就是在第91行……应该push`temppair1`结果当时push成`temppair`了……\n\n就导致我后面的题几乎没多少时间了……\n\n# T2 圆的国度\n\n## 题目\n\n#### 题目描述\n\n平面上有 n 个没有公共点 ． ． ． ． ． 的圆。你要从点(x1,y1)走到(x2,y2)。问你最少要经过多少圆 的边界。保证这两个点都不在圆的边界上。\n\n#### 输入格式\n\n问题输入： 第一行一个整数 n， 1<=n<=50。 接下来三行每行 n 个整数，分别表示 n 个圆的圆心和半径，格式如下： x1,x2,„,xi,„,xn y1,y2,„,yi,„,yn r1,r2,„,ri,„,rn -1000<=xi,yi<=1000,1<=ri<=1000 最后一行四个整数 X1,Y1,X2,Y2， -1000<=x1,y1,x2,y2<=1000。\n\n#### 输出格式\n\n问题输出： 一个整数，意义如上。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```cpp\n1\n0 \n0 \n2 \n-5 1 5 1\n```\n\n**输出 #1**\n\n```cpp\n0\n```\n\n**输入 #2**\n\n```cpp\n3\n0 -6 6\n0 1 6\n2 2 2\n-5 1 5 1\n```\n\n**输出 #2**\n\n```cpp\n1\n```\n\n## 分析\n\n这道题其实是很简单的……\n\n但是我当时把圆都当作了实心圆，“没有公共点”理解成了圆内部也不会有其他圆\n\n就导致我认为这个题答案只会有`0,1,2`。\n\n而样例恰恰没有违背我的理解，我的代码还过了样例……\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n    long long x = 0;\n    int f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch>'9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nvoid write(const int& x)\n{\n    if (!x)\n    {\n        putchar('0');\n        return;\n    }\n    char f[100];\n    int tmp = x;\n    if (tmp < 0)\n    {\n        tmp = -tmp;\n        putchar('-');\n    }\n    int s = 0;\n    while (tmp > 0)\n    {\n        f[s++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while (s > 0)\n    {\n        putchar(f[--s]);\n    }\n}\n\nint totN;\ndouble ax,ay,bx,by;\nstruct circle\n{\n    double x,y;\n    double r;\n    bool in[3];\n}circles[1009];\nint result;\n\nint main()\n{\n    totN=read();\n    for (int i = 1; i <= totN; ++i)\n    {\n        circles[i].x=read();\n    }\n    for (int i = 1; i <= totN; ++i)\n    {\n        circles[i].y=read();\n    }\n    for (int i = 1; i <= totN; ++i)\n    {\n        circles[i].r=read();\n    }\n    ax=read();\n    ay=read();\n    bx=read();\n    by=read();\n    for (int i = 1; i <= totN; ++i)\n    {\n        if (fabs(circles[i].x-ax+0.0)*fabs(circles[i].x-ax+0.0)+fabs(circles[i].y-ay+0.0)*fabs(circles[i].y-ay+0.0)<=circles[i].r*circles[i].r+0.0)\n        {\n            circles[i].in[1]=true;\n        }\n        if (fabs(circles[i].x-bx+0.0)*fabs(circles[i].x-bx+0.0)+fabs(circles[i].y-by+0.0)*fabs(circles[i].y-by+0.0)<=circles[i].r*circles[i].r+0.0)\n        {\n            circles[i].in[2]=true;\n        }\n    }\n    for (int i = 1; i <= totN; ++i)\n    {\n        result+=circles[i].in[1]^circles[i].in[2];\n    }\n    write(result);\n    return 0;\n}//LikiBlaze Code\n```\n\n如果圆之间可以包含的话，其实总体思路是一样的……只要有圆是一个点在但是另一个点不在，`result++`即可。\n\n# T3 阶乘之和\n\n## 题目\n\n#### 题目描述\n\n给定一个非负整数 n，请你判断 n 是否可以由一些非负整数的阶乘相加得到。\n\n#### 输入格式\n\n有若干组数据。每行一个整数 n，保证 n<1000000。 以负数结束输入。\n\n#### 输出格式\n\n对于每组数据输出一行，若可以则输出‘YES’，否则输出‘NO’。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```cpp\n9 \n-1\n```\n\n**输出 #1**\n\n```cpp\nYES\n```\n\n## 分析\n\n这道题可以选择深搜，也可以选择01背包预处理。\n\n我考试的时候写的是深搜，然后后来写的是预处理。\n\n主要的错误其实和别人也是一样的，以为`0!=1`。\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n    long long x = 0;\n    int f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch>'9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nvoid write(const int& x)\n{\n    if (!x)\n    {\n        putchar('0');\n        return;\n    }\n    char f[100];\n    int tmp = x;\n    if (tmp < 0)\n    {\n        tmp = -tmp;\n        putchar('-');\n    }\n    int s = 0;\n    while (tmp > 0)\n    {\n        f[s++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while (s > 0)\n    {\n        putchar(f[--s]);\n    }\n}\n\nbool flag;\n\nconst int maxc=10;\nlong long jie[19]={1,1};\nbool used[19];\nbool able[1000090]={1};\n\nvoid cheng()\n{\n    for (int i = 2; i <= maxc; ++i)\n    {\n        jie[i] = jie[i - 1] * i;\n    }\n}\nvoid work()\n{\n    for (int j = 9; j >= 0; --j)\n    {\n        for (int i = 1000009-jie[j]; i >= 0; --i)\n        {\n            if (able[i])\n            {\n                able[i+jie[j]]=true;\n            }\n        }\n    }\n}\n\nint main()\n{\n    cheng();\n    work();\n    int temp;\n    temp=read();\n    while (temp>=0)\n    {\n        if (temp==0)\n        {\n            putchar('N');\n            putchar('O');\n            putchar('\\n');\n        }\n        else if (able[temp])\n        {\n            putchar('Y');\n            putchar('E');\n            putchar('S');\n            putchar('\\n');\n        }\n        else\n        {\n                putchar('N');\n                putchar('O');\n                putchar('\\n');\n        }\n        temp=read();\n    }\n    return 0;\n}//LikiBlaze Code\n```\n\n","source":"_posts/2020-07-20测试.md","raw":"---\ntitle: 2020-07-20测试\ndate: 2020-07-20 16:32:18\ntags: \n\t- 校内测试\n\t- BFS\n\t- 背包问题\ncategories: 校内测试\ndescription: 2020-07-20校内测试的反思与总结。\ntop_img: https://api.r10086.com/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F2.php\ncover: https://tvax2.sinaimg.cn/large/0072Vf1pgy1fodqiuq34vj31kw0zkhdt.jpg\n---\n\n# T1 懒羊羊找朋友\n\n## 题目\n\n#### 题目描述\n\n最近电视上热播“喜羊羊与灰太狼”，大家都说“做人要做懒羊羊”，为什么呢？因为他 不愿意多做一个动作、不愿意多动一个脑筋，甚至懒得张嘴吃饭，简直是懒的无与伦比！ 话说羊村的羊还真多啊！每周一早晨，羊村老村长慢羊羊同志学着人类的学校，把所有 羊列队在广场上进行思想教育，主要是保持警惕防止狼类的攻击，当然也包括对懒羊羊之类 的“异类”进行批评教育。 羊群列队成一个 m*n 的方阵，每只羊站在一个格子里，而且是长期固定的，便于点名啊：） 晕倒！当然，这样一来的好处是，大家都知道自己的朋友站在哪个位置，虽然它们可能互相 看不见，但心里都知道，并且在老村长进行无聊的训教时，大家都还想赶快结束赶快找离自 己最近的朋友交流周末的开心事呢？ 懒羊羊也想尽快找到自己的好朋友聊天，但是他既不愿意多走路、又不愿意动脑筋去想 怎么走，所以就请智羊羊同学帮它编个程序，以便快速定位找到离它最近的一位好朋友。 如果你是智羊羊，你怎么完成这个任务呢？\n\n#### 输入格式\n\n问题输入： 第 1 行为两个整数 m 和 n， 2<=m,n<=100。 第 2 行为懒羊羊的位置 x,y，表示在第 x 行 y 列。 以下 m 行为一个 m*n 的数字方阵， 所有 a[i,j]的值相等的表示是好朋友， 1<=a[i,j]<=100。 每行的两个数之间都有一个空格分隔。\n\n#### 输出格式\n\n问题输出： 输出一行两个数 x1,y1，表示懒羊羊最近的一个朋友的位置在第 x1 行 y1 列，之间用一 个空格隔开。 如果最近的的朋友不只一个，则输出 x1 最小的，如果还不唯一则输出 y1 最小的。 数据保证懒羊羊一定有朋友。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```cpp\n4 4\n1 2\n2 1 2 1\n1 3 1 3\n2 1 2 2\n2 2 1 3\n```\n\n**输出 #1**\n\n```cpp\n1 4\n```\n\n## 分析\n\n这道题很明显是一个极其裸的广搜题。\n\n可是我竟然因为太长时间没做广搜的题导致忘记了广搜怎么写……\n\n不过我还是根据自己对于广搜的理解写出了正确的广搜代码。\n\n但是还是不对……对广搜的极度不自信导致我一直在检查我的广搜……\n\n考试的时候调试了将近两个小时，后来又调试了很长时间也没有调试出来。\n\n最后发现竟然是变量名称写错了……\n\n应该是`temp1`结果写成`temp`了……\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n    long long x = 0;\n    int f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch>'9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\n\nint totN;\nint totM;\nint X,Y;\nint mapp[109][109];\nqueue<pair<int,int> > Q;\nint dir[4][2]={{1,0},{-1,0},{0,1},{0,-1}};\nint step[109][109];\nstruct student\n{\n    int x,y;\n}friends[109];\nint fricnt=1;\nbool vis[109][109];\nint mindis=99999999;\n\nbool operator<(student aa,student bb)\n{\n    if(aa.x<bb.x)\n    {\n        return 1;\n    }\n    if(aa.x>bb.x)\n    {\n        return 0;\n    }\n    if(aa.y<bb.y)\n    {\n        return 1;\n    }\n    return 0;\n}\n\nvoid BFS()\n{\n    pair<int,int> temppair;\n    temppair.first=X;\n    temppair.second=Y;\n    Q.push(temppair);\n    vis[X][Y]=true;\n    while(!Q.empty())\n    {\n        int nowx=Q.front().first;\n        int nowy=Q.front().second;\n        int nowstep=step[Q.front().first][Q.front().second];\n        if(mapp[nowx][nowy]==mapp[X][Y]&&nowstep<=mindis&&(nowx!=X||nowy!=Y))\n        {\n            mindis=nowstep;\n            friends[fricnt].x=nowx;\n            friends[fricnt].y=nowy;\n            fricnt++;\n        }\n        if(nowstep>mindis+3)\n        {\n            break;\n        }\n        for(auto & i : dir)\n        {\n            int x=Q.front().first+i[0];\n            int y=Q.front().second+i[1];\n            int astep=step[Q.front().first][Q.front().second];\n            step[x][y]=astep+1;\n            if(x<=totM&&y<=totN&&!vis[x][y]&&x>0&&y>0)\n            {\n                vis[x][y]=true;\n                pair<int,int> temppair1;\n                temppair1.first=x;\n                temppair1.second=y;\n                Q.push(temppair1);\n            }\n        }\n        Q.pop();\n    }\n}\n\nint main()\n{\n    cin>>totM>>totN;\n    cin>>X>>Y;\n    for(int i=1;i<=totM;i++)\n    {\n        for(int j=1;j<=totN;j++)\n        {\n            mapp[i][j]=read();\n        }\n    }\n    BFS();\n    sort(friends+1,friends+fricnt);\n    printf(\"%d %d\",friends[1].x,friends[1].y);\n    return 0;\n}\n```\n\n就是在第91行……应该push`temppair1`结果当时push成`temppair`了……\n\n就导致我后面的题几乎没多少时间了……\n\n# T2 圆的国度\n\n## 题目\n\n#### 题目描述\n\n平面上有 n 个没有公共点 ． ． ． ． ． 的圆。你要从点(x1,y1)走到(x2,y2)。问你最少要经过多少圆 的边界。保证这两个点都不在圆的边界上。\n\n#### 输入格式\n\n问题输入： 第一行一个整数 n， 1<=n<=50。 接下来三行每行 n 个整数，分别表示 n 个圆的圆心和半径，格式如下： x1,x2,„,xi,„,xn y1,y2,„,yi,„,yn r1,r2,„,ri,„,rn -1000<=xi,yi<=1000,1<=ri<=1000 最后一行四个整数 X1,Y1,X2,Y2， -1000<=x1,y1,x2,y2<=1000。\n\n#### 输出格式\n\n问题输出： 一个整数，意义如上。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```cpp\n1\n0 \n0 \n2 \n-5 1 5 1\n```\n\n**输出 #1**\n\n```cpp\n0\n```\n\n**输入 #2**\n\n```cpp\n3\n0 -6 6\n0 1 6\n2 2 2\n-5 1 5 1\n```\n\n**输出 #2**\n\n```cpp\n1\n```\n\n## 分析\n\n这道题其实是很简单的……\n\n但是我当时把圆都当作了实心圆，“没有公共点”理解成了圆内部也不会有其他圆\n\n就导致我认为这个题答案只会有`0,1,2`。\n\n而样例恰恰没有违背我的理解，我的代码还过了样例……\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n    long long x = 0;\n    int f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch>'9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nvoid write(const int& x)\n{\n    if (!x)\n    {\n        putchar('0');\n        return;\n    }\n    char f[100];\n    int tmp = x;\n    if (tmp < 0)\n    {\n        tmp = -tmp;\n        putchar('-');\n    }\n    int s = 0;\n    while (tmp > 0)\n    {\n        f[s++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while (s > 0)\n    {\n        putchar(f[--s]);\n    }\n}\n\nint totN;\ndouble ax,ay,bx,by;\nstruct circle\n{\n    double x,y;\n    double r;\n    bool in[3];\n}circles[1009];\nint result;\n\nint main()\n{\n    totN=read();\n    for (int i = 1; i <= totN; ++i)\n    {\n        circles[i].x=read();\n    }\n    for (int i = 1; i <= totN; ++i)\n    {\n        circles[i].y=read();\n    }\n    for (int i = 1; i <= totN; ++i)\n    {\n        circles[i].r=read();\n    }\n    ax=read();\n    ay=read();\n    bx=read();\n    by=read();\n    for (int i = 1; i <= totN; ++i)\n    {\n        if (fabs(circles[i].x-ax+0.0)*fabs(circles[i].x-ax+0.0)+fabs(circles[i].y-ay+0.0)*fabs(circles[i].y-ay+0.0)<=circles[i].r*circles[i].r+0.0)\n        {\n            circles[i].in[1]=true;\n        }\n        if (fabs(circles[i].x-bx+0.0)*fabs(circles[i].x-bx+0.0)+fabs(circles[i].y-by+0.0)*fabs(circles[i].y-by+0.0)<=circles[i].r*circles[i].r+0.0)\n        {\n            circles[i].in[2]=true;\n        }\n    }\n    for (int i = 1; i <= totN; ++i)\n    {\n        result+=circles[i].in[1]^circles[i].in[2];\n    }\n    write(result);\n    return 0;\n}//LikiBlaze Code\n```\n\n如果圆之间可以包含的话，其实总体思路是一样的……只要有圆是一个点在但是另一个点不在，`result++`即可。\n\n# T3 阶乘之和\n\n## 题目\n\n#### 题目描述\n\n给定一个非负整数 n，请你判断 n 是否可以由一些非负整数的阶乘相加得到。\n\n#### 输入格式\n\n有若干组数据。每行一个整数 n，保证 n<1000000。 以负数结束输入。\n\n#### 输出格式\n\n对于每组数据输出一行，若可以则输出‘YES’，否则输出‘NO’。\n\n#### 输入输出样例\n\n**输入 #1**\n\n```cpp\n9 \n-1\n```\n\n**输出 #1**\n\n```cpp\nYES\n```\n\n## 分析\n\n这道题可以选择深搜，也可以选择01背包预处理。\n\n我考试的时候写的是深搜，然后后来写的是预处理。\n\n主要的错误其实和别人也是一样的，以为`0!=1`。\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n    long long x = 0;\n    int f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch>'9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nvoid write(const int& x)\n{\n    if (!x)\n    {\n        putchar('0');\n        return;\n    }\n    char f[100];\n    int tmp = x;\n    if (tmp < 0)\n    {\n        tmp = -tmp;\n        putchar('-');\n    }\n    int s = 0;\n    while (tmp > 0)\n    {\n        f[s++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while (s > 0)\n    {\n        putchar(f[--s]);\n    }\n}\n\nbool flag;\n\nconst int maxc=10;\nlong long jie[19]={1,1};\nbool used[19];\nbool able[1000090]={1};\n\nvoid cheng()\n{\n    for (int i = 2; i <= maxc; ++i)\n    {\n        jie[i] = jie[i - 1] * i;\n    }\n}\nvoid work()\n{\n    for (int j = 9; j >= 0; --j)\n    {\n        for (int i = 1000009-jie[j]; i >= 0; --i)\n        {\n            if (able[i])\n            {\n                able[i+jie[j]]=true;\n            }\n        }\n    }\n}\n\nint main()\n{\n    cheng();\n    work();\n    int temp;\n    temp=read();\n    while (temp>=0)\n    {\n        if (temp==0)\n        {\n            putchar('N');\n            putchar('O');\n            putchar('\\n');\n        }\n        else if (able[temp])\n        {\n            putchar('Y');\n            putchar('E');\n            putchar('S');\n            putchar('\\n');\n        }\n        else\n        {\n                putchar('N');\n                putchar('O');\n                putchar('\\n');\n        }\n        temp=read();\n    }\n    return 0;\n}//LikiBlaze Code\n```\n\n","slug":"2020-07-20测试","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2m10003pb0y1h7e2bw7","content":"<h1 id=\"T1-懒羊羊找朋友\"><a href=\"#T1-懒羊羊找朋友\" class=\"headerlink\" title=\"T1 懒羊羊找朋友\"></a>T1 懒羊羊找朋友</h1><h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>最近电视上热播“喜羊羊与灰太狼”，大家都说“做人要做懒羊羊”，为什么呢？因为他 不愿意多做一个动作、不愿意多动一个脑筋，甚至懒得张嘴吃饭，简直是懒的无与伦比！ 话说羊村的羊还真多啊！每周一早晨，羊村老村长慢羊羊同志学着人类的学校，把所有 羊列队在广场上进行思想教育，主要是保持警惕防止狼类的攻击，当然也包括对懒羊羊之类 的“异类”进行批评教育。 羊群列队成一个 m*n 的方阵，每只羊站在一个格子里，而且是长期固定的，便于点名啊：） 晕倒！当然，这样一来的好处是，大家都知道自己的朋友站在哪个位置，虽然它们可能互相 看不见，但心里都知道，并且在老村长进行无聊的训教时，大家都还想赶快结束赶快找离自 己最近的朋友交流周末的开心事呢？ 懒羊羊也想尽快找到自己的好朋友聊天，但是他既不愿意多走路、又不愿意动脑筋去想 怎么走，所以就请智羊羊同学帮它编个程序，以便快速定位找到离它最近的一位好朋友。 如果你是智羊羊，你怎么完成这个任务呢？</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>问题输入： 第 1 行为两个整数 m 和 n， 2&lt;=m,n&lt;=100。 第 2 行为懒羊羊的位置 x,y，表示在第 x 行 y 列。 以下 m 行为一个 m*n 的数字方阵， 所有 a[i,j]的值相等的表示是好朋友， 1&lt;=a[i,j]&lt;=100。 每行的两个数之间都有一个空格分隔。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>问题输出： 输出一行两个数 x1,y1，表示懒羊羊最近的一个朋友的位置在第 x1 行 y1 列，之间用一 个空格隔开。 如果最近的的朋友不只一个，则输出 x1 最小的，如果还不唯一则输出 y1 最小的。 数据保证懒羊羊一定有朋友。</p>\n<h4 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题很明显是一个极其裸的广搜题。</p>\n<p>可是我竟然因为太长时间没做广搜的题导致忘记了广搜怎么写……</p>\n<p>不过我还是根据自己对于广搜的理解写出了正确的广搜代码。</p>\n<p>但是还是不对……对广搜的极度不自信导致我一直在检查我的广搜……</p>\n<p>考试的时候调试了将近两个小时，后来又调试了很长时间也没有调试出来。</p>\n<p>最后发现竟然是变量名称写错了……</p>\n<p>应该是<code>temp1</code>结果写成<code>temp</code>了……</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> totN;</span><br><span class=\"line\"><span class=\"keyword\">int</span> totM;</span><br><span class=\"line\"><span class=\"keyword\">int</span> X,Y;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mapp[<span class=\"number\">109</span>][<span class=\"number\">109</span>];</span><br><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; &gt; Q;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dir[<span class=\"number\">4</span>][<span class=\"number\">2</span>]=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> step[<span class=\"number\">109</span>][<span class=\"number\">109</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">&#125;friends[<span class=\"number\">109</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fricnt=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">109</span>][<span class=\"number\">109</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mindis=<span class=\"number\">99999999</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(student aa,student bb)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aa.x&lt;bb.x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aa.x&gt;bb.x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aa.y&lt;bb.y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; temppair;</span><br><span class=\"line\">    temppair.first=X;</span><br><span class=\"line\">    temppair.second=Y;</span><br><span class=\"line\">    Q.push(temppair);</span><br><span class=\"line\">    vis[X][Y]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nowx=Q.front().first;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nowy=Q.front().second;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nowstep=step[Q.front().first][Q.front().second];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mapp[nowx][nowy]==mapp[X][Y]&amp;&amp;nowstep&lt;=mindis&amp;&amp;(nowx!=X||nowy!=Y))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mindis=nowstep;</span><br><span class=\"line\">            friends[fricnt].x=nowx;</span><br><span class=\"line\">            friends[fricnt].y=nowy;</span><br><span class=\"line\">            fricnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nowstep&gt;mindis+<span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; i : dir)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x=Q.front().first+i[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y=Q.front().second+i[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> astep=step[Q.front().first][Q.front().second];</span><br><span class=\"line\">            step[x][y]=astep+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x&lt;=totM&amp;&amp;y&lt;=totN&amp;&amp;!vis[x][y]&amp;&amp;x&gt;<span class=\"number\">0</span>&amp;&amp;y&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                vis[x][y]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; temppair1;</span><br><span class=\"line\">                temppair1.first=x;</span><br><span class=\"line\">                temppair1.second=y;</span><br><span class=\"line\">                Q.push(temppair1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Q.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;totM&gt;&gt;totN;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;X&gt;&gt;Y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=totM;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=totN;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mapp[i][j]=read();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BFS();</span><br><span class=\"line\">    sort(friends+<span class=\"number\">1</span>,friends+fricnt);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,friends[<span class=\"number\">1</span>].x,friends[<span class=\"number\">1</span>].y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就是在第91行……应该push<code>temppair1</code>结果当时push成<code>temppair</code>了……</p>\n<p>就导致我后面的题几乎没多少时间了……</p>\n<h1 id=\"T2-圆的国度\"><a href=\"#T2-圆的国度\" class=\"headerlink\" title=\"T2 圆的国度\"></a>T2 圆的国度</h1><h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>平面上有 n 个没有公共点 ． ． ． ． ． 的圆。你要从点(x1,y1)走到(x2,y2)。问你最少要经过多少圆 的边界。保证这两个点都不在圆的边界上。</p>\n<h4 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>问题输入： 第一行一个整数 n， 1&lt;=n&lt;=50。 接下来三行每行 n 个整数，分别表示 n 个圆的圆心和半径，格式如下： x1,x2,„,xi,„,xn y1,y2,„,yi,„,yn r1,r2,„,ri,„,rn -1000&lt;=xi,yi&lt;=1000,1&lt;=ri&lt;=1000 最后一行四个整数 X1,Y1,X2,Y2， -1000&lt;=x1,y1,x2,y2&lt;=1000。</p>\n<h4 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>问题输出： 一个整数，意义如上。</p>\n<h4 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">-5</span> <span class=\"number\">1</span> <span class=\"number\">5</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输入 #2</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">-6</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">2</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">-5</span> <span class=\"number\">1</span> <span class=\"number\">5</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #2</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题其实是很简单的……</p>\n<p>但是我当时把圆都当作了实心圆，“没有公共点”理解成了圆内部也不会有其他圆</p>\n<p>就导致我认为这个题答案只会有<code>0,1,2</code>。</p>\n<p>而样例恰恰没有违背我的理解，我的代码还过了样例……</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = -tmp;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> totN;</span><br><span class=\"line\"><span class=\"keyword\">double</span> ax,ay,bx,by;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">circle</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> r;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> in[<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;circles[<span class=\"number\">1009</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    totN=read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        circles[i].x=read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        circles[i].y=read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        circles[i].r=read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ax=read();</span><br><span class=\"line\">    ay=read();</span><br><span class=\"line\">    bx=read();</span><br><span class=\"line\">    by=read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(circles[i].x-ax+<span class=\"number\">0.0</span>)*<span class=\"built_in\">fabs</span>(circles[i].x-ax+<span class=\"number\">0.0</span>)+<span class=\"built_in\">fabs</span>(circles[i].y-ay+<span class=\"number\">0.0</span>)*<span class=\"built_in\">fabs</span>(circles[i].y-ay+<span class=\"number\">0.0</span>)&lt;=circles[i].r*circles[i].r+<span class=\"number\">0.0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            circles[i].in[<span class=\"number\">1</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(circles[i].x-bx+<span class=\"number\">0.0</span>)*<span class=\"built_in\">fabs</span>(circles[i].x-bx+<span class=\"number\">0.0</span>)+<span class=\"built_in\">fabs</span>(circles[i].y-by+<span class=\"number\">0.0</span>)*<span class=\"built_in\">fabs</span>(circles[i].y-by+<span class=\"number\">0.0</span>)&lt;=circles[i].r*circles[i].r+<span class=\"number\">0.0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            circles[i].in[<span class=\"number\">2</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result+=circles[i].in[<span class=\"number\">1</span>]^circles[i].in[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    write(result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n\n<p>如果圆之间可以包含的话，其实总体思路是一样的……只要有圆是一个点在但是另一个点不在，<code>result++</code>即可。</p>\n<h1 id=\"T3-阶乘之和\"><a href=\"#T3-阶乘之和\" class=\"headerlink\" title=\"T3 阶乘之和\"></a>T3 阶乘之和</h1><h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个非负整数 n，请你判断 n 是否可以由一些非负整数的阶乘相加得到。</p>\n<h4 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>有若干组数据。每行一个整数 n，保证 n&lt;1000000。 以负数结束输入。</p>\n<h4 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>对于每组数据输出一行，若可以则输出‘YES’，否则输出‘NO’。</p>\n<h4 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">9</span> </span><br><span class=\"line\"><span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题可以选择深搜，也可以选择01背包预处理。</p>\n<p>我考试的时候写的是深搜，然后后来写的是预处理。</p>\n<p>主要的错误其实和别人也是一样的，以为<code>0!=1</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = -tmp;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxc=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> jie[<span class=\"number\">19</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> used[<span class=\"number\">19</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> able[<span class=\"number\">1000090</span>]=&#123;<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cheng</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= maxc; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        jie[i] = jie[i - <span class=\"number\">1</span>] * i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">9</span>; j &gt;= <span class=\"number\">0</span>; --j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1000009</span>-jie[j]; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (able[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                able[i+jie[j]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cheng();</span><br><span class=\"line\">    work();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    temp=read();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (temp&gt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;N&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;O&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (able[temp])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;Y&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;E&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;S&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;N&#x27;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;O&#x27;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp=read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"T1-懒羊羊找朋友\"><a href=\"#T1-懒羊羊找朋友\" class=\"headerlink\" title=\"T1 懒羊羊找朋友\"></a>T1 懒羊羊找朋友</h1><h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>最近电视上热播“喜羊羊与灰太狼”，大家都说“做人要做懒羊羊”，为什么呢？因为他 不愿意多做一个动作、不愿意多动一个脑筋，甚至懒得张嘴吃饭，简直是懒的无与伦比！ 话说羊村的羊还真多啊！每周一早晨，羊村老村长慢羊羊同志学着人类的学校，把所有 羊列队在广场上进行思想教育，主要是保持警惕防止狼类的攻击，当然也包括对懒羊羊之类 的“异类”进行批评教育。 羊群列队成一个 m*n 的方阵，每只羊站在一个格子里，而且是长期固定的，便于点名啊：） 晕倒！当然，这样一来的好处是，大家都知道自己的朋友站在哪个位置，虽然它们可能互相 看不见，但心里都知道，并且在老村长进行无聊的训教时，大家都还想赶快结束赶快找离自 己最近的朋友交流周末的开心事呢？ 懒羊羊也想尽快找到自己的好朋友聊天，但是他既不愿意多走路、又不愿意动脑筋去想 怎么走，所以就请智羊羊同学帮它编个程序，以便快速定位找到离它最近的一位好朋友。 如果你是智羊羊，你怎么完成这个任务呢？</p>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>问题输入： 第 1 行为两个整数 m 和 n， 2&lt;=m,n&lt;=100。 第 2 行为懒羊羊的位置 x,y，表示在第 x 行 y 列。 以下 m 行为一个 m*n 的数字方阵， 所有 a[i,j]的值相等的表示是好朋友， 1&lt;=a[i,j]&lt;=100。 每行的两个数之间都有一个空格分隔。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>问题输出： 输出一行两个数 x1,y1，表示懒羊羊最近的一个朋友的位置在第 x1 行 y1 列，之间用一 个空格隔开。 如果最近的的朋友不只一个，则输出 x1 最小的，如果还不唯一则输出 y1 最小的。 数据保证懒羊羊一定有朋友。</p>\n<h4 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题很明显是一个极其裸的广搜题。</p>\n<p>可是我竟然因为太长时间没做广搜的题导致忘记了广搜怎么写……</p>\n<p>不过我还是根据自己对于广搜的理解写出了正确的广搜代码。</p>\n<p>但是还是不对……对广搜的极度不自信导致我一直在检查我的广搜……</p>\n<p>考试的时候调试了将近两个小时，后来又调试了很长时间也没有调试出来。</p>\n<p>最后发现竟然是变量名称写错了……</p>\n<p>应该是<code>temp1</code>结果写成<code>temp</code>了……</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> totN;</span><br><span class=\"line\"><span class=\"keyword\">int</span> totM;</span><br><span class=\"line\"><span class=\"keyword\">int</span> X,Y;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mapp[<span class=\"number\">109</span>][<span class=\"number\">109</span>];</span><br><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; &gt; Q;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dir[<span class=\"number\">4</span>][<span class=\"number\">2</span>]=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> step[<span class=\"number\">109</span>][<span class=\"number\">109</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">&#125;friends[<span class=\"number\">109</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fricnt=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">109</span>][<span class=\"number\">109</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mindis=<span class=\"number\">99999999</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(student aa,student bb)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aa.x&lt;bb.x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aa.x&gt;bb.x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aa.y&lt;bb.y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; temppair;</span><br><span class=\"line\">    temppair.first=X;</span><br><span class=\"line\">    temppair.second=Y;</span><br><span class=\"line\">    Q.push(temppair);</span><br><span class=\"line\">    vis[X][Y]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nowx=Q.front().first;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nowy=Q.front().second;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nowstep=step[Q.front().first][Q.front().second];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mapp[nowx][nowy]==mapp[X][Y]&amp;&amp;nowstep&lt;=mindis&amp;&amp;(nowx!=X||nowy!=Y))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mindis=nowstep;</span><br><span class=\"line\">            friends[fricnt].x=nowx;</span><br><span class=\"line\">            friends[fricnt].y=nowy;</span><br><span class=\"line\">            fricnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nowstep&gt;mindis+<span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; i : dir)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x=Q.front().first+i[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y=Q.front().second+i[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> astep=step[Q.front().first][Q.front().second];</span><br><span class=\"line\">            step[x][y]=astep+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x&lt;=totM&amp;&amp;y&lt;=totN&amp;&amp;!vis[x][y]&amp;&amp;x&gt;<span class=\"number\">0</span>&amp;&amp;y&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                vis[x][y]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; temppair1;</span><br><span class=\"line\">                temppair1.first=x;</span><br><span class=\"line\">                temppair1.second=y;</span><br><span class=\"line\">                Q.push(temppair1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Q.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;totM&gt;&gt;totN;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;X&gt;&gt;Y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=totM;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=totN;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mapp[i][j]=read();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BFS();</span><br><span class=\"line\">    sort(friends+<span class=\"number\">1</span>,friends+fricnt);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,friends[<span class=\"number\">1</span>].x,friends[<span class=\"number\">1</span>].y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就是在第91行……应该push<code>temppair1</code>结果当时push成<code>temppair</code>了……</p>\n<p>就导致我后面的题几乎没多少时间了……</p>\n<h1 id=\"T2-圆的国度\"><a href=\"#T2-圆的国度\" class=\"headerlink\" title=\"T2 圆的国度\"></a>T2 圆的国度</h1><h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>平面上有 n 个没有公共点 ． ． ． ． ． 的圆。你要从点(x1,y1)走到(x2,y2)。问你最少要经过多少圆 的边界。保证这两个点都不在圆的边界上。</p>\n<h4 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>问题输入： 第一行一个整数 n， 1&lt;=n&lt;=50。 接下来三行每行 n 个整数，分别表示 n 个圆的圆心和半径，格式如下： x1,x2,„,xi,„,xn y1,y2,„,yi,„,yn r1,r2,„,ri,„,rn -1000&lt;=xi,yi&lt;=1000,1&lt;=ri&lt;=1000 最后一行四个整数 X1,Y1,X2,Y2， -1000&lt;=x1,y1,x2,y2&lt;=1000。</p>\n<h4 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>问题输出： 一个整数，意义如上。</p>\n<h4 id=\"输入输出样例-1\"><a href=\"#输入输出样例-1\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">-5</span> <span class=\"number\">1</span> <span class=\"number\">5</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输入 #2</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">-6</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">2</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">-5</span> <span class=\"number\">1</span> <span class=\"number\">5</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #2</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题其实是很简单的……</p>\n<p>但是我当时把圆都当作了实心圆，“没有公共点”理解成了圆内部也不会有其他圆</p>\n<p>就导致我认为这个题答案只会有<code>0,1,2</code>。</p>\n<p>而样例恰恰没有违背我的理解，我的代码还过了样例……</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = -tmp;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> totN;</span><br><span class=\"line\"><span class=\"keyword\">double</span> ax,ay,bx,by;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">circle</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> r;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> in[<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;circles[<span class=\"number\">1009</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    totN=read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        circles[i].x=read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        circles[i].y=read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        circles[i].r=read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ax=read();</span><br><span class=\"line\">    ay=read();</span><br><span class=\"line\">    bx=read();</span><br><span class=\"line\">    by=read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(circles[i].x-ax+<span class=\"number\">0.0</span>)*<span class=\"built_in\">fabs</span>(circles[i].x-ax+<span class=\"number\">0.0</span>)+<span class=\"built_in\">fabs</span>(circles[i].y-ay+<span class=\"number\">0.0</span>)*<span class=\"built_in\">fabs</span>(circles[i].y-ay+<span class=\"number\">0.0</span>)&lt;=circles[i].r*circles[i].r+<span class=\"number\">0.0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            circles[i].in[<span class=\"number\">1</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(circles[i].x-bx+<span class=\"number\">0.0</span>)*<span class=\"built_in\">fabs</span>(circles[i].x-bx+<span class=\"number\">0.0</span>)+<span class=\"built_in\">fabs</span>(circles[i].y-by+<span class=\"number\">0.0</span>)*<span class=\"built_in\">fabs</span>(circles[i].y-by+<span class=\"number\">0.0</span>)&lt;=circles[i].r*circles[i].r+<span class=\"number\">0.0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            circles[i].in[<span class=\"number\">2</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result+=circles[i].in[<span class=\"number\">1</span>]^circles[i].in[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    write(result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n\n<p>如果圆之间可以包含的话，其实总体思路是一样的……只要有圆是一个点在但是另一个点不在，<code>result++</code>即可。</p>\n<h1 id=\"T3-阶乘之和\"><a href=\"#T3-阶乘之和\" class=\"headerlink\" title=\"T3 阶乘之和\"></a>T3 阶乘之和</h1><h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个非负整数 n，请你判断 n 是否可以由一些非负整数的阶乘相加得到。</p>\n<h4 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>有若干组数据。每行一个整数 n，保证 n&lt;1000000。 以负数结束输入。</p>\n<h4 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>对于每组数据输出一行，若可以则输出‘YES’，否则输出‘NO’。</p>\n<h4 id=\"输入输出样例-2\"><a href=\"#输入输出样例-2\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><p><strong>输入 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">9</span> </span><br><span class=\"line\"><span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这道题可以选择深搜，也可以选择01背包预处理。</p>\n<p>我考试的时候写的是深搜，然后后来写的是预处理。</p>\n<p>主要的错误其实和别人也是一样的，以为<code>0!=1</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = -tmp;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxc=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> jie[<span class=\"number\">19</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> used[<span class=\"number\">19</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> able[<span class=\"number\">1000090</span>]=&#123;<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cheng</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= maxc; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        jie[i] = jie[i - <span class=\"number\">1</span>] * i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">9</span>; j &gt;= <span class=\"number\">0</span>; --j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1000009</span>-jie[j]; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (able[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                able[i+jie[j]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cheng();</span><br><span class=\"line\">    work();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    temp=read();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (temp&gt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;N&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;O&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (able[temp])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;Y&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;E&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;S&#x27;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;N&#x27;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;O&#x27;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp=read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"2020年3月8日NOIP课程知识整理","date":"2020-03-08T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://acg.xydwz.cn/api/api.php","_content":"一、高精度计算\n\n这一次课程主要讲了高精度加、减、乘。\n\n首先，定义一个高精度的结构体，储存这个数字的长度、和这个数字本身。\n\n```cpp\nstruct gaojing\n{\n    int n,z[2333];\n\n    gaojing()\n    {\n        n=1;\n        memset(z,0,sizeof(z));\n    }\n    \n    void init()\n    {\n        scanf(\"%s\",s+1);\n        int l=strlen(s+1);\n        reverse(s+1,s+l+1);\n\n        n = l;\n        for (int a=1;a<=n;a++)\n            z[a] = s[a]-'0';\n    }\n\n    void print()\n    {\n        for (int a=n;a>=1;a--)\n            printf(\"%d\",z[a]);\n    }\n};\n```\n\n1、高精度加法\n\n只需要将数字当做字符串读入，在一位一位地相加，考虑进位即可。\n\n这里还需要注意的一点是，我们在写高精计算函数时，参数最好要读取地址，而不是直接读取字符串。这样如果这个字符串很大，参数进入时还要把这个很大的字符串复制一遍，既消耗时间，又消耗内存。\n\n```cpp\ngaojing operator+(const gaojing &a,const gaojing &b)\n{\n    gaojing c;\n    c.n = max(a.n,b.n);\n    for (int i=1;i<=c.n;i++)\n        c.z[i] = a.z[i] + b.z[i];\n    for (int i=1;i<=c.n;i++)\n    {\n        c.z[i+1] += c.z[i]/10;\n        c.z[i] = c.z[i]%10;\n    }\n    if (c.z[c.n+1] != 0) c.n++;\n    return c;\n}\n```\n\n2、高精度比较\n\n```cpp\nbool operator<(const gaojing &a,const gaojing &b)\n{\n    if (a.n!=b.n) return a.n<b.n;\n    for (int i=a.n;i>=1;i--)\n        if (a.z[i] != b.z[i]) return a.z[i]<b.z[i];\n    return false;\n}\n```\n\n3、高精度乘法\n\n首先，根据`十*十=百`,`十*百=千`,`千*万=千万`可得：\n\ni位*j位，结果要加到i+j-1位上。\n\n最后，和高精度加法还有区别的一点是，这个要去除前导零。\n\n```cpp\ngaojing operator*(const gaojing &a,const gaojing &b)\n{\n    gaojing c;\n    c.n = a.n + b.n;\n    for (int i=1;i<=a.n;i++)\n        for (int j=1;j<=b.n;j++)\n            c.z[i+j-1] += a.z[i] * b.z[j];\n    for (int i=1;i<=c.n;i++)\n    {\n        c.z[i+1] += c.z[i]/10;\n        c.z[i] = c.z[i]%10;\n    }\n    while (c.n != 1 && c.z[c.n] == 0)\n        c.n--;\n    return c;\n}\n```\n\n4、高精度减法\n\n其实思想和高精度加法差不多，只不过要判断正负（用刚才写的比较函数判断即可）。\n\n代码就不再写了。\n\n二、求最大公约数、最小公倍数。\n\n可以用自带函数求最大公约数：\n\n```cpp\n__gcd(a,b)；\n```\n\n推荐使用手写最大公因数：\n\n```cpp\nint gcd(int a,int b)\n{\n    if (b==0) return a;\n    else return gcd(b,a%b);\n}\n```\n\n最小公倍数的话，根据两个数相乘等于他们的gcd*lcm即可求得。\n\n三、快速幂：\n\n首先，快速幂的目的就是做到快速求幂，假设我们要求a^b^,按照朴素算法就是把a连乘b次，这样一来时间复杂度是O(b)也即是O(n)级别，快速幂能做到O(logn)，快了好多好多。它的原理如下：\n\n　　假设我们要求a^b^，那么其实b是可以拆成二进制的，该二进制数第i位的权为2^(i-1)^，例如当b=11时，$$a^{11}=a^{(2^{0}+2^{1}+2^{3})}$$\n\n11的二进制是1011，11 = 2³×1 + 2²×0 + 2¹×1 + 2º×1，因此，我们将a¹¹转化为算 $$a^{(2^{0})}*a^{(2^{1})}*a^{(2^{3})}$$，看出来快的多了吧原来算11次，现在算三次，但是这三项貌似不好求的样子....不急，下面会有详细解释。\n\n　　由于是二进制，很自然地想到用位运算这个强大的工具： &  和 >> ，&运算通常用于二进制取位操作，例如一个数 & 1 的结果就是取二进制的最末位。还可以判断奇偶x&1=0为偶，x&1=1为奇。>>运算比较单纯,二进制去掉最后一位\n\n```cpp\nint ksm(int x,int y,int p)\n{\n    int ans=1;\n    while (y)\n    {\n        if (y&1) ans=1ll*ans*x%p;\n        x=1ll*x*x%p;\n        y>>=1;\n    }\n    return ans;\n}\n```\n\n代码很短，死记也可行，但最好还是理解一下吧，其实也很好理解，以b==11为例，b=>1011,二进制从右向左算，但乘出来的顺序是 a^(2^0) * a^(2^1)  * a^(2^3)，是从左向右的。我们不断的让base*=base目的即是累乘，以便随时对ans做出贡献。\n\n　　其中要理解`base*=base`这一步，看`base*base`=base^2^,下一步再乘，就是base^2^*base^2^=base^4^,然后同理  base^4^ * base^4^ = base^8^ ,,,,, see?是不是做到了base-->base^2^-->base^4^-->base^8^-->base^16^-->base^32^.......指数正是 2^i^ 啊，再看上面的例子，$$a^{(2^{0})}*a^{(2^{1})}*a^{(2^{3})}$$，这三项是不是完美解决了，，嗯，快速幂就是这样。\n\n四、矩阵内容\n\n（这一部分我已经写过了，这里不再赘述）\n","source":"_posts/2020年3月8日NOIP课程知识整理.md","raw":"---\ntitle: 2020年3月8日NOIP课程知识整理\ndate: 2020-03-09\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://acg.xydwz.cn/api/api.php   \ntags: \n    - 算法概述\n    - 数论\n---\n一、高精度计算\n\n这一次课程主要讲了高精度加、减、乘。\n\n首先，定义一个高精度的结构体，储存这个数字的长度、和这个数字本身。\n\n```cpp\nstruct gaojing\n{\n    int n,z[2333];\n\n    gaojing()\n    {\n        n=1;\n        memset(z,0,sizeof(z));\n    }\n    \n    void init()\n    {\n        scanf(\"%s\",s+1);\n        int l=strlen(s+1);\n        reverse(s+1,s+l+1);\n\n        n = l;\n        for (int a=1;a<=n;a++)\n            z[a] = s[a]-'0';\n    }\n\n    void print()\n    {\n        for (int a=n;a>=1;a--)\n            printf(\"%d\",z[a]);\n    }\n};\n```\n\n1、高精度加法\n\n只需要将数字当做字符串读入，在一位一位地相加，考虑进位即可。\n\n这里还需要注意的一点是，我们在写高精计算函数时，参数最好要读取地址，而不是直接读取字符串。这样如果这个字符串很大，参数进入时还要把这个很大的字符串复制一遍，既消耗时间，又消耗内存。\n\n```cpp\ngaojing operator+(const gaojing &a,const gaojing &b)\n{\n    gaojing c;\n    c.n = max(a.n,b.n);\n    for (int i=1;i<=c.n;i++)\n        c.z[i] = a.z[i] + b.z[i];\n    for (int i=1;i<=c.n;i++)\n    {\n        c.z[i+1] += c.z[i]/10;\n        c.z[i] = c.z[i]%10;\n    }\n    if (c.z[c.n+1] != 0) c.n++;\n    return c;\n}\n```\n\n2、高精度比较\n\n```cpp\nbool operator<(const gaojing &a,const gaojing &b)\n{\n    if (a.n!=b.n) return a.n<b.n;\n    for (int i=a.n;i>=1;i--)\n        if (a.z[i] != b.z[i]) return a.z[i]<b.z[i];\n    return false;\n}\n```\n\n3、高精度乘法\n\n首先，根据`十*十=百`,`十*百=千`,`千*万=千万`可得：\n\ni位*j位，结果要加到i+j-1位上。\n\n最后，和高精度加法还有区别的一点是，这个要去除前导零。\n\n```cpp\ngaojing operator*(const gaojing &a,const gaojing &b)\n{\n    gaojing c;\n    c.n = a.n + b.n;\n    for (int i=1;i<=a.n;i++)\n        for (int j=1;j<=b.n;j++)\n            c.z[i+j-1] += a.z[i] * b.z[j];\n    for (int i=1;i<=c.n;i++)\n    {\n        c.z[i+1] += c.z[i]/10;\n        c.z[i] = c.z[i]%10;\n    }\n    while (c.n != 1 && c.z[c.n] == 0)\n        c.n--;\n    return c;\n}\n```\n\n4、高精度减法\n\n其实思想和高精度加法差不多，只不过要判断正负（用刚才写的比较函数判断即可）。\n\n代码就不再写了。\n\n二、求最大公约数、最小公倍数。\n\n可以用自带函数求最大公约数：\n\n```cpp\n__gcd(a,b)；\n```\n\n推荐使用手写最大公因数：\n\n```cpp\nint gcd(int a,int b)\n{\n    if (b==0) return a;\n    else return gcd(b,a%b);\n}\n```\n\n最小公倍数的话，根据两个数相乘等于他们的gcd*lcm即可求得。\n\n三、快速幂：\n\n首先，快速幂的目的就是做到快速求幂，假设我们要求a^b^,按照朴素算法就是把a连乘b次，这样一来时间复杂度是O(b)也即是O(n)级别，快速幂能做到O(logn)，快了好多好多。它的原理如下：\n\n　　假设我们要求a^b^，那么其实b是可以拆成二进制的，该二进制数第i位的权为2^(i-1)^，例如当b=11时，$$a^{11}=a^{(2^{0}+2^{1}+2^{3})}$$\n\n11的二进制是1011，11 = 2³×1 + 2²×0 + 2¹×1 + 2º×1，因此，我们将a¹¹转化为算 $$a^{(2^{0})}*a^{(2^{1})}*a^{(2^{3})}$$，看出来快的多了吧原来算11次，现在算三次，但是这三项貌似不好求的样子....不急，下面会有详细解释。\n\n　　由于是二进制，很自然地想到用位运算这个强大的工具： &  和 >> ，&运算通常用于二进制取位操作，例如一个数 & 1 的结果就是取二进制的最末位。还可以判断奇偶x&1=0为偶，x&1=1为奇。>>运算比较单纯,二进制去掉最后一位\n\n```cpp\nint ksm(int x,int y,int p)\n{\n    int ans=1;\n    while (y)\n    {\n        if (y&1) ans=1ll*ans*x%p;\n        x=1ll*x*x%p;\n        y>>=1;\n    }\n    return ans;\n}\n```\n\n代码很短，死记也可行，但最好还是理解一下吧，其实也很好理解，以b==11为例，b=>1011,二进制从右向左算，但乘出来的顺序是 a^(2^0) * a^(2^1)  * a^(2^3)，是从左向右的。我们不断的让base*=base目的即是累乘，以便随时对ans做出贡献。\n\n　　其中要理解`base*=base`这一步，看`base*base`=base^2^,下一步再乘，就是base^2^*base^2^=base^4^,然后同理  base^4^ * base^4^ = base^8^ ,,,,, see?是不是做到了base-->base^2^-->base^4^-->base^8^-->base^16^-->base^32^.......指数正是 2^i^ 啊，再看上面的例子，$$a^{(2^{0})}*a^{(2^{1})}*a^{(2^{3})}$$，这三项是不是完美解决了，，嗯，快速幂就是这样。\n\n四、矩阵内容\n\n（这一部分我已经写过了，这里不再赘述）\n","slug":"2020年3月8日NOIP课程知识整理","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2m40006pb0yf269bk3k","content":"<p>一、高精度计算</p>\n<p>这一次课程主要讲了高精度加、减、乘。</p>\n<p>首先，定义一个高精度的结构体，储存这个数字的长度、和这个数字本身。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gaojing</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,z[<span class=\"number\">2333</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    gaojing()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(z,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(z));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l=<span class=\"built_in\">strlen</span>(s+<span class=\"number\">1</span>);</span><br><span class=\"line\">        reverse(s+<span class=\"number\">1</span>,s+l+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        n = l;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a=<span class=\"number\">1</span>;a&lt;=n;a++)</span><br><span class=\"line\">            z[a] = s[a]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a=n;a&gt;=<span class=\"number\">1</span>;a--)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,z[a]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>1、高精度加法</p>\n<p>只需要将数字当做字符串读入，在一位一位地相加，考虑进位即可。</p>\n<p>这里还需要注意的一点是，我们在写高精计算函数时，参数最好要读取地址，而不是直接读取字符串。这样如果这个字符串很大，参数进入时还要把这个很大的字符串复制一遍，既消耗时间，又消耗内存。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gaojing <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> gaojing &amp;a,<span class=\"keyword\">const</span> gaojing &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gaojing c;</span><br><span class=\"line\">    c.n = max(a.n,b.n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=c.n;i++)</span><br><span class=\"line\">        c.z[i] = a.z[i] + b.z[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=c.n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.z[i+<span class=\"number\">1</span>] += c.z[i]/<span class=\"number\">10</span>;</span><br><span class=\"line\">        c.z[i] = c.z[i]%<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c.z[c.n+<span class=\"number\">1</span>] != <span class=\"number\">0</span>) c.n++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、高精度比较</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> gaojing &amp;a,<span class=\"keyword\">const</span> gaojing &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.n!=b.n) <span class=\"keyword\">return</span> a.n&lt;b.n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=a.n;i&gt;=<span class=\"number\">1</span>;i--)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a.z[i] != b.z[i]) <span class=\"keyword\">return</span> a.z[i]&lt;b.z[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、高精度乘法</p>\n<p>首先，根据<code>十*十=百</code>,<code>十*百=千</code>,<code>千*万=千万</code>可得：</p>\n<p>i位*j位，结果要加到i+j-1位上。</p>\n<p>最后，和高精度加法还有区别的一点是，这个要去除前导零。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gaojing <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> gaojing &amp;a,<span class=\"keyword\">const</span> gaojing &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gaojing c;</span><br><span class=\"line\">    c.n = a.n + b.n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=a.n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=b.n;j++)</span><br><span class=\"line\">            c.z[i+j<span class=\"number\">-1</span>] += a.z[i] * b.z[j];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=c.n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.z[i+<span class=\"number\">1</span>] += c.z[i]/<span class=\"number\">10</span>;</span><br><span class=\"line\">        c.z[i] = c.z[i]%<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c.n != <span class=\"number\">1</span> &amp;&amp; c.z[c.n] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        c.n--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、高精度减法</p>\n<p>其实思想和高精度加法差不多，只不过要判断正负（用刚才写的比较函数判断即可）。</p>\n<p>代码就不再写了。</p>\n<p>二、求最大公约数、最小公倍数。</p>\n<p>可以用自带函数求最大公约数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__gcd(a,b)；</span><br></pre></td></tr></table></figure>\n\n<p>推荐使用手写最大公因数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> gcd(b,a%b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最小公倍数的话，根据两个数相乘等于他们的gcd*lcm即可求得。</p>\n<p>三、快速幂：</p>\n<p>首先，快速幂的目的就是做到快速求幂，假设我们要求a^b^,按照朴素算法就是把a连乘b次，这样一来时间复杂度是O(b)也即是O(n)级别，快速幂能做到O(logn)，快了好多好多。它的原理如下：</p>\n<p>　　假设我们要求a^b^，那么其实b是可以拆成二进制的，该二进制数第i位的权为2^(i-1)^，例如当b=11时，$$a^{11}=a^{(2^{0}+2^{1}+2^{3})}$$</p>\n<p>11的二进制是1011，11 = 2³×1 + 2²×0 + 2¹×1 + 2º×1，因此，我们将a¹¹转化为算 $$a^{(2^{0})}<em>a^{(2^{1})}</em>a^{(2^{3})}$$，看出来快的多了吧原来算11次，现在算三次，但是这三项貌似不好求的样子….不急，下面会有详细解释。</p>\n<p>　　由于是二进制，很自然地想到用位运算这个强大的工具： &amp;  和 &gt;&gt; ，&amp;运算通常用于二进制取位操作，例如一个数 &amp; 1 的结果就是取二进制的最末位。还可以判断奇偶x&amp;1=0为偶，x&amp;1=1为奇。&gt;&gt;运算比较单纯,二进制去掉最后一位</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ksm</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y&amp;<span class=\"number\">1</span>) ans=<span class=\"number\">1ll</span>*ans*x%p;</span><br><span class=\"line\">        x=<span class=\"number\">1ll</span>*x*x%p;</span><br><span class=\"line\">        y&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码很短，死记也可行，但最好还是理解一下吧，其实也很好理解，以b==11为例，b=&gt;1011,二进制从右向左算，但乘出来的顺序是 a^(2^0) * a^(2^1)  * a^(2^3)，是从左向右的。我们不断的让base*=base目的即是累乘，以便随时对ans做出贡献。</p>\n<p>　　其中要理解<code>base*=base</code>这一步，看<code>base*base</code>=base^2^,下一步再乘，就是base^2^<em>base^2^=base^4^,然后同理  base^4^ * base^4^ = base^8^ ,,,,, see?是不是做到了base–&gt;base^2^–&gt;base^4^–&gt;base^8^–&gt;base^16^–&gt;base^32^…….指数正是 2^i^ 啊，再看上面的例子，$$a^{(2^{0})}</em>a^{(2^{1})}*a^{(2^{3})}$$，这三项是不是完美解决了，，嗯，快速幂就是这样。</p>\n<p>四、矩阵内容</p>\n<p>（这一部分我已经写过了，这里不再赘述）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一、高精度计算</p>\n<p>这一次课程主要讲了高精度加、减、乘。</p>\n<p>首先，定义一个高精度的结构体，储存这个数字的长度、和这个数字本身。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gaojing</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,z[<span class=\"number\">2333</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    gaojing()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(z,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(z));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l=<span class=\"built_in\">strlen</span>(s+<span class=\"number\">1</span>);</span><br><span class=\"line\">        reverse(s+<span class=\"number\">1</span>,s+l+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        n = l;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a=<span class=\"number\">1</span>;a&lt;=n;a++)</span><br><span class=\"line\">            z[a] = s[a]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a=n;a&gt;=<span class=\"number\">1</span>;a--)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,z[a]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>1、高精度加法</p>\n<p>只需要将数字当做字符串读入，在一位一位地相加，考虑进位即可。</p>\n<p>这里还需要注意的一点是，我们在写高精计算函数时，参数最好要读取地址，而不是直接读取字符串。这样如果这个字符串很大，参数进入时还要把这个很大的字符串复制一遍，既消耗时间，又消耗内存。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gaojing <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> gaojing &amp;a,<span class=\"keyword\">const</span> gaojing &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gaojing c;</span><br><span class=\"line\">    c.n = max(a.n,b.n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=c.n;i++)</span><br><span class=\"line\">        c.z[i] = a.z[i] + b.z[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=c.n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.z[i+<span class=\"number\">1</span>] += c.z[i]/<span class=\"number\">10</span>;</span><br><span class=\"line\">        c.z[i] = c.z[i]%<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c.z[c.n+<span class=\"number\">1</span>] != <span class=\"number\">0</span>) c.n++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、高精度比较</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> gaojing &amp;a,<span class=\"keyword\">const</span> gaojing &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.n!=b.n) <span class=\"keyword\">return</span> a.n&lt;b.n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=a.n;i&gt;=<span class=\"number\">1</span>;i--)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a.z[i] != b.z[i]) <span class=\"keyword\">return</span> a.z[i]&lt;b.z[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、高精度乘法</p>\n<p>首先，根据<code>十*十=百</code>,<code>十*百=千</code>,<code>千*万=千万</code>可得：</p>\n<p>i位*j位，结果要加到i+j-1位上。</p>\n<p>最后，和高精度加法还有区别的一点是，这个要去除前导零。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gaojing <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> gaojing &amp;a,<span class=\"keyword\">const</span> gaojing &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gaojing c;</span><br><span class=\"line\">    c.n = a.n + b.n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=a.n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=b.n;j++)</span><br><span class=\"line\">            c.z[i+j<span class=\"number\">-1</span>] += a.z[i] * b.z[j];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=c.n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.z[i+<span class=\"number\">1</span>] += c.z[i]/<span class=\"number\">10</span>;</span><br><span class=\"line\">        c.z[i] = c.z[i]%<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c.n != <span class=\"number\">1</span> &amp;&amp; c.z[c.n] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        c.n--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、高精度减法</p>\n<p>其实思想和高精度加法差不多，只不过要判断正负（用刚才写的比较函数判断即可）。</p>\n<p>代码就不再写了。</p>\n<p>二、求最大公约数、最小公倍数。</p>\n<p>可以用自带函数求最大公约数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__gcd(a,b)；</span><br></pre></td></tr></table></figure>\n\n<p>推荐使用手写最大公因数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> gcd(b,a%b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最小公倍数的话，根据两个数相乘等于他们的gcd*lcm即可求得。</p>\n<p>三、快速幂：</p>\n<p>首先，快速幂的目的就是做到快速求幂，假设我们要求a^b^,按照朴素算法就是把a连乘b次，这样一来时间复杂度是O(b)也即是O(n)级别，快速幂能做到O(logn)，快了好多好多。它的原理如下：</p>\n<p>　　假设我们要求a^b^，那么其实b是可以拆成二进制的，该二进制数第i位的权为2^(i-1)^，例如当b=11时，$$a^{11}=a^{(2^{0}+2^{1}+2^{3})}$$</p>\n<p>11的二进制是1011，11 = 2³×1 + 2²×0 + 2¹×1 + 2º×1，因此，我们将a¹¹转化为算 $$a^{(2^{0})}<em>a^{(2^{1})}</em>a^{(2^{3})}$$，看出来快的多了吧原来算11次，现在算三次，但是这三项貌似不好求的样子….不急，下面会有详细解释。</p>\n<p>　　由于是二进制，很自然地想到用位运算这个强大的工具： &amp;  和 &gt;&gt; ，&amp;运算通常用于二进制取位操作，例如一个数 &amp; 1 的结果就是取二进制的最末位。还可以判断奇偶x&amp;1=0为偶，x&amp;1=1为奇。&gt;&gt;运算比较单纯,二进制去掉最后一位</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ksm</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y&amp;<span class=\"number\">1</span>) ans=<span class=\"number\">1ll</span>*ans*x%p;</span><br><span class=\"line\">        x=<span class=\"number\">1ll</span>*x*x%p;</span><br><span class=\"line\">        y&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码很短，死记也可行，但最好还是理解一下吧，其实也很好理解，以b==11为例，b=&gt;1011,二进制从右向左算，但乘出来的顺序是 a^(2^0) * a^(2^1)  * a^(2^3)，是从左向右的。我们不断的让base*=base目的即是累乘，以便随时对ans做出贡献。</p>\n<p>　　其中要理解<code>base*=base</code>这一步，看<code>base*base</code>=base^2^,下一步再乘，就是base^2^<em>base^2^=base^4^,然后同理  base^4^ * base^4^ = base^8^ ,,,,, see?是不是做到了base–&gt;base^2^–&gt;base^4^–&gt;base^8^–&gt;base^16^–&gt;base^32^…….指数正是 2^i^ 啊，再看上面的例子，$$a^{(2^{0})}</em>a^{(2^{1})}*a^{(2^{3})}$$，这三项是不是完美解决了，，嗯，快速幂就是这样。</p>\n<p>四、矩阵内容</p>\n<p>（这一部分我已经写过了，这里不再赘述）</p>\n"},{"title":"2021Planners","date":"2021-01-03T08:24:01.000Z","description":"2021年度计划(?)","top_img":"https://api.r10086.com/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F2.php","cover":"https://tvax1.sinaimg.cn/large/0072Vf1pgy1foxlo7focpj31hc0u0ndu.jpg","_content":"<h2>（？）</h2>\n\n嗯……2020没了呀……<br>\n他没了<br/>\n针不戳<br>\n2020没了针不戳<br/>\n随随便便浑浑噩噩颓颓废废就是一年针不戳<br>\n又又能能叠叠词词恶恶心心针针不不戳戳<br>\n\n<h2>2020</h2>\n\n2020年的话……就是我学OI的第一年了吧……\n从一个冬天学到一个冬天\n从一场很大的雪学到另一场很大的雪了……\n正好一年\n就参加了一次CSP，一次NOIP\n都是省二\n没什么用\n当是熟悉了一下考试环境吧……\n就学了一些基础算法\n也没什么高深的\n没准备过省选呢\n<h2>2021</h2>\n今年的话……<br>\n其实<a herf=\"https://www.luogu.com.cn/user/65363\">一扶苏一</a>爷给我们提过一些建议了<br>\n大概就是这样一个顺序：<br>\n\n- 数据结构\n- DP\n- 图论\n- 字符串\n- 数论\n\n因为数据结构好多都是后面算法的基础，必须先学完才能在学后面的算法。所以扶苏爷就让我们先学数据结构。\n所以现在主要就在学数据结构。<br/>\n弄了好几种平衡树结果发现好像还是替罪羊树最好理解，也最好理解。<br/>\n（其实感觉好多字符串都跟数据结构混杂在一起，既是字符串的内容，又是数据结构，也不知道是算字符串还是算数据结构<br/>\n扶苏说数论最后再学是因为数论这东西一般学了也做不出题来……所以可以放一放<br/>\n但是我感觉DP其实也很难做出来……<br/>\n所以我就想DP和数论都最后再学<br/>\n然后最近就是先学数据结构和图论吧<br/>\n看书的话……<br/>\n现在没看的书也不少了，就一本本看呗<br/>\n每本书就是按照前面那个学习的顺序看<br/>","source":"_posts/2021Planners.md","raw":"---\ntitle: 2021Planners\ndate: 2021-01-03 16:24:01\ntags:\n    - 非技术\ncategories: 非技术文章\ndescription: 2021年度计划(?)\ntop_img: https://api.r10086.com/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F2.php\ncover: https://tvax1.sinaimg.cn/large/0072Vf1pgy1foxlo7focpj31hc0u0ndu.jpg\n---\n<h2>（？）</h2>\n\n嗯……2020没了呀……<br>\n他没了<br/>\n针不戳<br>\n2020没了针不戳<br/>\n随随便便浑浑噩噩颓颓废废就是一年针不戳<br>\n又又能能叠叠词词恶恶心心针针不不戳戳<br>\n\n<h2>2020</h2>\n\n2020年的话……就是我学OI的第一年了吧……\n从一个冬天学到一个冬天\n从一场很大的雪学到另一场很大的雪了……\n正好一年\n就参加了一次CSP，一次NOIP\n都是省二\n没什么用\n当是熟悉了一下考试环境吧……\n就学了一些基础算法\n也没什么高深的\n没准备过省选呢\n<h2>2021</h2>\n今年的话……<br>\n其实<a herf=\"https://www.luogu.com.cn/user/65363\">一扶苏一</a>爷给我们提过一些建议了<br>\n大概就是这样一个顺序：<br>\n\n- 数据结构\n- DP\n- 图论\n- 字符串\n- 数论\n\n因为数据结构好多都是后面算法的基础，必须先学完才能在学后面的算法。所以扶苏爷就让我们先学数据结构。\n所以现在主要就在学数据结构。<br/>\n弄了好几种平衡树结果发现好像还是替罪羊树最好理解，也最好理解。<br/>\n（其实感觉好多字符串都跟数据结构混杂在一起，既是字符串的内容，又是数据结构，也不知道是算字符串还是算数据结构<br/>\n扶苏说数论最后再学是因为数论这东西一般学了也做不出题来……所以可以放一放<br/>\n但是我感觉DP其实也很难做出来……<br/>\n所以我就想DP和数论都最后再学<br/>\n然后最近就是先学数据结构和图论吧<br/>\n看书的话……<br/>\n现在没看的书也不少了，就一本本看呗<br/>\n每本书就是按照前面那个学习的顺序看<br/>","slug":"2021Planners","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2m60009pb0y4nold3ea","content":"<h2>（？）</h2>\n\n<p>嗯……2020没了呀……<br><br>他没了<br/><br>针不戳<br><br>2020没了针不戳<br/><br>随随便便浑浑噩噩颓颓废废就是一年针不戳<br><br>又又能能叠叠词词恶恶心心针针不不戳戳<br></p>\n<h2>2020</h2>\n\n<p>2020年的话……就是我学OI的第一年了吧……<br>从一个冬天学到一个冬天<br>从一场很大的雪学到另一场很大的雪了……<br>正好一年<br>就参加了一次CSP，一次NOIP<br>都是省二<br>没什么用<br>当是熟悉了一下考试环境吧……<br>就学了一些基础算法<br>也没什么高深的<br>没准备过省选呢</p>\n<h2>2021</h2>\n今年的话……<br>\n其实<a herf=\"https://www.luogu.com.cn/user/65363\">一扶苏一</a>爷给我们提过一些建议了<br>\n大概就是这样一个顺序：<br>\n\n<ul>\n<li>数据结构</li>\n<li>DP</li>\n<li>图论</li>\n<li>字符串</li>\n<li>数论</li>\n</ul>\n<p>因为数据结构好多都是后面算法的基础，必须先学完才能在学后面的算法。所以扶苏爷就让我们先学数据结构。<br>所以现在主要就在学数据结构。<br/><br>弄了好几种平衡树结果发现好像还是替罪羊树最好理解，也最好理解。<br/><br>（其实感觉好多字符串都跟数据结构混杂在一起，既是字符串的内容，又是数据结构，也不知道是算字符串还是算数据结构<br/><br>扶苏说数论最后再学是因为数论这东西一般学了也做不出题来……所以可以放一放<br/><br>但是我感觉DP其实也很难做出来……<br/><br>所以我就想DP和数论都最后再学<br/><br>然后最近就是先学数据结构和图论吧<br/><br>看书的话……<br/><br>现在没看的书也不少了，就一本本看呗<br/><br>每本书就是按照前面那个学习的顺序看<br/></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>（？）</h2>\n\n<p>嗯……2020没了呀……<br><br>他没了<br/><br>针不戳<br><br>2020没了针不戳<br/><br>随随便便浑浑噩噩颓颓废废就是一年针不戳<br><br>又又能能叠叠词词恶恶心心针针不不戳戳<br></p>\n<h2>2020</h2>\n\n<p>2020年的话……就是我学OI的第一年了吧……<br>从一个冬天学到一个冬天<br>从一场很大的雪学到另一场很大的雪了……<br>正好一年<br>就参加了一次CSP，一次NOIP<br>都是省二<br>没什么用<br>当是熟悉了一下考试环境吧……<br>就学了一些基础算法<br>也没什么高深的<br>没准备过省选呢</p>\n<h2>2021</h2>\n今年的话……<br>\n其实<a herf=\"https://www.luogu.com.cn/user/65363\">一扶苏一</a>爷给我们提过一些建议了<br>\n大概就是这样一个顺序：<br>\n\n<ul>\n<li>数据结构</li>\n<li>DP</li>\n<li>图论</li>\n<li>字符串</li>\n<li>数论</li>\n</ul>\n<p>因为数据结构好多都是后面算法的基础，必须先学完才能在学后面的算法。所以扶苏爷就让我们先学数据结构。<br>所以现在主要就在学数据结构。<br/><br>弄了好几种平衡树结果发现好像还是替罪羊树最好理解，也最好理解。<br/><br>（其实感觉好多字符串都跟数据结构混杂在一起，既是字符串的内容，又是数据结构，也不知道是算字符串还是算数据结构<br/><br>扶苏说数论最后再学是因为数论这东西一般学了也做不出题来……所以可以放一放<br/><br>但是我感觉DP其实也很难做出来……<br/><br>所以我就想DP和数论都最后再学<br/><br>然后最近就是先学数据结构和图论吧<br/><br>看书的话……<br/><br>现在没看的书也不少了，就一本本看呗<br/><br>每本书就是按照前面那个学习的顺序看<br/></p>\n"},{"title":"57级返校测试-T3-成绩单","date":"2020-05-16T16:00:00.000Z","top_img":"https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture","cover":"https://tvax1.sinaimg.cn/large/0072Vf1pgy1foxkjjz8vbj31hc0u0k80.jpg","_content":"# 题目：\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202005/1924270-20200517171801823-1454752520.png\" alt=\"\" />\n\n## 题目背景\n\n今天大家返校参加考试，本来信心满满以为能拿400分自己再提交一下试试吧！\n\n## 题目描述\n\n又考试了，这次考试的人数特别多，每个人的学号很特别，是用字符串表示的（不超过 30 位），每次考试结束后，成绩统计是一件很重要的事情。 老师们都很关心学生的成绩，于是他们把学生的成绩按学号排列(字典顺序，学号全为 小写字母，从小到大排列)（不排成绩），并统计各个分数，及分数段的人数，以及满分人员 （满分要奖励 XXX 奖学金的）。\n\n## 输入格式\n\n第一行：一个数 n （n<=130000 人）。 以下 n 行：每行两个信息，分别为学号，分数（1~150 分）\n\n## 输出格式\n\n第一行：各个分数段（空格隔开）（例如 1~10 11~20（见例样，不包括 150 分 的人数）。 第二行：各个分数段的人数（空格隔开，没有则输出 0）。 \n\n接下来的 n 行，分别为 n 个学生的学号，成绩，（空格隔开）。 再接下来的一行为满分的人的人数 x（如果没有则为 0）（保证 x 不超过 10000）。 \n\n接下来的 x 行为满分人的学号（如果 x 为 0 则为一行No）（按字典序从小到大排序）。\n\n 注意：一行若有多个数据，每一个数据之间用空格隔开，最后一个数据后不允许有空格。 分数段中没有 0 分和 150 分的。\n\n## 说明\n\n恩，这个是我们一道测试题。本来信心满满感觉挺简单，能AC的，结果直接爆零\n\n结果最后就是一个字符串比较的问题\n\n研究一阵子才发现可以直接用大于小于号\n\n## 代码\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<string.h>\n#include<cstring>\n\nusing namespace std;\n\nstruct stu\n{\n    string xh;\n    int fs;\n}student[150000];\nint jiance=1;\nbool cmp(stu a,stu b)\n{\n    return a.xh<b.xh;\n    /*\n    for(int i=1;i<=min(a.xh.length(),b.xh.length());i++)\n    {\n        if(a.xh[i]>b.xh[i])\n        {\n            return 1;\n        }\n        if(a.xh[i]<b.xh[i])\n        {\n            return 0;\n        }\n    }\n    if(strcmp(a.xh.c_str(),b.xh.c_str())>0)\n    {\n        return 0;\n    }\n    else\n    {\n        return 1;\n    }\n    */\n    //以上这一部分就是我那时候写的字符串比较还试了好几种反正总之就是莫名不对\n    //后来才学到原来字符串也可以直接用大于小于号\n    //这道题主要就是学习到这个吧 \n}\n\nint fsd[20];\nint flag11=0;\n\nint main()\n{\n    int n;\n    int x=0;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>student[i].xh>>student[i].fs;\n        if(student[i].fs==150)\n        {\n            x++;\n        }\n        fsd[student[i].fs/10+1]++;\n    }\n    cout<<\"1~9 10~19 20~29 30~39 40~49 50~59 60~69 70~79 80~89 90~99 100~109 110~119 120~129 130~139 140~149\";\n    cout<<endl;\n    for(int i=1;i<16;i++)\n    {\n        cout<<fsd[i]<<\" \";\n    }\n    cout<<endl;\n    \n    sort(student,student+n+1,cmp);\n    for(int j=1;j<=n;j++)\n    {\n        cout<<student[j].xh<<\" \"<<student[j].fs<<endl;\n    }\n    cout<<x<<endl;\n    for(int fbk=1;fbk<=n;fbk++)\n    {\n        if(student[fbk].fs==150)\n        {\n            cout<<student[fbk].xh<<endl;\n            flag11=1;\n        }\n    }\n    if(!flag11)\n    {\n        cout<<\"No\";\n    }\n    return 0;\n}\n```\n\n恩\n","source":"_posts/57级返校测试-T3-成绩单.md","raw":"---\ntitle: 57级返校测试-T3-成绩单\ndate: 2020-05-17\ntop_img: https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture\ncover: https://tvax1.sinaimg.cn/large/0072Vf1pgy1foxkjjz8vbj31hc0u0k80.jpg\ntags: \n    - 字符串\n    - 排序\n    - 校内考试\n---\n# 题目：\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202005/1924270-20200517171801823-1454752520.png\" alt=\"\" />\n\n## 题目背景\n\n今天大家返校参加考试，本来信心满满以为能拿400分自己再提交一下试试吧！\n\n## 题目描述\n\n又考试了，这次考试的人数特别多，每个人的学号很特别，是用字符串表示的（不超过 30 位），每次考试结束后，成绩统计是一件很重要的事情。 老师们都很关心学生的成绩，于是他们把学生的成绩按学号排列(字典顺序，学号全为 小写字母，从小到大排列)（不排成绩），并统计各个分数，及分数段的人数，以及满分人员 （满分要奖励 XXX 奖学金的）。\n\n## 输入格式\n\n第一行：一个数 n （n<=130000 人）。 以下 n 行：每行两个信息，分别为学号，分数（1~150 分）\n\n## 输出格式\n\n第一行：各个分数段（空格隔开）（例如 1~10 11~20（见例样，不包括 150 分 的人数）。 第二行：各个分数段的人数（空格隔开，没有则输出 0）。 \n\n接下来的 n 行，分别为 n 个学生的学号，成绩，（空格隔开）。 再接下来的一行为满分的人的人数 x（如果没有则为 0）（保证 x 不超过 10000）。 \n\n接下来的 x 行为满分人的学号（如果 x 为 0 则为一行No）（按字典序从小到大排序）。\n\n 注意：一行若有多个数据，每一个数据之间用空格隔开，最后一个数据后不允许有空格。 分数段中没有 0 分和 150 分的。\n\n## 说明\n\n恩，这个是我们一道测试题。本来信心满满感觉挺简单，能AC的，结果直接爆零\n\n结果最后就是一个字符串比较的问题\n\n研究一阵子才发现可以直接用大于小于号\n\n## 代码\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<string.h>\n#include<cstring>\n\nusing namespace std;\n\nstruct stu\n{\n    string xh;\n    int fs;\n}student[150000];\nint jiance=1;\nbool cmp(stu a,stu b)\n{\n    return a.xh<b.xh;\n    /*\n    for(int i=1;i<=min(a.xh.length(),b.xh.length());i++)\n    {\n        if(a.xh[i]>b.xh[i])\n        {\n            return 1;\n        }\n        if(a.xh[i]<b.xh[i])\n        {\n            return 0;\n        }\n    }\n    if(strcmp(a.xh.c_str(),b.xh.c_str())>0)\n    {\n        return 0;\n    }\n    else\n    {\n        return 1;\n    }\n    */\n    //以上这一部分就是我那时候写的字符串比较还试了好几种反正总之就是莫名不对\n    //后来才学到原来字符串也可以直接用大于小于号\n    //这道题主要就是学习到这个吧 \n}\n\nint fsd[20];\nint flag11=0;\n\nint main()\n{\n    int n;\n    int x=0;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>student[i].xh>>student[i].fs;\n        if(student[i].fs==150)\n        {\n            x++;\n        }\n        fsd[student[i].fs/10+1]++;\n    }\n    cout<<\"1~9 10~19 20~29 30~39 40~49 50~59 60~69 70~79 80~89 90~99 100~109 110~119 120~129 130~139 140~149\";\n    cout<<endl;\n    for(int i=1;i<16;i++)\n    {\n        cout<<fsd[i]<<\" \";\n    }\n    cout<<endl;\n    \n    sort(student,student+n+1,cmp);\n    for(int j=1;j<=n;j++)\n    {\n        cout<<student[j].xh<<\" \"<<student[j].fs<<endl;\n    }\n    cout<<x<<endl;\n    for(int fbk=1;fbk<=n;fbk++)\n    {\n        if(student[fbk].fs==150)\n        {\n            cout<<student[fbk].xh<<endl;\n            flag11=1;\n        }\n    }\n    if(!flag11)\n    {\n        cout<<\"No\";\n    }\n    return 0;\n}\n```\n\n恩\n","slug":"57级返校测试-T3-成绩单","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2m8000bpb0y2hfz8ibd","content":"<h1 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h1><img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/blog/1924270/202005/1924270-20200517171801823-1454752520.png\" alt=\"\" />\n\n<h2 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h2><p>今天大家返校参加考试，本来信心满满以为能拿400分自己再提交一下试试吧！</p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>又考试了，这次考试的人数特别多，每个人的学号很特别，是用字符串表示的（不超过 30 位），每次考试结束后，成绩统计是一件很重要的事情。 老师们都很关心学生的成绩，于是他们把学生的成绩按学号排列(字典顺序，学号全为 小写字母，从小到大排列)（不排成绩），并统计各个分数，及分数段的人数，以及满分人员 （满分要奖励 XXX 奖学金的）。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行：一个数 n （n&lt;=130000 人）。 以下 n 行：每行两个信息，分别为学号，分数（1~150 分）</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>第一行：各个分数段（空格隔开）（例如 1<del>10 11</del>20（见例样，不包括 150 分 的人数）。 第二行：各个分数段的人数（空格隔开，没有则输出 0）。 </p>\n<p>接下来的 n 行，分别为 n 个学生的学号，成绩，（空格隔开）。 再接下来的一行为满分的人的人数 x（如果没有则为 0）（保证 x 不超过 10000）。 </p>\n<p>接下来的 x 行为满分人的学号（如果 x 为 0 则为一行No）（按字典序从小到大排序）。</p>\n<p> 注意：一行若有多个数据，每一个数据之间用空格隔开，最后一个数据后不允许有空格。 分数段中没有 0 分和 150 分的。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>恩，这个是我们一道测试题。本来信心满满感觉挺简单，能AC的，结果直接爆零</p>\n<p>结果最后就是一个字符串比较的问题</p>\n<p>研究一阵子才发现可以直接用大于小于号</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stu</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> xh;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fs;</span><br><span class=\"line\">&#125;student[<span class=\"number\">150000</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> jiance=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(stu a,stu b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.xh&lt;b.xh;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    for(int i=1;i&lt;=min(a.xh.length(),b.xh.length());i++)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        if(a.xh[i]&gt;b.xh[i])</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            return 1;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        if(a.xh[i]&lt;b.xh[i])</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            return 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    if(strcmp(a.xh.c_str(),b.xh.c_str())&gt;0)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return 0;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    else</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return 1;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"comment\">//以上这一部分就是我那时候写的字符串比较还试了好几种反正总之就是莫名不对</span></span><br><span class=\"line\">    <span class=\"comment\">//后来才学到原来字符串也可以直接用大于小于号</span></span><br><span class=\"line\">    <span class=\"comment\">//这道题主要就是学习到这个吧 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> fsd[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> flag11=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;student[i].xh&gt;&gt;student[i].fs;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student[i].fs==<span class=\"number\">150</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fsd[student[i].fs/<span class=\"number\">10</span>+<span class=\"number\">1</span>]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;1~9 10~19 20~29 30~39 40~49 50~59 60~69 70~79 80~89 90~99 100~109 110~119 120~129 130~139 140~149&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">16</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;fsd[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    sort(student,student+n+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;student[j].xh&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;student[j].fs&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;x&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> fbk=<span class=\"number\">1</span>;fbk&lt;=n;fbk++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student[fbk].fs==<span class=\"number\">150</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;student[fbk].xh&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            flag11=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!flag11)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;No&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>恩</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h1><img src=\"https://img2020.cnblogs.com/blog/1924270/202005/1924270-20200517171801823-1454752520.png\" alt=\"\" />\n\n<h2 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h2><p>今天大家返校参加考试，本来信心满满以为能拿400分自己再提交一下试试吧！</p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>又考试了，这次考试的人数特别多，每个人的学号很特别，是用字符串表示的（不超过 30 位），每次考试结束后，成绩统计是一件很重要的事情。 老师们都很关心学生的成绩，于是他们把学生的成绩按学号排列(字典顺序，学号全为 小写字母，从小到大排列)（不排成绩），并统计各个分数，及分数段的人数，以及满分人员 （满分要奖励 XXX 奖学金的）。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行：一个数 n （n&lt;=130000 人）。 以下 n 行：每行两个信息，分别为学号，分数（1~150 分）</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>第一行：各个分数段（空格隔开）（例如 1<del>10 11</del>20（见例样，不包括 150 分 的人数）。 第二行：各个分数段的人数（空格隔开，没有则输出 0）。 </p>\n<p>接下来的 n 行，分别为 n 个学生的学号，成绩，（空格隔开）。 再接下来的一行为满分的人的人数 x（如果没有则为 0）（保证 x 不超过 10000）。 </p>\n<p>接下来的 x 行为满分人的学号（如果 x 为 0 则为一行No）（按字典序从小到大排序）。</p>\n<p> 注意：一行若有多个数据，每一个数据之间用空格隔开，最后一个数据后不允许有空格。 分数段中没有 0 分和 150 分的。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>恩，这个是我们一道测试题。本来信心满满感觉挺简单，能AC的，结果直接爆零</p>\n<p>结果最后就是一个字符串比较的问题</p>\n<p>研究一阵子才发现可以直接用大于小于号</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stu</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> xh;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fs;</span><br><span class=\"line\">&#125;student[<span class=\"number\">150000</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> jiance=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(stu a,stu b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.xh&lt;b.xh;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    for(int i=1;i&lt;=min(a.xh.length(),b.xh.length());i++)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        if(a.xh[i]&gt;b.xh[i])</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            return 1;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        if(a.xh[i]&lt;b.xh[i])</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            return 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    if(strcmp(a.xh.c_str(),b.xh.c_str())&gt;0)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return 0;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    else</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return 1;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"comment\">//以上这一部分就是我那时候写的字符串比较还试了好几种反正总之就是莫名不对</span></span><br><span class=\"line\">    <span class=\"comment\">//后来才学到原来字符串也可以直接用大于小于号</span></span><br><span class=\"line\">    <span class=\"comment\">//这道题主要就是学习到这个吧 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> fsd[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> flag11=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;student[i].xh&gt;&gt;student[i].fs;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student[i].fs==<span class=\"number\">150</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fsd[student[i].fs/<span class=\"number\">10</span>+<span class=\"number\">1</span>]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;1~9 10~19 20~29 30~39 40~49 50~59 60~69 70~79 80~89 90~99 100~109 110~119 120~129 130~139 140~149&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">16</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;fsd[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    sort(student,student+n+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;student[j].xh&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;student[j].fs&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;x&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> fbk=<span class=\"number\">1</span>;fbk&lt;=n;fbk++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student[fbk].fs==<span class=\"number\">150</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;student[fbk].xh&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            flag11=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!flag11)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;No&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>恩</p>\n"},{"title":"关于我","date":"2020-07-10T16:00:00.000Z","updated":"2020-07-10T16:00:00.000Z","keywords":"About","description":"关于我的简介。","top_img":"https://s1.ax1x.com/2020/07/11/UQkhFA.jpg","cover":"https://s1.ax1x.com/2020/07/11/UQk6sO.jpg","_content":"\n## 简介\n\n我是山东的一名OIer。（极其蒟\n\n目前高一，距离AFO还远。\n\n所以近期是不会停更的。$$rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++}}}}}}}}}}}}}}}_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++}}}}}}}}}}}}}}}$$\n\n\n\n","source":"_posts/About.md","raw":"---\ntitle: 关于我\ndate: 2020-07-11\nupdated: 2020-07-11\ntags: About\ncategories: 关于\nkeywords: About\ndescription: 关于我的简介。\ntop_img: https://s1.ax1x.com/2020/07/11/UQkhFA.jpg\ncover: https://s1.ax1x.com/2020/07/11/UQk6sO.jpg\n---\n\n## 简介\n\n我是山东的一名OIer。（极其蒟\n\n目前高一，距离AFO还远。\n\n所以近期是不会停更的。$$rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++}}}}}}}}}}}}}}}_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++_{rp++}}}}}}}}}}}}}}}$$\n\n\n\n","slug":"About","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2ma000epb0yg70sdh2e","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>我是山东的一名OIer。（极其蒟</p>\n<p>目前高一，距离AFO还远。</p>\n<p>所以近期是不会停更的。$$rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++}}}}}}}}}}}}}}}<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++_{rp++}}}}}}}}}}}}}}}$$</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>我是山东的一名OIer。（极其蒟</p>\n<p>目前高一，距离AFO还远。</p>\n<p>所以近期是不会停更的。$$rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++}}}}}}}}}}}}}}}<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++_{rp++}}}}}}}}}}}}}}}$$</p>\n"},{"title":"CSP2020游记","date":"2020-11-08T08:29:00.000Z","updated":"2021-02-24T00:52:00.000Z","description":"CSP2020爆零全过程超详细全解！","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://foxex.coding.net/p/picbed/d/PicBed/git/raw/master/pics//e5aaf01c833d0f026a3fca3c6c060b1607d38b7d3446c03c400e724b15f221d9.jpg","_content":"\n## 前夜\n\n前一天晚上到的日照……到的时候大概三四点钟吧。到了之后先去山外看了看我的考场D303.考场真的牛逼，全部Win10，16G RAM，U是AMD的3400x。当时是真的激动，感觉明天打表木的问题了。\n\n晚上住的旅馆很不满意，进去一会就退房了。退房倒还顺利，马上给退了。又找了一家，价钱比刚才的便宜一半，但是条件不知道比刚才的好了多少。虽然又跑了5KM，但是感觉还是值了。大概住下的时候7：30了已经。颓了一阵子，打了个Dij板子一个多小时愣是没调出来，真的自闭了，感觉明天要凉凉。\n\n大概10:30就睡了。\n\n## 早\n\n几点起的记不清了。起来之后看一眼发现昨天的Dij数组开小了，改上数组接着就过了。发现其实第一次编译的时候就写的是对的……\n\n然后一上午都在看人家的经验总结，打了写快读，对拍之类的，顺便搞了个天秀对拍，（这里不能放视频，我就不放了）\n\n## 入场\n\n恩……终于该入场了。\n\n进昨天那个让我激动不已的考场，结果监考员说考场机器全都打不开了……就到了A501……\n\n备用考场，条件可想而知。4代i3,4G RAM……\n\n算了，也就这样吧。\n\n## T1\n\n这个题是真的阴间……一开始读了一会题，决定放弃了。先去打T2.\n\nT2打完之后回来，剩下的3个小时都在打这个了……\n\n打到最后，小样例都有没过的，更别说大洋例了，估计是零分。\n\n代码倒是有了近400行，if套了10多层\n\n不应该用那么多时间打大模拟的\n\n可是已经无法挽回了\n\n## T2\n\n这个题倒还算阳间，大概花了40分钟。\n\n考试完发现忘记开ull，不过可能也丢不了几分（希望如此）\n\n## T3\n\n看起来暴力挺好打，有30分可以拿。\n\n但是打了一些发现这30分代码量也比较大，也放弃了。\n\n## T4\n\n读了一遍题，果断放弃了。\n\n静候成绩吧……（这几天是真**的非）","source":"_posts/CSP2020游记.md","raw":"---\ntitle: CSP2020游记\ndate: 2020-11-08 16:29:00\nupdated: \ntags: \t\n\t- CSP\n\t- 游记\ncategories: 游记\ndescription: CSP2020爆零全过程超详细全解！\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://foxex.coding.net/p/picbed/d/PicBed/git/raw/master/pics//e5aaf01c833d0f026a3fca3c6c060b1607d38b7d3446c03c400e724b15f221d9.jpg\n---\n\n## 前夜\n\n前一天晚上到的日照……到的时候大概三四点钟吧。到了之后先去山外看了看我的考场D303.考场真的牛逼，全部Win10，16G RAM，U是AMD的3400x。当时是真的激动，感觉明天打表木的问题了。\n\n晚上住的旅馆很不满意，进去一会就退房了。退房倒还顺利，马上给退了。又找了一家，价钱比刚才的便宜一半，但是条件不知道比刚才的好了多少。虽然又跑了5KM，但是感觉还是值了。大概住下的时候7：30了已经。颓了一阵子，打了个Dij板子一个多小时愣是没调出来，真的自闭了，感觉明天要凉凉。\n\n大概10:30就睡了。\n\n## 早\n\n几点起的记不清了。起来之后看一眼发现昨天的Dij数组开小了，改上数组接着就过了。发现其实第一次编译的时候就写的是对的……\n\n然后一上午都在看人家的经验总结，打了写快读，对拍之类的，顺便搞了个天秀对拍，（这里不能放视频，我就不放了）\n\n## 入场\n\n恩……终于该入场了。\n\n进昨天那个让我激动不已的考场，结果监考员说考场机器全都打不开了……就到了A501……\n\n备用考场，条件可想而知。4代i3,4G RAM……\n\n算了，也就这样吧。\n\n## T1\n\n这个题是真的阴间……一开始读了一会题，决定放弃了。先去打T2.\n\nT2打完之后回来，剩下的3个小时都在打这个了……\n\n打到最后，小样例都有没过的，更别说大洋例了，估计是零分。\n\n代码倒是有了近400行，if套了10多层\n\n不应该用那么多时间打大模拟的\n\n可是已经无法挽回了\n\n## T2\n\n这个题倒还算阳间，大概花了40分钟。\n\n考试完发现忘记开ull，不过可能也丢不了几分（希望如此）\n\n## T3\n\n看起来暴力挺好打，有30分可以拿。\n\n但是打了一些发现这30分代码量也比较大，也放弃了。\n\n## T4\n\n读了一遍题，果断放弃了。\n\n静候成绩吧……（这几天是真**的非）","slug":"CSP2020游记","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2mc000hpb0y1s5h3ooc","content":"<h2 id=\"前夜\"><a href=\"#前夜\" class=\"headerlink\" title=\"前夜\"></a>前夜</h2><p>前一天晚上到的日照……到的时候大概三四点钟吧。到了之后先去山外看了看我的考场D303.考场真的牛逼，全部Win10，16G RAM，U是AMD的3400x。当时是真的激动，感觉明天打表木的问题了。</p>\n<p>晚上住的旅馆很不满意，进去一会就退房了。退房倒还顺利，马上给退了。又找了一家，价钱比刚才的便宜一半，但是条件不知道比刚才的好了多少。虽然又跑了5KM，但是感觉还是值了。大概住下的时候7：30了已经。颓了一阵子，打了个Dij板子一个多小时愣是没调出来，真的自闭了，感觉明天要凉凉。</p>\n<p>大概10:30就睡了。</p>\n<h2 id=\"早\"><a href=\"#早\" class=\"headerlink\" title=\"早\"></a>早</h2><p>几点起的记不清了。起来之后看一眼发现昨天的Dij数组开小了，改上数组接着就过了。发现其实第一次编译的时候就写的是对的……</p>\n<p>然后一上午都在看人家的经验总结，打了写快读，对拍之类的，顺便搞了个天秀对拍，（这里不能放视频，我就不放了）</p>\n<h2 id=\"入场\"><a href=\"#入场\" class=\"headerlink\" title=\"入场\"></a>入场</h2><p>恩……终于该入场了。</p>\n<p>进昨天那个让我激动不已的考场，结果监考员说考场机器全都打不开了……就到了A501……</p>\n<p>备用考场，条件可想而知。4代i3,4G RAM……</p>\n<p>算了，也就这样吧。</p>\n<h2 id=\"T1\"><a href=\"#T1\" class=\"headerlink\" title=\"T1\"></a>T1</h2><p>这个题是真的阴间……一开始读了一会题，决定放弃了。先去打T2.</p>\n<p>T2打完之后回来，剩下的3个小时都在打这个了……</p>\n<p>打到最后，小样例都有没过的，更别说大洋例了，估计是零分。</p>\n<p>代码倒是有了近400行，if套了10多层</p>\n<p>不应该用那么多时间打大模拟的</p>\n<p>可是已经无法挽回了</p>\n<h2 id=\"T2\"><a href=\"#T2\" class=\"headerlink\" title=\"T2\"></a>T2</h2><p>这个题倒还算阳间，大概花了40分钟。</p>\n<p>考试完发现忘记开ull，不过可能也丢不了几分（希望如此）</p>\n<h2 id=\"T3\"><a href=\"#T3\" class=\"headerlink\" title=\"T3\"></a>T3</h2><p>看起来暴力挺好打，有30分可以拿。</p>\n<p>但是打了一些发现这30分代码量也比较大，也放弃了。</p>\n<h2 id=\"T4\"><a href=\"#T4\" class=\"headerlink\" title=\"T4\"></a>T4</h2><p>读了一遍题，果断放弃了。</p>\n<p>静候成绩吧……（这几天是真**的非）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前夜\"><a href=\"#前夜\" class=\"headerlink\" title=\"前夜\"></a>前夜</h2><p>前一天晚上到的日照……到的时候大概三四点钟吧。到了之后先去山外看了看我的考场D303.考场真的牛逼，全部Win10，16G RAM，U是AMD的3400x。当时是真的激动，感觉明天打表木的问题了。</p>\n<p>晚上住的旅馆很不满意，进去一会就退房了。退房倒还顺利，马上给退了。又找了一家，价钱比刚才的便宜一半，但是条件不知道比刚才的好了多少。虽然又跑了5KM，但是感觉还是值了。大概住下的时候7：30了已经。颓了一阵子，打了个Dij板子一个多小时愣是没调出来，真的自闭了，感觉明天要凉凉。</p>\n<p>大概10:30就睡了。</p>\n<h2 id=\"早\"><a href=\"#早\" class=\"headerlink\" title=\"早\"></a>早</h2><p>几点起的记不清了。起来之后看一眼发现昨天的Dij数组开小了，改上数组接着就过了。发现其实第一次编译的时候就写的是对的……</p>\n<p>然后一上午都在看人家的经验总结，打了写快读，对拍之类的，顺便搞了个天秀对拍，（这里不能放视频，我就不放了）</p>\n<h2 id=\"入场\"><a href=\"#入场\" class=\"headerlink\" title=\"入场\"></a>入场</h2><p>恩……终于该入场了。</p>\n<p>进昨天那个让我激动不已的考场，结果监考员说考场机器全都打不开了……就到了A501……</p>\n<p>备用考场，条件可想而知。4代i3,4G RAM……</p>\n<p>算了，也就这样吧。</p>\n<h2 id=\"T1\"><a href=\"#T1\" class=\"headerlink\" title=\"T1\"></a>T1</h2><p>这个题是真的阴间……一开始读了一会题，决定放弃了。先去打T2.</p>\n<p>T2打完之后回来，剩下的3个小时都在打这个了……</p>\n<p>打到最后，小样例都有没过的，更别说大洋例了，估计是零分。</p>\n<p>代码倒是有了近400行，if套了10多层</p>\n<p>不应该用那么多时间打大模拟的</p>\n<p>可是已经无法挽回了</p>\n<h2 id=\"T2\"><a href=\"#T2\" class=\"headerlink\" title=\"T2\"></a>T2</h2><p>这个题倒还算阳间，大概花了40分钟。</p>\n<p>考试完发现忘记开ull，不过可能也丢不了几分（希望如此）</p>\n<h2 id=\"T3\"><a href=\"#T3\" class=\"headerlink\" title=\"T3\"></a>T3</h2><p>看起来暴力挺好打，有30分可以拿。</p>\n<p>但是打了一些发现这30分代码量也比较大，也放弃了。</p>\n<h2 id=\"T4\"><a href=\"#T4\" class=\"headerlink\" title=\"T4\"></a>T4</h2><p>读了一遍题，果断放弃了。</p>\n<p>静候成绩吧……（这几天是真**的非）</p>\n"},{"title":"P1553数字反转（升级版)","date":"2020-01-29T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%884.php","_content":"## 题目描述\n\n给定一个数，请将该数各个位上数字反转得到一个新数。\n\n这次与NOIP2011普及组第一题不同的是：这个数可以是小数，分数，百分数，整数。整数反转是将所有数位对调；小数反转是把整数部分的数反转，再将小数部分的数反转，不交换整数部分与小数部分；分数反转是把分母的数反转，再把分子的数反转，不交换分子与分母；百分数的分子一定是整数，百分数只改变数字部分。整数新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零；小数新数的末尾不为0（除非小数部分除了0没有别的数，那么只保留1个0）；分数不约分，分子和分母都不是小数（约分滴童鞋抱歉了，不能过哦。输入数据保证分母不为0），本次没有负数。\n\n## 输入格式\n\n一个数s\n\n## 输出格式\n\n一个数，即s的反转数\n\n## 输入输出样例\n\n```\n5087462\n```\n\n```\n2647805\n```\n\n```\n600.084\n```\n\n```\n6.48\n```\n\n```\n700/27\n```\n\n```\n7/72\n```\n\n```\n8670%\n```\n\n```\n768%\n```\n\n## 说明/提示\n\n所有数据：\n\n25%`s`是整数，不大于20位\n\n25%`s`是小数，整数部分和小数部分均不大于10位\n\n25%`s`是分数，分子和分母均不大于10位\n\n25%`s`是百分数，分子不大于19位\n\n（20个数据）\n\n**首先，我们看到这个题，易分析出这个题有四个步骤：拆分，翻转，去零，输出。**\n\n**所以我们只要分开编出几个函数进行这几个操作即可。**\n\n**经过观察，易发现：小数的小数部分需要去除的是后部的零，而其他的需要去除的是前部的零。**\n\n**不多说了，直接上程序：（用的是对字符串的处理）（程序有点长，但思路非常简单易懂）**\n\n```cpp\n#include<bits/stdc++.h>\n#include <cstring> \nusing namespace std;\nstring qutou(string a)//作用：去除头部的零\n{\n    int len;\n    while(a[0]=='0'&&len!=1)//如果第一位还是零\n    {\n        len=a.size();\n        a=a.substr(1,len-1);//把除了第一位之外的部分向前移动一位，覆盖第一位的零\n    }\n    return a;\n}\nstring quwei(string a)//作用：去除头部的零\n{\n    int len=a.size();\n    while(a[len-1]=='0')//如果第一位还是零\n    {\n        a=a.substr(0,len-1 );//把除了最后一位之外的部分向后移动一位，覆盖最后一位的零\n        len--;\n    }\n    return a;\n}\nstring fanzhuan(string a)//作用：将数翻转\n{\n    int len=a.size();\n    string b;//创建一个临时字符串\"b\"\n    for(int i=len-1;i>=0;i--)//将a反向粘贴到b上\n    {\n        b+=a[i];\n    }\n    return b;//返回b\n}\nint main()\n{\n    string front,behind,total;//字符串front，behind分别用来储存小数和分数的前半部分和后半部分\n    getline(cin,total);\n    int len=total.size(),n=0,form=0;\n    for(int i=0;;i++)//遍历字符串\n    {\n        if(total[i]!='/'&&total[i]!='%'&&total[i]!='.')//如果当前位置不是特殊字符\n        {\n            front+=total[i];//将这个字符储存进front中\n        }\n        if(total[i]=='/')//如果是'/'，说明分子已经读入结束\n        {\n            form=1;//记录下这个数是分数\n            n=i+1;\n            break;//结束读取分子\n        }\n        if(total[i]=='%')//如果是'%'，说明百分数已经读入结束\n        {\n            form=2;//记录下这个数是百分数\n            break;//结束读取\n        }\n        if(total[i]=='.')//如果是'.'，说明整数部分已经读入结束\n        {\n            form=3;//记录下这个数是小数\n            n=i+1;\n            break;//结束读取整数部分\n        }\n        if(i==len-1)//如果一直读取到了最后一位还没有特殊符号\n        {\n            form=4;//记录下这个数是整数\n            break;//结束读取\n        }\n    }\n    if(form==1||form==3)//如果是分数或小数\n    {\n        for(int j=n;j<=len-1;j++)//读取分母（或小数部分）\n        {\n            behind+=total[j];\n        }\n        behind=fanzhuan(behind);//翻转后部\n    }\n    front=fanzhuan(front);//翻转前部\n    front=qutou(front);//对前部进行去除头部的零\n    if(form==1)//如果是分数\n    {\n        behind=qutou(behind);//对后部进行去除头部的零\n        if(front==\"\\0\")//如果前部去头之后什么也不剩，说明前部是零\n        {\n            cout<<\"0/\"<<behind;\n        }\n        else\n        {\n            cout<<front<<\"/\"<<behind;//输出\n        }\n    }\n    if(form==2)//如果是百分数\n    {\n        front=qutou(front);\n        if(front==\"\\0\")//如果前部去头之后什么也不剩，说明前部是零\n        {\n            cout<<\"0%\";\n        }\n        else\n        {\n            cout<<front<<\"%\";//输出\n        }\n    }\n    if(form==3)//如果是分数\n    {\n        behind=quwei(behind);//对后部进行去除尾部的零\n        if(behind==\"\\0\")\n        {\n            if(front==\"\\0\")//如果前部去头之后什么也不剩，说明前部是零\n            {\n                front=\"0\";\n            }\n            cout<<front<<\".0\";\n        }\n        else\n        {\n            cout<<front<<\".\"<<behind;//输出\n        }\n    }\n    if(form==4)//如果是整数\n    {\n        front=qutou(front);\n        if(front==\"\\0\")//如果前部去头之后什么也不剩，说明前部是零\n        {\n            cout<<\"0\";\n        }\n        else\n        {\n            cout<<front;//输出\n        }\n    }\n    return 0;\n}\n```\n","source":"_posts/P1553数字反转（升级版).md","raw":"---\ntitle: P1553数字反转（升级版)\ndate: 2020-01-30\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%884.php   \ntags: \n    - C++一本通题库\n    - 数论\n    - 字符串\n---\n## 题目描述\n\n给定一个数，请将该数各个位上数字反转得到一个新数。\n\n这次与NOIP2011普及组第一题不同的是：这个数可以是小数，分数，百分数，整数。整数反转是将所有数位对调；小数反转是把整数部分的数反转，再将小数部分的数反转，不交换整数部分与小数部分；分数反转是把分母的数反转，再把分子的数反转，不交换分子与分母；百分数的分子一定是整数，百分数只改变数字部分。整数新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零；小数新数的末尾不为0（除非小数部分除了0没有别的数，那么只保留1个0）；分数不约分，分子和分母都不是小数（约分滴童鞋抱歉了，不能过哦。输入数据保证分母不为0），本次没有负数。\n\n## 输入格式\n\n一个数s\n\n## 输出格式\n\n一个数，即s的反转数\n\n## 输入输出样例\n\n```\n5087462\n```\n\n```\n2647805\n```\n\n```\n600.084\n```\n\n```\n6.48\n```\n\n```\n700/27\n```\n\n```\n7/72\n```\n\n```\n8670%\n```\n\n```\n768%\n```\n\n## 说明/提示\n\n所有数据：\n\n25%`s`是整数，不大于20位\n\n25%`s`是小数，整数部分和小数部分均不大于10位\n\n25%`s`是分数，分子和分母均不大于10位\n\n25%`s`是百分数，分子不大于19位\n\n（20个数据）\n\n**首先，我们看到这个题，易分析出这个题有四个步骤：拆分，翻转，去零，输出。**\n\n**所以我们只要分开编出几个函数进行这几个操作即可。**\n\n**经过观察，易发现：小数的小数部分需要去除的是后部的零，而其他的需要去除的是前部的零。**\n\n**不多说了，直接上程序：（用的是对字符串的处理）（程序有点长，但思路非常简单易懂）**\n\n```cpp\n#include<bits/stdc++.h>\n#include <cstring> \nusing namespace std;\nstring qutou(string a)//作用：去除头部的零\n{\n    int len;\n    while(a[0]=='0'&&len!=1)//如果第一位还是零\n    {\n        len=a.size();\n        a=a.substr(1,len-1);//把除了第一位之外的部分向前移动一位，覆盖第一位的零\n    }\n    return a;\n}\nstring quwei(string a)//作用：去除头部的零\n{\n    int len=a.size();\n    while(a[len-1]=='0')//如果第一位还是零\n    {\n        a=a.substr(0,len-1 );//把除了最后一位之外的部分向后移动一位，覆盖最后一位的零\n        len--;\n    }\n    return a;\n}\nstring fanzhuan(string a)//作用：将数翻转\n{\n    int len=a.size();\n    string b;//创建一个临时字符串\"b\"\n    for(int i=len-1;i>=0;i--)//将a反向粘贴到b上\n    {\n        b+=a[i];\n    }\n    return b;//返回b\n}\nint main()\n{\n    string front,behind,total;//字符串front，behind分别用来储存小数和分数的前半部分和后半部分\n    getline(cin,total);\n    int len=total.size(),n=0,form=0;\n    for(int i=0;;i++)//遍历字符串\n    {\n        if(total[i]!='/'&&total[i]!='%'&&total[i]!='.')//如果当前位置不是特殊字符\n        {\n            front+=total[i];//将这个字符储存进front中\n        }\n        if(total[i]=='/')//如果是'/'，说明分子已经读入结束\n        {\n            form=1;//记录下这个数是分数\n            n=i+1;\n            break;//结束读取分子\n        }\n        if(total[i]=='%')//如果是'%'，说明百分数已经读入结束\n        {\n            form=2;//记录下这个数是百分数\n            break;//结束读取\n        }\n        if(total[i]=='.')//如果是'.'，说明整数部分已经读入结束\n        {\n            form=3;//记录下这个数是小数\n            n=i+1;\n            break;//结束读取整数部分\n        }\n        if(i==len-1)//如果一直读取到了最后一位还没有特殊符号\n        {\n            form=4;//记录下这个数是整数\n            break;//结束读取\n        }\n    }\n    if(form==1||form==3)//如果是分数或小数\n    {\n        for(int j=n;j<=len-1;j++)//读取分母（或小数部分）\n        {\n            behind+=total[j];\n        }\n        behind=fanzhuan(behind);//翻转后部\n    }\n    front=fanzhuan(front);//翻转前部\n    front=qutou(front);//对前部进行去除头部的零\n    if(form==1)//如果是分数\n    {\n        behind=qutou(behind);//对后部进行去除头部的零\n        if(front==\"\\0\")//如果前部去头之后什么也不剩，说明前部是零\n        {\n            cout<<\"0/\"<<behind;\n        }\n        else\n        {\n            cout<<front<<\"/\"<<behind;//输出\n        }\n    }\n    if(form==2)//如果是百分数\n    {\n        front=qutou(front);\n        if(front==\"\\0\")//如果前部去头之后什么也不剩，说明前部是零\n        {\n            cout<<\"0%\";\n        }\n        else\n        {\n            cout<<front<<\"%\";//输出\n        }\n    }\n    if(form==3)//如果是分数\n    {\n        behind=quwei(behind);//对后部进行去除尾部的零\n        if(behind==\"\\0\")\n        {\n            if(front==\"\\0\")//如果前部去头之后什么也不剩，说明前部是零\n            {\n                front=\"0\";\n            }\n            cout<<front<<\".0\";\n        }\n        else\n        {\n            cout<<front<<\".\"<<behind;//输出\n        }\n    }\n    if(form==4)//如果是整数\n    {\n        front=qutou(front);\n        if(front==\"\\0\")//如果前部去头之后什么也不剩，说明前部是零\n        {\n            cout<<\"0\";\n        }\n        else\n        {\n            cout<<front;//输出\n        }\n    }\n    return 0;\n}\n```\n","slug":"P1553数字反转（升级版)","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2me000kpb0y9kgp864f","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数，请将该数各个位上数字反转得到一个新数。</p>\n<p>这次与NOIP2011普及组第一题不同的是：这个数可以是小数，分数，百分数，整数。整数反转是将所有数位对调；小数反转是把整数部分的数反转，再将小数部分的数反转，不交换整数部分与小数部分；分数反转是把分母的数反转，再把分子的数反转，不交换分子与分母；百分数的分子一定是整数，百分数只改变数字部分。整数新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零；小数新数的末尾不为0（除非小数部分除了0没有别的数，那么只保留1个0）；分数不约分，分子和分母都不是小数（约分滴童鞋抱歉了，不能过哦。输入数据保证分母不为0），本次没有负数。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>一个数s</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>一个数，即s的反转数</p>\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5087462</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2647805</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">600.084</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6.48</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">700&#x2F;27</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7&#x2F;72</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8670%</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">768%</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h2><p>所有数据：</p>\n<p>25%<code>s</code>是整数，不大于20位</p>\n<p>25%<code>s</code>是小数，整数部分和小数部分均不大于10位</p>\n<p>25%<code>s</code>是分数，分子和分母均不大于10位</p>\n<p>25%<code>s</code>是百分数，分子不大于19位</p>\n<p>（20个数据）</p>\n<p><strong>首先，我们看到这个题，易分析出这个题有四个步骤：拆分，翻转，去零，输出。</strong></p>\n<p><strong>所以我们只要分开编出几个函数进行这几个操作即可。</strong></p>\n<p><strong>经过观察，易发现：小数的小数部分需要去除的是后部的零，而其他的需要去除的是前部的零。</strong></p>\n<p><strong>不多说了，直接上程序：（用的是对字符串的处理）（程序有点长，但思路非常简单易懂）</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt; </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">qutou</span><span class=\"params\">(<span class=\"built_in\">string</span> a)</span><span class=\"comment\">//作用：去除头部的零</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;len!=<span class=\"number\">1</span>)<span class=\"comment\">//如果第一位还是零</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        len=a.size();</span><br><span class=\"line\">        a=a.substr(<span class=\"number\">1</span>,len<span class=\"number\">-1</span>);<span class=\"comment\">//把除了第一位之外的部分向前移动一位，覆盖第一位的零</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">quwei</span><span class=\"params\">(<span class=\"built_in\">string</span> a)</span><span class=\"comment\">//作用：去除头部的零</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=a.size();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a[len<span class=\"number\">-1</span>]==<span class=\"string\">&#x27;0&#x27;</span>)<span class=\"comment\">//如果第一位还是零</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a=a.substr(<span class=\"number\">0</span>,len<span class=\"number\">-1</span> );<span class=\"comment\">//把除了最后一位之外的部分向后移动一位，覆盖最后一位的零</span></span><br><span class=\"line\">        len--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">fanzhuan</span><span class=\"params\">(<span class=\"built_in\">string</span> a)</span><span class=\"comment\">//作用：将数翻转</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=a.size();</span><br><span class=\"line\">    <span class=\"built_in\">string</span> b;<span class=\"comment\">//创建一个临时字符串&quot;b&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=len<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"comment\">//将a反向粘贴到b上</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b+=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;<span class=\"comment\">//返回b</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> front,behind,total;<span class=\"comment\">//字符串front，behind分别用来储存小数和分数的前半部分和后半部分</span></span><br><span class=\"line\">    getline(<span class=\"built_in\">cin</span>,total);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=total.size(),n=<span class=\"number\">0</span>,form=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;;i++)<span class=\"comment\">//遍历字符串</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(total[i]!=<span class=\"string\">&#x27;/&#x27;</span>&amp;&amp;total[i]!=<span class=\"string\">&#x27;%&#x27;</span>&amp;&amp;total[i]!=<span class=\"string\">&#x27;.&#x27;</span>)<span class=\"comment\">//如果当前位置不是特殊字符</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            front+=total[i];<span class=\"comment\">//将这个字符储存进front中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(total[i]==<span class=\"string\">&#x27;/&#x27;</span>)<span class=\"comment\">//如果是&#x27;/&#x27;，说明分子已经读入结束</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            form=<span class=\"number\">1</span>;<span class=\"comment\">//记录下这个数是分数</span></span><br><span class=\"line\">            n=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//结束读取分子</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(total[i]==<span class=\"string\">&#x27;%&#x27;</span>)<span class=\"comment\">//如果是&#x27;%&#x27;，说明百分数已经读入结束</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            form=<span class=\"number\">2</span>;<span class=\"comment\">//记录下这个数是百分数</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//结束读取</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(total[i]==<span class=\"string\">&#x27;.&#x27;</span>)<span class=\"comment\">//如果是&#x27;.&#x27;，说明整数部分已经读入结束</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            form=<span class=\"number\">3</span>;<span class=\"comment\">//记录下这个数是小数</span></span><br><span class=\"line\">            n=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//结束读取整数部分</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==len<span class=\"number\">-1</span>)<span class=\"comment\">//如果一直读取到了最后一位还没有特殊符号</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            form=<span class=\"number\">4</span>;<span class=\"comment\">//记录下这个数是整数</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//结束读取</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(form==<span class=\"number\">1</span>||form==<span class=\"number\">3</span>)<span class=\"comment\">//如果是分数或小数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=n;j&lt;=len<span class=\"number\">-1</span>;j++)<span class=\"comment\">//读取分母（或小数部分）</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            behind+=total[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        behind=fanzhuan(behind);<span class=\"comment\">//翻转后部</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    front=fanzhuan(front);<span class=\"comment\">//翻转前部</span></span><br><span class=\"line\">    front=qutou(front);<span class=\"comment\">//对前部进行去除头部的零</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(form==<span class=\"number\">1</span>)<span class=\"comment\">//如果是分数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        behind=qutou(behind);<span class=\"comment\">//对后部进行去除头部的零</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(front==<span class=\"string\">&quot;\\0&quot;</span>)<span class=\"comment\">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;0/&quot;</span>&lt;&lt;behind;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;front&lt;&lt;<span class=\"string\">&quot;/&quot;</span>&lt;&lt;behind;<span class=\"comment\">//输出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(form==<span class=\"number\">2</span>)<span class=\"comment\">//如果是百分数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        front=qutou(front);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(front==<span class=\"string\">&quot;\\0&quot;</span>)<span class=\"comment\">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;0%&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;front&lt;&lt;<span class=\"string\">&quot;%&quot;</span>;<span class=\"comment\">//输出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(form==<span class=\"number\">3</span>)<span class=\"comment\">//如果是分数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        behind=quwei(behind);<span class=\"comment\">//对后部进行去除尾部的零</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(behind==<span class=\"string\">&quot;\\0&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(front==<span class=\"string\">&quot;\\0&quot;</span>)<span class=\"comment\">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                front=<span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;front&lt;&lt;<span class=\"string\">&quot;.0&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;front&lt;&lt;<span class=\"string\">&quot;.&quot;</span>&lt;&lt;behind;<span class=\"comment\">//输出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(form==<span class=\"number\">4</span>)<span class=\"comment\">//如果是整数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        front=qutou(front);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(front==<span class=\"string\">&quot;\\0&quot;</span>)<span class=\"comment\">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;front;<span class=\"comment\">//输出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数，请将该数各个位上数字反转得到一个新数。</p>\n<p>这次与NOIP2011普及组第一题不同的是：这个数可以是小数，分数，百分数，整数。整数反转是将所有数位对调；小数反转是把整数部分的数反转，再将小数部分的数反转，不交换整数部分与小数部分；分数反转是把分母的数反转，再把分子的数反转，不交换分子与分母；百分数的分子一定是整数，百分数只改变数字部分。整数新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零；小数新数的末尾不为0（除非小数部分除了0没有别的数，那么只保留1个0）；分数不约分，分子和分母都不是小数（约分滴童鞋抱歉了，不能过哦。输入数据保证分母不为0），本次没有负数。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>一个数s</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>一个数，即s的反转数</p>\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5087462</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2647805</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">600.084</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6.48</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">700&#x2F;27</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7&#x2F;72</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8670%</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">768%</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h2><p>所有数据：</p>\n<p>25%<code>s</code>是整数，不大于20位</p>\n<p>25%<code>s</code>是小数，整数部分和小数部分均不大于10位</p>\n<p>25%<code>s</code>是分数，分子和分母均不大于10位</p>\n<p>25%<code>s</code>是百分数，分子不大于19位</p>\n<p>（20个数据）</p>\n<p><strong>首先，我们看到这个题，易分析出这个题有四个步骤：拆分，翻转，去零，输出。</strong></p>\n<p><strong>所以我们只要分开编出几个函数进行这几个操作即可。</strong></p>\n<p><strong>经过观察，易发现：小数的小数部分需要去除的是后部的零，而其他的需要去除的是前部的零。</strong></p>\n<p><strong>不多说了，直接上程序：（用的是对字符串的处理）（程序有点长，但思路非常简单易懂）</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt; </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">qutou</span><span class=\"params\">(<span class=\"built_in\">string</span> a)</span><span class=\"comment\">//作用：去除头部的零</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;len!=<span class=\"number\">1</span>)<span class=\"comment\">//如果第一位还是零</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        len=a.size();</span><br><span class=\"line\">        a=a.substr(<span class=\"number\">1</span>,len<span class=\"number\">-1</span>);<span class=\"comment\">//把除了第一位之外的部分向前移动一位，覆盖第一位的零</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">quwei</span><span class=\"params\">(<span class=\"built_in\">string</span> a)</span><span class=\"comment\">//作用：去除头部的零</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=a.size();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a[len<span class=\"number\">-1</span>]==<span class=\"string\">&#x27;0&#x27;</span>)<span class=\"comment\">//如果第一位还是零</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a=a.substr(<span class=\"number\">0</span>,len<span class=\"number\">-1</span> );<span class=\"comment\">//把除了最后一位之外的部分向后移动一位，覆盖最后一位的零</span></span><br><span class=\"line\">        len--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">fanzhuan</span><span class=\"params\">(<span class=\"built_in\">string</span> a)</span><span class=\"comment\">//作用：将数翻转</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=a.size();</span><br><span class=\"line\">    <span class=\"built_in\">string</span> b;<span class=\"comment\">//创建一个临时字符串&quot;b&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=len<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)<span class=\"comment\">//将a反向粘贴到b上</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b+=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;<span class=\"comment\">//返回b</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> front,behind,total;<span class=\"comment\">//字符串front，behind分别用来储存小数和分数的前半部分和后半部分</span></span><br><span class=\"line\">    getline(<span class=\"built_in\">cin</span>,total);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=total.size(),n=<span class=\"number\">0</span>,form=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;;i++)<span class=\"comment\">//遍历字符串</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(total[i]!=<span class=\"string\">&#x27;/&#x27;</span>&amp;&amp;total[i]!=<span class=\"string\">&#x27;%&#x27;</span>&amp;&amp;total[i]!=<span class=\"string\">&#x27;.&#x27;</span>)<span class=\"comment\">//如果当前位置不是特殊字符</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            front+=total[i];<span class=\"comment\">//将这个字符储存进front中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(total[i]==<span class=\"string\">&#x27;/&#x27;</span>)<span class=\"comment\">//如果是&#x27;/&#x27;，说明分子已经读入结束</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            form=<span class=\"number\">1</span>;<span class=\"comment\">//记录下这个数是分数</span></span><br><span class=\"line\">            n=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//结束读取分子</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(total[i]==<span class=\"string\">&#x27;%&#x27;</span>)<span class=\"comment\">//如果是&#x27;%&#x27;，说明百分数已经读入结束</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            form=<span class=\"number\">2</span>;<span class=\"comment\">//记录下这个数是百分数</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//结束读取</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(total[i]==<span class=\"string\">&#x27;.&#x27;</span>)<span class=\"comment\">//如果是&#x27;.&#x27;，说明整数部分已经读入结束</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            form=<span class=\"number\">3</span>;<span class=\"comment\">//记录下这个数是小数</span></span><br><span class=\"line\">            n=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//结束读取整数部分</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==len<span class=\"number\">-1</span>)<span class=\"comment\">//如果一直读取到了最后一位还没有特殊符号</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            form=<span class=\"number\">4</span>;<span class=\"comment\">//记录下这个数是整数</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//结束读取</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(form==<span class=\"number\">1</span>||form==<span class=\"number\">3</span>)<span class=\"comment\">//如果是分数或小数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=n;j&lt;=len<span class=\"number\">-1</span>;j++)<span class=\"comment\">//读取分母（或小数部分）</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            behind+=total[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        behind=fanzhuan(behind);<span class=\"comment\">//翻转后部</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    front=fanzhuan(front);<span class=\"comment\">//翻转前部</span></span><br><span class=\"line\">    front=qutou(front);<span class=\"comment\">//对前部进行去除头部的零</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(form==<span class=\"number\">1</span>)<span class=\"comment\">//如果是分数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        behind=qutou(behind);<span class=\"comment\">//对后部进行去除头部的零</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(front==<span class=\"string\">&quot;\\0&quot;</span>)<span class=\"comment\">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;0/&quot;</span>&lt;&lt;behind;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;front&lt;&lt;<span class=\"string\">&quot;/&quot;</span>&lt;&lt;behind;<span class=\"comment\">//输出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(form==<span class=\"number\">2</span>)<span class=\"comment\">//如果是百分数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        front=qutou(front);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(front==<span class=\"string\">&quot;\\0&quot;</span>)<span class=\"comment\">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;0%&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;front&lt;&lt;<span class=\"string\">&quot;%&quot;</span>;<span class=\"comment\">//输出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(form==<span class=\"number\">3</span>)<span class=\"comment\">//如果是分数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        behind=quwei(behind);<span class=\"comment\">//对后部进行去除尾部的零</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(behind==<span class=\"string\">&quot;\\0&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(front==<span class=\"string\">&quot;\\0&quot;</span>)<span class=\"comment\">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                front=<span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;front&lt;&lt;<span class=\"string\">&quot;.0&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;front&lt;&lt;<span class=\"string\">&quot;.&quot;</span>&lt;&lt;behind;<span class=\"comment\">//输出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(form==<span class=\"number\">4</span>)<span class=\"comment\">//如果是整数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        front=qutou(front);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(front==<span class=\"string\">&quot;\\0&quot;</span>)<span class=\"comment\">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;front;<span class=\"comment\">//输出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"P3372【模板】线段树1","date":"2020-07-05T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://tvax3.sinaimg.cn/large/0072Vf1pgy1foxkfj2rfrj31hc0u04ln.jpg","description":"洛谷P3372【模板】线段树1题解。","_content":"# 题目\n\n## P3372 【模板】线段树 1\n\n####题目描述\n\n如题，已知一个数列，你需要进行下面两种操作：\n\n1. 将某区间每一个数加上 k。\n1. 求出某区间每一个数的和。\n\n#### 输入格式\n\n第一行包含两个整数` n`, `m`，分别表示该数列数字的个数和操作的总个数。\n\n第二行包含` n` 个用空格分隔的整数，其中第 i 个数字表示数列第 i 项的初始值。\n\n接下来 `m` 行每行包含 3 或 4 个整数，表示一个操作，具体如下：\n\n1. ` 1 x y k`：将区间 [x, y][x,y] 内每个数加上 kk。\n1. ` 2 x y`：输出区间 [x, y][x,y] 内每个数的和。\n\n#### 输出格式\n\n输出包含若干行整数，即为所有操作 2 的结果。\n\n#### 输入输出样例\n\n```\n5 5\n1 5 4 2 3\n2 2 4\n1 2 3 2\n2 3 4\n1 1 5 1\n2 1 4\n```\n\n```\n11\n8\n20\n```\n\n#### 说明/提示\n\n对于 30% 的数据：n≤8，m≤10。\n对于 70% 的数据：n≤10^3^，m≤10^4^。\n对于 100% 的数据：1≤n,m≤10^5^。\n\n保证任意时刻数列中任意元素的和在 [-2<sup>63</sup>, 2<sup>63</sup>)内。\n\n【样例解释】\n\n<img src=\"https://cdn.luogu.com.cn/upload/pic/2251.png\" alt=\"\" />\n\n# 代码\n\n不多说了，线段树板子题。\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 1000090;\n\nlong long nums[MAXN];\nlong long totN;\nlong long totDO;\nbool tempquest;\n\nstruct Node\n{\n    long long tag;\n    long long value;\n    long long l, r;\n    Node* lch, * rch;\n    inline void maketag(const long long w)\n    {\n        value += (r - l + 1) * w;\n        tag += w;\n    }\n    inline void push_up()\n    {\n        value = lch->value + rch->value;\n    }\n    inline void push_down()\n    {\n        if (!tag)\n        {\n            return;\n        }\n        else\n        {\n            if (lch==NULL)\n            {\n                Node(l, (l + r) >> 1);\n            }\n            if (rch == NULL)\n            {\n                Node(((l + r) >> 1) + 1, r);\n            }\n            lch->maketag(tag);\n            rch->maketag(tag);\n            tag = 0;\n        }\n    }\n    Node(const long long L, const long long R)\n    {\n        l = L;\n        r = R;\n        if (l == r)\n        {\n            value = nums[l];\n            lch = NULL;\n            rch = NULL;\n            tag = 0;\n        }\n        else\n        {\n            tag = 0;\n            long long mid = (l + r) >> 1;\n            lch = new Node(L, mid);\n            rch = new Node(mid + 1, R);\n            push_up();\n        }\n    }\n    inline bool in_range(const long long L, const long long R)\n    {\n        return (L <= l) && (R >= r);\n    }\n    inline bool out_of_range(const long long L, const long long R)\n    {\n        return (l > R) || (r < L);\n    }\n    inline void update(const long long L, const long long R, const long long w)\n    {\n        if (in_range(L, R))\n        {\n            maketag(w);\n        }\n        else if (!out_of_range(L, R))\n        {\n            push_down();\n            lch->update(L, R, w);\n            rch->update(L, R, w);\n            push_up();\n        }\n    }\n    inline long long quest_range_sum(const long long L, const long long R)\n    {\n        if (in_range(L, R))\n        {\n            return value;\n        }\n        else\n        {\n            if (out_of_range(L, R))\n            {\n                return 0;\n            }\n        }\n        push_down();\n        return lch->quest_range_sum(L, R) + rch->quest_range_sum(L, R);\n    }\n};\n\ninline long long read()\n{\n    long long x = 0;\n    short f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch>'9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nvoid write(const long long& x)\n{\n    char f[100];\n    long long tmp = x;\n    if (tmp < 0)\n    {\n        tmp = -tmp;\n        putchar('-');\n    }\n    long long s = 0;\n    while (tmp > 0)\n    {\n        f[s++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while (s > 0)\n    {\n        putchar(f[--s]);\n    }\n}\n\nint main()\n{\n    totN = read();\n    totDO = read();\n    int temp;\n    for (int i = 1; i <= totN; i++)\n    {\n        nums[i] = read();\n    }\n    Node* root = new Node(1, totN);\n    for (int i = 1; i <= totDO; i++)\n    {\n        tempquest = read() - 1;\n        if (!tempquest)\n        {\n            long long tempL = read();\n            long long tempR = read();\n            auto tempW = read();\n            root->update(tempL, tempR, tempW);\n        }\n        else\n        {\n            auto tempL = read();\n            auto tempR = read();\n            write(root->quest_range_sum(tempL, tempR));\n            putchar('\\n');\n        }\n    }\n    return 0;\n}//LikiBlaze Code\n```\n","source":"_posts/P3372【模板】线段树1.md","raw":"---\ntitle: P3372【模板】线段树1\ndate: 2020-07-06\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://tvax3.sinaimg.cn/large/0072Vf1pgy1foxkfj2rfrj31hc0u04ln.jpg\ntags: \n    - 洛谷\n    - 线段树\n    - 算法概述\ndescription: 洛谷P3372【模板】线段树1题解。\n---\n# 题目\n\n## P3372 【模板】线段树 1\n\n####题目描述\n\n如题，已知一个数列，你需要进行下面两种操作：\n\n1. 将某区间每一个数加上 k。\n1. 求出某区间每一个数的和。\n\n#### 输入格式\n\n第一行包含两个整数` n`, `m`，分别表示该数列数字的个数和操作的总个数。\n\n第二行包含` n` 个用空格分隔的整数，其中第 i 个数字表示数列第 i 项的初始值。\n\n接下来 `m` 行每行包含 3 或 4 个整数，表示一个操作，具体如下：\n\n1. ` 1 x y k`：将区间 [x, y][x,y] 内每个数加上 kk。\n1. ` 2 x y`：输出区间 [x, y][x,y] 内每个数的和。\n\n#### 输出格式\n\n输出包含若干行整数，即为所有操作 2 的结果。\n\n#### 输入输出样例\n\n```\n5 5\n1 5 4 2 3\n2 2 4\n1 2 3 2\n2 3 4\n1 1 5 1\n2 1 4\n```\n\n```\n11\n8\n20\n```\n\n#### 说明/提示\n\n对于 30% 的数据：n≤8，m≤10。\n对于 70% 的数据：n≤10^3^，m≤10^4^。\n对于 100% 的数据：1≤n,m≤10^5^。\n\n保证任意时刻数列中任意元素的和在 [-2<sup>63</sup>, 2<sup>63</sup>)内。\n\n【样例解释】\n\n<img src=\"https://cdn.luogu.com.cn/upload/pic/2251.png\" alt=\"\" />\n\n# 代码\n\n不多说了，线段树板子题。\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 1000090;\n\nlong long nums[MAXN];\nlong long totN;\nlong long totDO;\nbool tempquest;\n\nstruct Node\n{\n    long long tag;\n    long long value;\n    long long l, r;\n    Node* lch, * rch;\n    inline void maketag(const long long w)\n    {\n        value += (r - l + 1) * w;\n        tag += w;\n    }\n    inline void push_up()\n    {\n        value = lch->value + rch->value;\n    }\n    inline void push_down()\n    {\n        if (!tag)\n        {\n            return;\n        }\n        else\n        {\n            if (lch==NULL)\n            {\n                Node(l, (l + r) >> 1);\n            }\n            if (rch == NULL)\n            {\n                Node(((l + r) >> 1) + 1, r);\n            }\n            lch->maketag(tag);\n            rch->maketag(tag);\n            tag = 0;\n        }\n    }\n    Node(const long long L, const long long R)\n    {\n        l = L;\n        r = R;\n        if (l == r)\n        {\n            value = nums[l];\n            lch = NULL;\n            rch = NULL;\n            tag = 0;\n        }\n        else\n        {\n            tag = 0;\n            long long mid = (l + r) >> 1;\n            lch = new Node(L, mid);\n            rch = new Node(mid + 1, R);\n            push_up();\n        }\n    }\n    inline bool in_range(const long long L, const long long R)\n    {\n        return (L <= l) && (R >= r);\n    }\n    inline bool out_of_range(const long long L, const long long R)\n    {\n        return (l > R) || (r < L);\n    }\n    inline void update(const long long L, const long long R, const long long w)\n    {\n        if (in_range(L, R))\n        {\n            maketag(w);\n        }\n        else if (!out_of_range(L, R))\n        {\n            push_down();\n            lch->update(L, R, w);\n            rch->update(L, R, w);\n            push_up();\n        }\n    }\n    inline long long quest_range_sum(const long long L, const long long R)\n    {\n        if (in_range(L, R))\n        {\n            return value;\n        }\n        else\n        {\n            if (out_of_range(L, R))\n            {\n                return 0;\n            }\n        }\n        push_down();\n        return lch->quest_range_sum(L, R) + rch->quest_range_sum(L, R);\n    }\n};\n\ninline long long read()\n{\n    long long x = 0;\n    short f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch>'9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nvoid write(const long long& x)\n{\n    char f[100];\n    long long tmp = x;\n    if (tmp < 0)\n    {\n        tmp = -tmp;\n        putchar('-');\n    }\n    long long s = 0;\n    while (tmp > 0)\n    {\n        f[s++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while (s > 0)\n    {\n        putchar(f[--s]);\n    }\n}\n\nint main()\n{\n    totN = read();\n    totDO = read();\n    int temp;\n    for (int i = 1; i <= totN; i++)\n    {\n        nums[i] = read();\n    }\n    Node* root = new Node(1, totN);\n    for (int i = 1; i <= totDO; i++)\n    {\n        tempquest = read() - 1;\n        if (!tempquest)\n        {\n            long long tempL = read();\n            long long tempR = read();\n            auto tempW = read();\n            root->update(tempL, tempR, tempW);\n        }\n        else\n        {\n            auto tempL = read();\n            auto tempR = read();\n            write(root->quest_range_sum(tempL, tempR));\n            putchar('\\n');\n        }\n    }\n    return 0;\n}//LikiBlaze Code\n```\n","slug":"P3372【模板】线段树1","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2mg000ppb0ycx2fcq1a","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h2 id=\"P3372-【模板】线段树-1\"><a href=\"#P3372-【模板】线段树-1\" class=\"headerlink\" title=\"P3372 【模板】线段树 1\"></a>P3372 【模板】线段树 1</h2><p>####题目描述</p>\n<p>如题，已知一个数列，你需要进行下面两种操作：</p>\n<ol>\n<li>将某区间每一个数加上 k。</li>\n<li>求出某区间每一个数的和。</li>\n</ol>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行包含两个整数<code>n</code>, <code>m</code>，分别表示该数列数字的个数和操作的总个数。</p>\n<p>第二行包含<code>n</code> 个用空格分隔的整数，其中第 i 个数字表示数列第 i 项的初始值。</p>\n<p>接下来 <code>m</code> 行每行包含 3 或 4 个整数，表示一个操作，具体如下：</p>\n<ol>\n<li><code>1 x y k</code>：将区间 [x, y][x,y] 内每个数加上 kk。</li>\n<li><code>2 x y</code>：输出区间 [x, y][x,y] 内每个数的和。</li>\n</ol>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>输出包含若干行整数，即为所有操作 2 的结果。</p>\n<h4 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5</span><br><span class=\"line\">1 5 4 2 3</span><br><span class=\"line\">2 2 4</span><br><span class=\"line\">1 2 3 2</span><br><span class=\"line\">2 3 4</span><br><span class=\"line\">1 1 5 1</span><br><span class=\"line\">2 1 4</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11</span><br><span class=\"line\">8</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h4><p>对于 30% 的数据：n≤8，m≤10。<br>对于 70% 的数据：n≤10^3^，m≤10^4^。<br>对于 100% 的数据：1≤n,m≤10^5^。</p>\n<p>保证任意时刻数列中任意元素的和在 [-2<sup>63</sup>, 2<sup>63</sup>)内。</p>\n<p>【样例解释】</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://cdn.luogu.com.cn/upload/pic/2251.png\" alt=\"\" />\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>不多说了，线段树板子题。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1000090</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> nums[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totN;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totDO;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> tempquest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tag;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> l, r;</span><br><span class=\"line\">    Node* lch, * rch;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">maketag</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        value += (r - l + <span class=\"number\">1</span>) * w;</span><br><span class=\"line\">        tag += w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">push_up</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        value = lch-&gt;value + rch-&gt;value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">push_down</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lch==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Node(l, (l + r) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rch == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Node(((l + r) &gt;&gt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lch-&gt;maketag(tag);</span><br><span class=\"line\">            rch-&gt;maketag(tag);</span><br><span class=\"line\">            tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l = L;</span><br><span class=\"line\">        r = R;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l == r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            value = nums[l];</span><br><span class=\"line\">            lch = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            rch = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            lch = <span class=\"keyword\">new</span> Node(L, mid);</span><br><span class=\"line\">            rch = <span class=\"keyword\">new</span> Node(mid + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">            push_up();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">in_range</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (L &lt;= l) &amp;&amp; (R &gt;= r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">out_of_range</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (l &gt; R) || (r &lt; L);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in_range(L, R))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maketag(w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!out_of_range(L, R))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            push_down();</span><br><span class=\"line\">            lch-&gt;update(L, R, w);</span><br><span class=\"line\">            rch-&gt;update(L, R, w);</span><br><span class=\"line\">            push_up();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">quest_range_sum</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in_range(L, R))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (out_of_range(L, R))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        push_down();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lch-&gt;quest_range_sum(L, R) + rch-&gt;quest_range_sum(L, R);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">short</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&amp; x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = -tmp;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    totN = read();</span><br><span class=\"line\">    totDO = read();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        nums[i] = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node* root = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, totN);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totDO; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempquest = read() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tempquest)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tempL = read();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tempR = read();</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> tempW = read();</span><br><span class=\"line\">            root-&gt;update(tempL, tempR, tempW);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> tempL = read();</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> tempR = read();</span><br><span class=\"line\">            write(root-&gt;quest_range_sum(tempL, tempR));</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h2 id=\"P3372-【模板】线段树-1\"><a href=\"#P3372-【模板】线段树-1\" class=\"headerlink\" title=\"P3372 【模板】线段树 1\"></a>P3372 【模板】线段树 1</h2><p>####题目描述</p>\n<p>如题，已知一个数列，你需要进行下面两种操作：</p>\n<ol>\n<li>将某区间每一个数加上 k。</li>\n<li>求出某区间每一个数的和。</li>\n</ol>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>第一行包含两个整数<code>n</code>, <code>m</code>，分别表示该数列数字的个数和操作的总个数。</p>\n<p>第二行包含<code>n</code> 个用空格分隔的整数，其中第 i 个数字表示数列第 i 项的初始值。</p>\n<p>接下来 <code>m</code> 行每行包含 3 或 4 个整数，表示一个操作，具体如下：</p>\n<ol>\n<li><code>1 x y k</code>：将区间 [x, y][x,y] 内每个数加上 kk。</li>\n<li><code>2 x y</code>：输出区间 [x, y][x,y] 内每个数的和。</li>\n</ol>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>输出包含若干行整数，即为所有操作 2 的结果。</p>\n<h4 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5</span><br><span class=\"line\">1 5 4 2 3</span><br><span class=\"line\">2 2 4</span><br><span class=\"line\">1 2 3 2</span><br><span class=\"line\">2 3 4</span><br><span class=\"line\">1 1 5 1</span><br><span class=\"line\">2 1 4</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11</span><br><span class=\"line\">8</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h4><p>对于 30% 的数据：n≤8，m≤10。<br>对于 70% 的数据：n≤10^3^，m≤10^4^。<br>对于 100% 的数据：1≤n,m≤10^5^。</p>\n<p>保证任意时刻数列中任意元素的和在 [-2<sup>63</sup>, 2<sup>63</sup>)内。</p>\n<p>【样例解释】</p>\n<img src=\"https://cdn.luogu.com.cn/upload/pic/2251.png\" alt=\"\" />\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>不多说了，线段树板子题。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1000090</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> nums[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totN;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totDO;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> tempquest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tag;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> l, r;</span><br><span class=\"line\">    Node* lch, * rch;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">maketag</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        value += (r - l + <span class=\"number\">1</span>) * w;</span><br><span class=\"line\">        tag += w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">push_up</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        value = lch-&gt;value + rch-&gt;value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">push_down</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lch==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Node(l, (l + r) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rch == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Node(((l + r) &gt;&gt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lch-&gt;maketag(tag);</span><br><span class=\"line\">            rch-&gt;maketag(tag);</span><br><span class=\"line\">            tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l = L;</span><br><span class=\"line\">        r = R;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l == r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            value = nums[l];</span><br><span class=\"line\">            lch = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            rch = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            lch = <span class=\"keyword\">new</span> Node(L, mid);</span><br><span class=\"line\">            rch = <span class=\"keyword\">new</span> Node(mid + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">            push_up();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">in_range</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (L &lt;= l) &amp;&amp; (R &gt;= r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">out_of_range</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (l &gt; R) || (r &lt; L);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in_range(L, R))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maketag(w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!out_of_range(L, R))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            push_down();</span><br><span class=\"line\">            lch-&gt;update(L, R, w);</span><br><span class=\"line\">            rch-&gt;update(L, R, w);</span><br><span class=\"line\">            push_up();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">quest_range_sum</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in_range(L, R))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (out_of_range(L, R))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        push_down();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lch-&gt;quest_range_sum(L, R) + rch-&gt;quest_range_sum(L, R);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">short</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&amp; x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = -tmp;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    totN = read();</span><br><span class=\"line\">    totDO = read();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totN; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        nums[i] = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node* root = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, totN);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totDO; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempquest = read() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tempquest)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tempL = read();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tempR = read();</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> tempW = read();</span><br><span class=\"line\">            root-&gt;update(tempL, tempR, tempW);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> tempL = read();</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> tempR = read();</span><br><span class=\"line\">            write(root-&gt;quest_range_sum(tempL, tempR));</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n"},{"title":"STL总结","date":"2021-01-01T11:10:04.000Z","description":"关于STL容器的一些总结。","top_img":"https://api.r10086.com/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F2.php","cover":"https://tvax4.sinaimg.cn/large/0072Vf1pgy1foxk7hw45cj31hc0u0nhq.jpg","_content":"\n`2021`年啦！元旦快乐！\n\n前几天扶苏让我们学STL，然后我就感觉STL是属于语法方面，就去<a herf=\"https://zh.cppreference.com\">cppreference</a>上面看。结果发现<a herf=\"https://zh.cppreference.com\">cppreference</a>上面的STL不仅分散，而且有好多东西都是我们用不到的。所以我就想写个博客整理一下`STL`方面的东西。\n\n`STL`这东西有好多实现比较先进，随着人类的进化`STL`中的好多东西会被实现的越来越好，使用方法有时也会随之变化。所以这篇博客应该会随着`C++`的更新而更新。\n\n<div class='tip' ><p>目前C++版本：C++20。<p></div>\n\n<h2>关于STL容器前缀</h2>\n<h3>multi</h3>\n代表容器内部的元素可以重复。\n<h3>unordered_</h3>\n代表此容器基于哈希表，复杂度几乎为常数，但是内存占用较大。\n<h3>unordered_multi</h3>\n顾名思义，这是上两种特性的结合。\n\n<h2>std::vector</h2>\n\n首先当然是我们最最最基础的`vector`动态数组啦！\n\n`vector`基础函数列表：\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `push_back` | 从最后加入一个元素 |\n| `pop_back` | 弹出最后一个元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n由于`vector`可以直接下标访问，大部分函数都用不太到，这里就不再赘述了。\n\n<h2>std::stack</h2>\n\n一个栈。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `push` | 从栈顶压入一个元素 |\n| `pop` | 弹出栈顶元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n<h2>std::queue</h2>\n\n一个队列。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `push` | 从队尾加入一个元素 |\n| `pop` | 弹出队首元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n<h2>std::deque</h2>\n\n一个双端队列。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `push_front` | 从队首加入一个元素 |\n| `push_back` | 从队尾加入一个元素 |\n| `pop_front` | 弹出队首元素 |\n| `pop_back` | 弹出队尾元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n<h2>std::priority_queue</h2>\n优先队列，也就是堆。是一个大根堆。\n\n如果想使用小根堆可以这样：\n```cpp\nstd::priority_queue<int,vector<int>,greater<int> > Heap;\n```\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `push(value)` | 加入一个元素 |\n| `pop` | 弹顶 |\n| `top` | 返回堆顶值 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n<h2>std::map</h2>\n\n`map`家族有四个容器：`map`,`unordered_map`,`multimap`,`unordered_multimap`。区别上面有说。\n\n`map`的内部实现是一棵红黑树，主要的功能是实现键值映射。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `insert(value)` | 加入一个元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n而`map`最最最大的一个优点，就是——它可以直接以像数组一样的方式访问它所对应的元素。这也就是说，你可以使用数字，浮点数，字符串，甚至于结构体来当做`map`的数组下标。\n\n<h2>std::set</h2>\n\n`set`家族也有四个容器：`set`,`unordered_set`,`multiset`,`unordered_multiset`。区别上面有说。\n\n`set`的内部实现是一棵红黑树，主要的功能是实现查重。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `insert(value)` | 加入一个元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n| `find(value)` | 指向键等于 key 的元素的迭代器。若找不到这种元素，则返回end()迭代器。 |\n| `count` | 返回匹配特定键的元素数量 |\n\n<h2>std::bitset</h2>\n\n相当于一个布尔数组，可以使用数组下标访问。但是每一个元素只占用一bit。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `set` | 将位置为`true`或者提供的值 |\n| `reset` | 将位置为`false` |\n| `flip` | 翻转位的值 |\n| `to_string` | 返回数据的字符串表示 |\n| `to_ullong (C++11)` | 返回数据的`unsigned long long`整数表示 |","source":"_posts/STL总结.md","raw":"---\ntitle: STL总结\ndate: 2021-01-01 19:10:04\ntags:\n\t- C++基础\ncategories: C++基础\ndescription: 关于STL容器的一些总结。\ntop_img: https://api.r10086.com/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F2.php\ncover: https://tvax4.sinaimg.cn/large/0072Vf1pgy1foxk7hw45cj31hc0u0nhq.jpg\n---\n\n`2021`年啦！元旦快乐！\n\n前几天扶苏让我们学STL，然后我就感觉STL是属于语法方面，就去<a herf=\"https://zh.cppreference.com\">cppreference</a>上面看。结果发现<a herf=\"https://zh.cppreference.com\">cppreference</a>上面的STL不仅分散，而且有好多东西都是我们用不到的。所以我就想写个博客整理一下`STL`方面的东西。\n\n`STL`这东西有好多实现比较先进，随着人类的进化`STL`中的好多东西会被实现的越来越好，使用方法有时也会随之变化。所以这篇博客应该会随着`C++`的更新而更新。\n\n<div class='tip' ><p>目前C++版本：C++20。<p></div>\n\n<h2>关于STL容器前缀</h2>\n<h3>multi</h3>\n代表容器内部的元素可以重复。\n<h3>unordered_</h3>\n代表此容器基于哈希表，复杂度几乎为常数，但是内存占用较大。\n<h3>unordered_multi</h3>\n顾名思义，这是上两种特性的结合。\n\n<h2>std::vector</h2>\n\n首先当然是我们最最最基础的`vector`动态数组啦！\n\n`vector`基础函数列表：\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `push_back` | 从最后加入一个元素 |\n| `pop_back` | 弹出最后一个元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n由于`vector`可以直接下标访问，大部分函数都用不太到，这里就不再赘述了。\n\n<h2>std::stack</h2>\n\n一个栈。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `push` | 从栈顶压入一个元素 |\n| `pop` | 弹出栈顶元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n<h2>std::queue</h2>\n\n一个队列。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `push` | 从队尾加入一个元素 |\n| `pop` | 弹出队首元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n<h2>std::deque</h2>\n\n一个双端队列。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `push_front` | 从队首加入一个元素 |\n| `push_back` | 从队尾加入一个元素 |\n| `pop_front` | 弹出队首元素 |\n| `pop_back` | 弹出队尾元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n<h2>std::priority_queue</h2>\n优先队列，也就是堆。是一个大根堆。\n\n如果想使用小根堆可以这样：\n```cpp\nstd::priority_queue<int,vector<int>,greater<int> > Heap;\n```\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `push(value)` | 加入一个元素 |\n| `pop` | 弹顶 |\n| `top` | 返回堆顶值 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n<h2>std::map</h2>\n\n`map`家族有四个容器：`map`,`unordered_map`,`multimap`,`unordered_multimap`。区别上面有说。\n\n`map`的内部实现是一棵红黑树，主要的功能是实现键值映射。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `insert(value)` | 加入一个元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n\n而`map`最最最大的一个优点，就是——它可以直接以像数组一样的方式访问它所对应的元素。这也就是说，你可以使用数字，浮点数，字符串，甚至于结构体来当做`map`的数组下标。\n\n<h2>std::set</h2>\n\n`set`家族也有四个容器：`set`,`unordered_set`,`multiset`,`unordered_multiset`。区别上面有说。\n\n`set`的内部实现是一棵红黑树，主要的功能是实现查重。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `insert(value)` | 加入一个元素 |\n| `clear` | 清空 |\n| `size` | 总元素个数 |\n| `empty` | 返回是否为空 |\n| `find(value)` | 指向键等于 key 的元素的迭代器。若找不到这种元素，则返回end()迭代器。 |\n| `count` | 返回匹配特定键的元素数量 |\n\n<h2>std::bitset</h2>\n\n相当于一个布尔数组，可以使用数组下标访问。但是每一个元素只占用一bit。\n\n| 函数 | 作用 |\n| ---- | ---- |\n| `set` | 将位置为`true`或者提供的值 |\n| `reset` | 将位置为`false` |\n| `flip` | 翻转位的值 |\n| `to_string` | 返回数据的字符串表示 |\n| `to_ullong (C++11)` | 返回数据的`unsigned long long`整数表示 |","slug":"STL总结","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2mi000tpb0yhdbqcgha","content":"<p><code>2021</code>年啦！元旦快乐！</p>\n<p>前几天扶苏让我们学STL，然后我就感觉STL是属于语法方面，就去<a herf=\"https://zh.cppreference.com\">cppreference</a>上面看。结果发现<a herf=\"https://zh.cppreference.com\">cppreference</a>上面的STL不仅分散，而且有好多东西都是我们用不到的。所以我就想写个博客整理一下<code>STL</code>方面的东西。</p>\n<p><code>STL</code>这东西有好多实现比较先进，随着人类的进化<code>STL</code>中的好多东西会被实现的越来越好，使用方法有时也会随之变化。所以这篇博客应该会随着<code>C++</code>的更新而更新。</p>\n<div class='tip' ><p>目前C++版本：C++20。<p></div>\n\n<h2>关于STL容器前缀</h2>\n<h3>multi</h3>\n代表容器内部的元素可以重复。\n<h3>unordered_</h3>\n代表此容器基于哈希表，复杂度几乎为常数，但是内存占用较大。\n<h3>unordered_multi</h3>\n顾名思义，这是上两种特性的结合。\n\n<h2>std::vector</h2>\n\n<p>首先当然是我们最最最基础的<code>vector</code>动态数组啦！</p>\n<p><code>vector</code>基础函数列表：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push_back</code></td>\n<td>从最后加入一个元素</td>\n</tr>\n<tr>\n<td><code>pop_back</code></td>\n<td>弹出最后一个元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<p>由于<code>vector</code>可以直接下标访问，大部分函数都用不太到，这里就不再赘述了。</p>\n<h2>std::stack</h2>\n\n<p>一个栈。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push</code></td>\n<td>从栈顶压入一个元素</td>\n</tr>\n<tr>\n<td><code>pop</code></td>\n<td>弹出栈顶元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<h2>std::queue</h2>\n\n<p>一个队列。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push</code></td>\n<td>从队尾加入一个元素</td>\n</tr>\n<tr>\n<td><code>pop</code></td>\n<td>弹出队首元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<h2>std::deque</h2>\n\n<p>一个双端队列。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push_front</code></td>\n<td>从队首加入一个元素</td>\n</tr>\n<tr>\n<td><code>push_back</code></td>\n<td>从队尾加入一个元素</td>\n</tr>\n<tr>\n<td><code>pop_front</code></td>\n<td>弹出队首元素</td>\n</tr>\n<tr>\n<td><code>pop_back</code></td>\n<td>弹出队尾元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<h2>std::priority_queue</h2>\n优先队列，也就是堆。是一个大根堆。\n\n<p>如果想使用小根堆可以这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">priority_queue</span>&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;,greater&lt;<span class=\"keyword\">int</span>&gt; &gt; Heap;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push(value)</code></td>\n<td>加入一个元素</td>\n</tr>\n<tr>\n<td><code>pop</code></td>\n<td>弹顶</td>\n</tr>\n<tr>\n<td><code>top</code></td>\n<td>返回堆顶值</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<h2>std::map</h2>\n\n<p><code>map</code>家族有四个容器：<code>map</code>,<code>unordered_map</code>,<code>multimap</code>,<code>unordered_multimap</code>。区别上面有说。</p>\n<p><code>map</code>的内部实现是一棵红黑树，主要的功能是实现键值映射。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>insert(value)</code></td>\n<td>加入一个元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<p>而<code>map</code>最最最大的一个优点，就是——它可以直接以像数组一样的方式访问它所对应的元素。这也就是说，你可以使用数字，浮点数，字符串，甚至于结构体来当做<code>map</code>的数组下标。</p>\n<h2>std::set</h2>\n\n<p><code>set</code>家族也有四个容器：<code>set</code>,<code>unordered_set</code>,<code>multiset</code>,<code>unordered_multiset</code>。区别上面有说。</p>\n<p><code>set</code>的内部实现是一棵红黑树，主要的功能是实现查重。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>insert(value)</code></td>\n<td>加入一个元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n<tr>\n<td><code>find(value)</code></td>\n<td>指向键等于 key 的元素的迭代器。若找不到这种元素，则返回end()迭代器。</td>\n</tr>\n<tr>\n<td><code>count</code></td>\n<td>返回匹配特定键的元素数量</td>\n</tr>\n</tbody></table>\n<h2>std::bitset</h2>\n\n<p>相当于一个布尔数组，可以使用数组下标访问。但是每一个元素只占用一bit。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>set</code></td>\n<td>将位置为<code>true</code>或者提供的值</td>\n</tr>\n<tr>\n<td><code>reset</code></td>\n<td>将位置为<code>false</code></td>\n</tr>\n<tr>\n<td><code>flip</code></td>\n<td>翻转位的值</td>\n</tr>\n<tr>\n<td><code>to_string</code></td>\n<td>返回数据的字符串表示</td>\n</tr>\n<tr>\n<td><code>to_ullong (C++11)</code></td>\n<td>返回数据的<code>unsigned long long</code>整数表示</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p><code>2021</code>年啦！元旦快乐！</p>\n<p>前几天扶苏让我们学STL，然后我就感觉STL是属于语法方面，就去<a herf=\"https://zh.cppreference.com\">cppreference</a>上面看。结果发现<a herf=\"https://zh.cppreference.com\">cppreference</a>上面的STL不仅分散，而且有好多东西都是我们用不到的。所以我就想写个博客整理一下<code>STL</code>方面的东西。</p>\n<p><code>STL</code>这东西有好多实现比较先进，随着人类的进化<code>STL</code>中的好多东西会被实现的越来越好，使用方法有时也会随之变化。所以这篇博客应该会随着<code>C++</code>的更新而更新。</p>\n<div class='tip' ><p>目前C++版本：C++20。<p></div>\n\n<h2>关于STL容器前缀</h2>\n<h3>multi</h3>\n代表容器内部的元素可以重复。\n<h3>unordered_</h3>\n代表此容器基于哈希表，复杂度几乎为常数，但是内存占用较大。\n<h3>unordered_multi</h3>\n顾名思义，这是上两种特性的结合。\n\n<h2>std::vector</h2>\n\n<p>首先当然是我们最最最基础的<code>vector</code>动态数组啦！</p>\n<p><code>vector</code>基础函数列表：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push_back</code></td>\n<td>从最后加入一个元素</td>\n</tr>\n<tr>\n<td><code>pop_back</code></td>\n<td>弹出最后一个元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<p>由于<code>vector</code>可以直接下标访问，大部分函数都用不太到，这里就不再赘述了。</p>\n<h2>std::stack</h2>\n\n<p>一个栈。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push</code></td>\n<td>从栈顶压入一个元素</td>\n</tr>\n<tr>\n<td><code>pop</code></td>\n<td>弹出栈顶元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<h2>std::queue</h2>\n\n<p>一个队列。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push</code></td>\n<td>从队尾加入一个元素</td>\n</tr>\n<tr>\n<td><code>pop</code></td>\n<td>弹出队首元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<h2>std::deque</h2>\n\n<p>一个双端队列。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push_front</code></td>\n<td>从队首加入一个元素</td>\n</tr>\n<tr>\n<td><code>push_back</code></td>\n<td>从队尾加入一个元素</td>\n</tr>\n<tr>\n<td><code>pop_front</code></td>\n<td>弹出队首元素</td>\n</tr>\n<tr>\n<td><code>pop_back</code></td>\n<td>弹出队尾元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<h2>std::priority_queue</h2>\n优先队列，也就是堆。是一个大根堆。\n\n<p>如果想使用小根堆可以这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">priority_queue</span>&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;,greater&lt;<span class=\"keyword\">int</span>&gt; &gt; Heap;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>push(value)</code></td>\n<td>加入一个元素</td>\n</tr>\n<tr>\n<td><code>pop</code></td>\n<td>弹顶</td>\n</tr>\n<tr>\n<td><code>top</code></td>\n<td>返回堆顶值</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<h2>std::map</h2>\n\n<p><code>map</code>家族有四个容器：<code>map</code>,<code>unordered_map</code>,<code>multimap</code>,<code>unordered_multimap</code>。区别上面有说。</p>\n<p><code>map</code>的内部实现是一棵红黑树，主要的功能是实现键值映射。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>insert(value)</code></td>\n<td>加入一个元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n</tbody></table>\n<p>而<code>map</code>最最最大的一个优点，就是——它可以直接以像数组一样的方式访问它所对应的元素。这也就是说，你可以使用数字，浮点数，字符串，甚至于结构体来当做<code>map</code>的数组下标。</p>\n<h2>std::set</h2>\n\n<p><code>set</code>家族也有四个容器：<code>set</code>,<code>unordered_set</code>,<code>multiset</code>,<code>unordered_multiset</code>。区别上面有说。</p>\n<p><code>set</code>的内部实现是一棵红黑树，主要的功能是实现查重。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>insert(value)</code></td>\n<td>加入一个元素</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>清空</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>总元素个数</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>返回是否为空</td>\n</tr>\n<tr>\n<td><code>find(value)</code></td>\n<td>指向键等于 key 的元素的迭代器。若找不到这种元素，则返回end()迭代器。</td>\n</tr>\n<tr>\n<td><code>count</code></td>\n<td>返回匹配特定键的元素数量</td>\n</tr>\n</tbody></table>\n<h2>std::bitset</h2>\n\n<p>相当于一个布尔数组，可以使用数组下标访问。但是每一个元素只占用一bit。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>set</code></td>\n<td>将位置为<code>true</code>或者提供的值</td>\n</tr>\n<tr>\n<td><code>reset</code></td>\n<td>将位置为<code>false</code></td>\n</tr>\n<tr>\n<td><code>flip</code></td>\n<td>翻转位的值</td>\n</tr>\n<tr>\n<td><code>to_string</code></td>\n<td>返回数据的字符串表示</td>\n</tr>\n<tr>\n<td><code>to_ullong (C++11)</code></td>\n<td>返回数据的<code>unsigned long long</code>整数表示</td>\n</tr>\n</tbody></table>\n"},{"title":"UOJ T1~T15 题解","date":"2020-11-26T08:33:08.000Z","top_img":"https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture","cover":"https://tvax4.sinaimg.cn/large/0072Vf1pgy1foxk3mu0ztj31hc0u07m5.jpg","hidden":true,"description":"校内UOJ的简单题Python板题解。","_content":"\n## T1 \n```python\na=int(input())\nb=int(input())\nprint(a+b)\n```\n## T2\n```python\nprint('Hello,World!')\n```\n## T3\n```python\na=int(input())\nb=int(input())\nc=int(input())\nprint(max(a,b,c))\n```\n## T4\n```python\na=int(input())\nb=int(input())\nc=int(a/b)\nprint(int(a/b))\nprint(a-b*c)\n```\n## T5\n```python\nfahrenheit = float(input())\ncelsius = (fahrenheit - 32) / 1.8\n\nprint('%0.5f ' %(celsius))\n```\n## T6\n```python\nPI=3.14\nR=float(input())\nprint('%.2f',%(R*R*R*PI*4/3))\n```\n## T7\n```python\na1=int(input())\na2=int(input())\nn=int(input())\nd=a2-a1;\nan=a1+(n-1)*d\nprint(an)\n```\n## T8\n```python\na=int(input())\nif a>0:\n\tprint('positive')\nelif a=0:\n\tprint('zero')\nelse:\n\tprint('negative')\n```\n## T9\n```python\na=int(input())\nif a&1:\n\tprint('odd')\nelse:\n\tprint('even')\n```\n## T10\n```python\na=int(input())\nif (a%3==0)&&(a%5==0):\n\tprint('YES')\nelse:\n\tprint('NO')\n```\n## T11\n```python\na=int(input())\nb=int(input())\nc=int(input())\nprint(max(a,b,c))\n```\n## T12\n```python\nn=int(input())\ntot=0\nfor i in range(n):\n\ttot=tot+int(input())\nprint('%.2f',%(float(tot)/n))\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/UOJ-T1-T15-题解.md","raw":"---\ntitle: UOJ T1~T15 题解\ndate: 2020-11-26 16:33:08\ntop_img: https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture\ncover: https://tvax4.sinaimg.cn/large/0072Vf1pgy1foxk3mu0ztj31hc0u07m5.jpg\ntags: \n    - 字符串\n    - 排序\n    - 校内事务\nhidden: true\ndescription: 校内UOJ的简单题Python板题解。\n---\n\n## T1 \n```python\na=int(input())\nb=int(input())\nprint(a+b)\n```\n## T2\n```python\nprint('Hello,World!')\n```\n## T3\n```python\na=int(input())\nb=int(input())\nc=int(input())\nprint(max(a,b,c))\n```\n## T4\n```python\na=int(input())\nb=int(input())\nc=int(a/b)\nprint(int(a/b))\nprint(a-b*c)\n```\n## T5\n```python\nfahrenheit = float(input())\ncelsius = (fahrenheit - 32) / 1.8\n\nprint('%0.5f ' %(celsius))\n```\n## T6\n```python\nPI=3.14\nR=float(input())\nprint('%.2f',%(R*R*R*PI*4/3))\n```\n## T7\n```python\na1=int(input())\na2=int(input())\nn=int(input())\nd=a2-a1;\nan=a1+(n-1)*d\nprint(an)\n```\n## T8\n```python\na=int(input())\nif a>0:\n\tprint('positive')\nelif a=0:\n\tprint('zero')\nelse:\n\tprint('negative')\n```\n## T9\n```python\na=int(input())\nif a&1:\n\tprint('odd')\nelse:\n\tprint('even')\n```\n## T10\n```python\na=int(input())\nif (a%3==0)&&(a%5==0):\n\tprint('YES')\nelse:\n\tprint('NO')\n```\n## T11\n```python\na=int(input())\nb=int(input())\nc=int(input())\nprint(max(a,b,c))\n```\n## T12\n```python\nn=int(input())\ntot=0\nfor i in range(n):\n\ttot=tot+int(input())\nprint('%.2f',%(float(tot)/n))\n```\n\n\n\n\n\n\n\n\n\n","slug":"UOJ-T1-T15-题解","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2mj000wpb0yfya41glx","content":"<h2 id=\"T1\"><a href=\"#T1\" class=\"headerlink\" title=\"T1\"></a>T1</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">b=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">print(a+b)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T2\"><a href=\"#T2\" class=\"headerlink\" title=\"T2\"></a>T2</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&#x27;Hello,World!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T3\"><a href=\"#T3\" class=\"headerlink\" title=\"T3\"></a>T3</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">b=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">c=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">print(<span class=\"built_in\">max</span>(a,b,c))</span><br></pre></td></tr></table></figure>\n<h2 id=\"T4\"><a href=\"#T4\" class=\"headerlink\" title=\"T4\"></a>T4</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">b=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">c=<span class=\"built_in\">int</span>(a/b)</span><br><span class=\"line\">print(<span class=\"built_in\">int</span>(a/b))</span><br><span class=\"line\">print(a-b*c)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T5\"><a href=\"#T5\" class=\"headerlink\" title=\"T5\"></a>T5</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fahrenheit = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">celsius = (fahrenheit - <span class=\"number\">32</span>) / <span class=\"number\">1.8</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;%0.5f &#x27;</span> %(celsius))</span><br></pre></td></tr></table></figure>\n<h2 id=\"T6\"><a href=\"#T6\" class=\"headerlink\" title=\"T6\"></a>T6</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PI=<span class=\"number\">3.14</span></span><br><span class=\"line\">R=<span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">print(<span class=\"string\">&#x27;%.2f&#x27;</span>,%(R*R*R*PI*<span class=\"number\">4</span>/<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"T7\"><a href=\"#T7\" class=\"headerlink\" title=\"T7\"></a>T7</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a1=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">a2=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">n=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">d=a2-a1;</span><br><span class=\"line\">an=a1+(n-<span class=\"number\">1</span>)*d</span><br><span class=\"line\">print(an)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T8\"><a href=\"#T8\" class=\"headerlink\" title=\"T8\"></a>T8</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">if</span> a&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;positive&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> a=<span class=\"number\">0</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;zero&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;negative&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T9\"><a href=\"#T9\" class=\"headerlink\" title=\"T9\"></a>T9</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">if</span> a&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;odd&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;even&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T10\"><a href=\"#T10\" class=\"headerlink\" title=\"T10\"></a>T10</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a%<span class=\"number\">3</span>==<span class=\"number\">0</span>)&amp;&amp;(a%<span class=\"number\">5</span>==<span class=\"number\">0</span>):</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;YES&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;NO&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T11\"><a href=\"#T11\" class=\"headerlink\" title=\"T11\"></a>T11</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">b=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">c=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">print(<span class=\"built_in\">max</span>(a,b,c))</span><br></pre></td></tr></table></figure>\n<h2 id=\"T12\"><a href=\"#T12\" class=\"headerlink\" title=\"T12\"></a>T12</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">tot=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">\ttot=tot+<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">print(<span class=\"string\">&#x27;%.2f&#x27;</span>,%(<span class=\"built_in\">float</span>(tot)/n))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"T1\"><a href=\"#T1\" class=\"headerlink\" title=\"T1\"></a>T1</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">b=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">print(a+b)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T2\"><a href=\"#T2\" class=\"headerlink\" title=\"T2\"></a>T2</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&#x27;Hello,World!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T3\"><a href=\"#T3\" class=\"headerlink\" title=\"T3\"></a>T3</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">b=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">c=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">print(<span class=\"built_in\">max</span>(a,b,c))</span><br></pre></td></tr></table></figure>\n<h2 id=\"T4\"><a href=\"#T4\" class=\"headerlink\" title=\"T4\"></a>T4</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">b=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">c=<span class=\"built_in\">int</span>(a/b)</span><br><span class=\"line\">print(<span class=\"built_in\">int</span>(a/b))</span><br><span class=\"line\">print(a-b*c)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T5\"><a href=\"#T5\" class=\"headerlink\" title=\"T5\"></a>T5</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fahrenheit = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">celsius = (fahrenheit - <span class=\"number\">32</span>) / <span class=\"number\">1.8</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;%0.5f &#x27;</span> %(celsius))</span><br></pre></td></tr></table></figure>\n<h2 id=\"T6\"><a href=\"#T6\" class=\"headerlink\" title=\"T6\"></a>T6</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PI=<span class=\"number\">3.14</span></span><br><span class=\"line\">R=<span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">print(<span class=\"string\">&#x27;%.2f&#x27;</span>,%(R*R*R*PI*<span class=\"number\">4</span>/<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"T7\"><a href=\"#T7\" class=\"headerlink\" title=\"T7\"></a>T7</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a1=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">a2=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">n=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">d=a2-a1;</span><br><span class=\"line\">an=a1+(n-<span class=\"number\">1</span>)*d</span><br><span class=\"line\">print(an)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T8\"><a href=\"#T8\" class=\"headerlink\" title=\"T8\"></a>T8</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">if</span> a&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;positive&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> a=<span class=\"number\">0</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;zero&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;negative&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T9\"><a href=\"#T9\" class=\"headerlink\" title=\"T9\"></a>T9</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">if</span> a&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;odd&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;even&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T10\"><a href=\"#T10\" class=\"headerlink\" title=\"T10\"></a>T10</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a%<span class=\"number\">3</span>==<span class=\"number\">0</span>)&amp;&amp;(a%<span class=\"number\">5</span>==<span class=\"number\">0</span>):</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;YES&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">&#x27;NO&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"T11\"><a href=\"#T11\" class=\"headerlink\" title=\"T11\"></a>T11</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">b=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">c=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">print(<span class=\"built_in\">max</span>(a,b,c))</span><br></pre></td></tr></table></figure>\n<h2 id=\"T12\"><a href=\"#T12\" class=\"headerlink\" title=\"T12\"></a>T12</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">tot=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">\ttot=tot+<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">print(<span class=\"string\">&#x27;%.2f&#x27;</span>,%(<span class=\"built_in\">float</span>(tot)/n))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n"},{"title":"一本通题库1058：求一元二次方程","date":"2020-01-18T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%8813.php","_content":"　　其实在这一章里面大部分的题做的都是很顺畅的，直到遇到了最后一个题也就是这个解一元二次方程组的题。这个题打眼一看其实挺简单的，只是要考虑三种情况∆<0,∆>0,∆=0;可是实际操作时发现远不止这么简单。这个题一开始我提交了一次有检查了一遍，结果把错误改好后发现总是有一个检查点错误。从网上搜索后才发现，c++有一个精度问题当读取的数字<strong>超出设定精度时，会读取为-0.这就要求我们在程序中要考虑超出设定精度的情况。</strong>\n\n判断精度时，因为∆有正有负，所以要用到绝对值。我们平常用的绝对值都是abs（），而因为这里是小数，所以要用到小数的取绝对值函数fabs（）\n\n**通过完成这个题，我真是学到了不少我以前没想过的知识。**\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define xiao 0.000000000001//设定delta的精度，可根据需要更改\n#define xi 0.000001 //设定x的精度（因为delta要开方，精度会减小，所以x的精度判断也要减小。）  \n\nint main()   \n{   \n     double a,b,c,x[2],dt;  \n     cin>>a>>b>>c;  \n     dt=b*b-4*a*c; \n     if(dt<0&&fabs(dt)>xiao)//判断delta是否小于零\n\t {\n         cout<<\"No answer!\";\n         return 12;\n     }\n     else if(fabs(dt)<xiao)//如果delta小于设定精度，此时delta约等于零，当做delta等于零。\n     {\n         x[0]=(-b)/2/a;\n         if(fabs(x[0])>xi)\n         {\n             printf(\"x1=x2=%.5lf\",x[0]);\n         }\n         else\n         {\n             printf(\"x1=x2=%.5lf\",0);//如果x超出设定精度，此时x约等于零，当做x等于零。\n         }\n     }\n     if(dt>xiao)\n     {\n         x[0]=(-b+sqrt(dt))/2/a;\n         if(fabs(x[0])<xi)\n         {\n             x[0]=fabs(x[0]);//如果x超出设定精度，此时x会被视为-0，要加绝对值\n         }\n         x[1]=(-b-sqrt(dt))/2/a;\n         if(fabs(x[1])<xi)\n         {\n             x[1]=fabs(x[1]);//同上\n         }\n         sort(x,x+2);\n         printf(\"x1=%.5lf;x2=%.5lf\",x[0],x[1]);\n     }\n     return 0;\n }\n```\n\n","source":"_posts/一本通题库1058：求一元二次方程.md","raw":"---\ntitle: 一本通题库1058：求一元二次方程\ndate: 2020-01-19\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%8813.php   \ntags: \n    - C++一本通题库\n    - 数论\n---\n　　其实在这一章里面大部分的题做的都是很顺畅的，直到遇到了最后一个题也就是这个解一元二次方程组的题。这个题打眼一看其实挺简单的，只是要考虑三种情况∆<0,∆>0,∆=0;可是实际操作时发现远不止这么简单。这个题一开始我提交了一次有检查了一遍，结果把错误改好后发现总是有一个检查点错误。从网上搜索后才发现，c++有一个精度问题当读取的数字<strong>超出设定精度时，会读取为-0.这就要求我们在程序中要考虑超出设定精度的情况。</strong>\n\n判断精度时，因为∆有正有负，所以要用到绝对值。我们平常用的绝对值都是abs（），而因为这里是小数，所以要用到小数的取绝对值函数fabs（）\n\n**通过完成这个题，我真是学到了不少我以前没想过的知识。**\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define xiao 0.000000000001//设定delta的精度，可根据需要更改\n#define xi 0.000001 //设定x的精度（因为delta要开方，精度会减小，所以x的精度判断也要减小。）  \n\nint main()   \n{   \n     double a,b,c,x[2],dt;  \n     cin>>a>>b>>c;  \n     dt=b*b-4*a*c; \n     if(dt<0&&fabs(dt)>xiao)//判断delta是否小于零\n\t {\n         cout<<\"No answer!\";\n         return 12;\n     }\n     else if(fabs(dt)<xiao)//如果delta小于设定精度，此时delta约等于零，当做delta等于零。\n     {\n         x[0]=(-b)/2/a;\n         if(fabs(x[0])>xi)\n         {\n             printf(\"x1=x2=%.5lf\",x[0]);\n         }\n         else\n         {\n             printf(\"x1=x2=%.5lf\",0);//如果x超出设定精度，此时x约等于零，当做x等于零。\n         }\n     }\n     if(dt>xiao)\n     {\n         x[0]=(-b+sqrt(dt))/2/a;\n         if(fabs(x[0])<xi)\n         {\n             x[0]=fabs(x[0]);//如果x超出设定精度，此时x会被视为-0，要加绝对值\n         }\n         x[1]=(-b-sqrt(dt))/2/a;\n         if(fabs(x[1])<xi)\n         {\n             x[1]=fabs(x[1]);//同上\n         }\n         sort(x,x+2);\n         printf(\"x1=%.5lf;x2=%.5lf\",x[0],x[1]);\n     }\n     return 0;\n }\n```\n\n","slug":"一本通题库1058：求一元二次方程","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2mm000ypb0y9oxt67eb","content":"<p>　　其实在这一章里面大部分的题做的都是很顺畅的，直到遇到了最后一个题也就是这个解一元二次方程组的题。这个题打眼一看其实挺简单的，只是要考虑三种情况∆&lt;0,∆&gt;0,∆=0;可是实际操作时发现远不止这么简单。这个题一开始我提交了一次有检查了一遍，结果把错误改好后发现总是有一个检查点错误。从网上搜索后才发现，c++有一个精度问题当读取的数字<strong>超出设定精度时，会读取为-0.这就要求我们在程序中要考虑超出设定精度的情况。</strong></p>\n<p>判断精度时，因为∆有正有负，所以要用到绝对值。我们平常用的绝对值都是abs（），而因为这里是小数，所以要用到小数的取绝对值函数fabs（）</p>\n<p><strong>通过完成这个题，我真是学到了不少我以前没想过的知识。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> xiao 0.000000000001<span class=\"comment\">//设定delta的精度，可根据需要更改</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> xi 0.000001 <span class=\"comment\">//设定x的精度（因为delta要开方，精度会减小，所以x的精度判断也要减小。）  </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>   </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   </span><br><span class=\"line\">     <span class=\"keyword\">double</span> a,b,c,x[<span class=\"number\">2</span>],dt;  </span><br><span class=\"line\">     <span class=\"built_in\">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;  </span><br><span class=\"line\">     dt=b*b<span class=\"number\">-4</span>*a*c; </span><br><span class=\"line\">     <span class=\"keyword\">if</span>(dt&lt;<span class=\"number\">0</span>&amp;&amp;<span class=\"built_in\">fabs</span>(dt)&gt;xiao)<span class=\"comment\">//判断delta是否小于零</span></span><br><span class=\"line\">\t &#123;</span><br><span class=\"line\">         <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;No answer!&quot;</span>;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">12</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(dt)&lt;xiao)<span class=\"comment\">//如果delta小于设定精度，此时delta约等于零，当做delta等于零。</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         x[<span class=\"number\">0</span>]=(-b)/<span class=\"number\">2</span>/a;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(x[<span class=\"number\">0</span>])&gt;xi)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;x1=x2=%.5lf&quot;</span>,x[<span class=\"number\">0</span>]);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;x1=x2=%.5lf&quot;</span>,<span class=\"number\">0</span>);<span class=\"comment\">//如果x超出设定精度，此时x约等于零，当做x等于零。</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(dt&gt;xiao)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         x[<span class=\"number\">0</span>]=(-b+<span class=\"built_in\">sqrt</span>(dt))/<span class=\"number\">2</span>/a;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(x[<span class=\"number\">0</span>])&lt;xi)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             x[<span class=\"number\">0</span>]=<span class=\"built_in\">fabs</span>(x[<span class=\"number\">0</span>]);<span class=\"comment\">//如果x超出设定精度，此时x会被视为-0，要加绝对值</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         x[<span class=\"number\">1</span>]=(-b-<span class=\"built_in\">sqrt</span>(dt))/<span class=\"number\">2</span>/a;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(x[<span class=\"number\">1</span>])&lt;xi)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             x[<span class=\"number\">1</span>]=<span class=\"built_in\">fabs</span>(x[<span class=\"number\">1</span>]);<span class=\"comment\">//同上</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         sort(x,x+<span class=\"number\">2</span>);</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;x1=%.5lf;x2=%.5lf&quot;</span>,x[<span class=\"number\">0</span>],x[<span class=\"number\">1</span>]);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>　　其实在这一章里面大部分的题做的都是很顺畅的，直到遇到了最后一个题也就是这个解一元二次方程组的题。这个题打眼一看其实挺简单的，只是要考虑三种情况∆&lt;0,∆&gt;0,∆=0;可是实际操作时发现远不止这么简单。这个题一开始我提交了一次有检查了一遍，结果把错误改好后发现总是有一个检查点错误。从网上搜索后才发现，c++有一个精度问题当读取的数字<strong>超出设定精度时，会读取为-0.这就要求我们在程序中要考虑超出设定精度的情况。</strong></p>\n<p>判断精度时，因为∆有正有负，所以要用到绝对值。我们平常用的绝对值都是abs（），而因为这里是小数，所以要用到小数的取绝对值函数fabs（）</p>\n<p><strong>通过完成这个题，我真是学到了不少我以前没想过的知识。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> xiao 0.000000000001<span class=\"comment\">//设定delta的精度，可根据需要更改</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> xi 0.000001 <span class=\"comment\">//设定x的精度（因为delta要开方，精度会减小，所以x的精度判断也要减小。）  </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>   </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   </span><br><span class=\"line\">     <span class=\"keyword\">double</span> a,b,c,x[<span class=\"number\">2</span>],dt;  </span><br><span class=\"line\">     <span class=\"built_in\">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;  </span><br><span class=\"line\">     dt=b*b<span class=\"number\">-4</span>*a*c; </span><br><span class=\"line\">     <span class=\"keyword\">if</span>(dt&lt;<span class=\"number\">0</span>&amp;&amp;<span class=\"built_in\">fabs</span>(dt)&gt;xiao)<span class=\"comment\">//判断delta是否小于零</span></span><br><span class=\"line\">\t &#123;</span><br><span class=\"line\">         <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;No answer!&quot;</span>;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">12</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(dt)&lt;xiao)<span class=\"comment\">//如果delta小于设定精度，此时delta约等于零，当做delta等于零。</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         x[<span class=\"number\">0</span>]=(-b)/<span class=\"number\">2</span>/a;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(x[<span class=\"number\">0</span>])&gt;xi)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;x1=x2=%.5lf&quot;</span>,x[<span class=\"number\">0</span>]);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;x1=x2=%.5lf&quot;</span>,<span class=\"number\">0</span>);<span class=\"comment\">//如果x超出设定精度，此时x约等于零，当做x等于零。</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(dt&gt;xiao)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         x[<span class=\"number\">0</span>]=(-b+<span class=\"built_in\">sqrt</span>(dt))/<span class=\"number\">2</span>/a;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(x[<span class=\"number\">0</span>])&lt;xi)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             x[<span class=\"number\">0</span>]=<span class=\"built_in\">fabs</span>(x[<span class=\"number\">0</span>]);<span class=\"comment\">//如果x超出设定精度，此时x会被视为-0，要加绝对值</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         x[<span class=\"number\">1</span>]=(-b-<span class=\"built_in\">sqrt</span>(dt))/<span class=\"number\">2</span>/a;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(x[<span class=\"number\">1</span>])&lt;xi)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             x[<span class=\"number\">1</span>]=<span class=\"built_in\">fabs</span>(x[<span class=\"number\">1</span>]);<span class=\"comment\">//同上</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         sort(x,x+<span class=\"number\">2</span>);</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;x1=%.5lf;x2=%.5lf&quot;</span>,x[<span class=\"number\">0</span>],x[<span class=\"number\">1</span>]);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"char*,const char*,string的转换","date":"2020-07-17T14:13:27.000Z","updated":"2021-02-24T00:52:00.000Z","description":"关于char*,const char*,string之间的转换。","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://tvax1.sinaimg.cn/large/0072Vf1pgy1foxkfz74phj31hc0u0qht.jpg","_content":"\n# 思考起因\n\n这其实又是一篇主要记录过程的博客。\n\n这次引起我对这一块内容的思考的是我自己出的一道题。但是因为这道题以后可能要用于考试，所以暂时不公布具体题目。\n\n总之，在做这道题的时候，又用到了我上次说到的运算符重载。\n\n可是，这次要计算的数字极其巨大，很可能会爆`string`。\n\n所以我这次只好使用`char*`来重载运算符。\n\n由于直接使用`char*`运算，在最后不容易把各位合起来（速度较慢），所以我只好选择在合并时，先使用string储存，再把多个string合并到一个`char*`中。\n\n这样，就会涉及到`string`与`char*`之间的转换。\n\n# 过程\n\n我以前从来没有使用过`string`到`char*`的转换，对这一块非常不熟悉。于是便去网上搜。\n\n先是看到了这个：\n\n```cpp\nstring str;\nchar* charstr;\ncharstr=str.c_str();\n```\n\n发现并不能解决问题。\n\nIDE给我的提示是不能使用`const char*`赋值给`char*`。\n\n自然想到了可以这样：\n\n```cpp\nstring str;\nchar* charstr;\ncharstr=(char*)str.c_str();\n```\n\n这一次虽然IDE并没有说我语法错误，可是实际效果是仍无法赋值。\n\n从网上又发现了这样的一个函数：\n\n```cpp\nstr.data()\n```\n\n这个函数返回的是一个`string`除了末尾的`‘\\0’`之外的字符串。\n\n结果使用之后仍然是返回的`const char*`，无法赋值。\n\n后来我又从网上的一篇博客中意识到了`const char*`无法给`char*`赋值的原因：\n\n因为`const char*`和`char*`都是指针，如果赋值的话，`char*`也会指向`const char*`，这样就会造成`const char*` 的值被`char*`改变。\n\n所以，想使用`const char*`给`char*`赋值，其实是不可能的。\n\n但是有一个函数：\n\n```cpp\nstrcpy()\n```\n\n所以我们就可以在定义`char*`的时候先new出来一块新的空间，然后再`strcpy`一下即可。\n\n这样问题就解决了。\n\n（虽然看起来很简单，但是我调试了将近一天的时间）\n\n# 结果\n\n所以我们使用`string`转换为`char*`的时候，只需要先写一个`c_str()`，然后再使用`strcpy()`复制即可。","source":"_posts/char-const-char-string的转换.md","raw":"---\ntitle: char*,const char*,string的转换\ndate: 2020-07-17 22:13:27\nupdated: \ntags: \t\n\t- C++基础\n\t- 字符串\ncategories: C++基础\ndescription: 关于char*,const char*,string之间的转换。\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://tvax1.sinaimg.cn/large/0072Vf1pgy1foxkfz74phj31hc0u0qht.jpg\n---\n\n# 思考起因\n\n这其实又是一篇主要记录过程的博客。\n\n这次引起我对这一块内容的思考的是我自己出的一道题。但是因为这道题以后可能要用于考试，所以暂时不公布具体题目。\n\n总之，在做这道题的时候，又用到了我上次说到的运算符重载。\n\n可是，这次要计算的数字极其巨大，很可能会爆`string`。\n\n所以我这次只好使用`char*`来重载运算符。\n\n由于直接使用`char*`运算，在最后不容易把各位合起来（速度较慢），所以我只好选择在合并时，先使用string储存，再把多个string合并到一个`char*`中。\n\n这样，就会涉及到`string`与`char*`之间的转换。\n\n# 过程\n\n我以前从来没有使用过`string`到`char*`的转换，对这一块非常不熟悉。于是便去网上搜。\n\n先是看到了这个：\n\n```cpp\nstring str;\nchar* charstr;\ncharstr=str.c_str();\n```\n\n发现并不能解决问题。\n\nIDE给我的提示是不能使用`const char*`赋值给`char*`。\n\n自然想到了可以这样：\n\n```cpp\nstring str;\nchar* charstr;\ncharstr=(char*)str.c_str();\n```\n\n这一次虽然IDE并没有说我语法错误，可是实际效果是仍无法赋值。\n\n从网上又发现了这样的一个函数：\n\n```cpp\nstr.data()\n```\n\n这个函数返回的是一个`string`除了末尾的`‘\\0’`之外的字符串。\n\n结果使用之后仍然是返回的`const char*`，无法赋值。\n\n后来我又从网上的一篇博客中意识到了`const char*`无法给`char*`赋值的原因：\n\n因为`const char*`和`char*`都是指针，如果赋值的话，`char*`也会指向`const char*`，这样就会造成`const char*` 的值被`char*`改变。\n\n所以，想使用`const char*`给`char*`赋值，其实是不可能的。\n\n但是有一个函数：\n\n```cpp\nstrcpy()\n```\n\n所以我们就可以在定义`char*`的时候先new出来一块新的空间，然后再`strcpy`一下即可。\n\n这样问题就解决了。\n\n（虽然看起来很简单，但是我调试了将近一天的时间）\n\n# 结果\n\n所以我们使用`string`转换为`char*`的时候，只需要先写一个`c_str()`，然后再使用`strcpy()`复制即可。","slug":"char-const-char-string的转换","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2mo0011pb0yayyg2wub","content":"<h1 id=\"思考起因\"><a href=\"#思考起因\" class=\"headerlink\" title=\"思考起因\"></a>思考起因</h1><p>这其实又是一篇主要记录过程的博客。</p>\n<p>这次引起我对这一块内容的思考的是我自己出的一道题。但是因为这道题以后可能要用于考试，所以暂时不公布具体题目。</p>\n<p>总之，在做这道题的时候，又用到了我上次说到的运算符重载。</p>\n<p>可是，这次要计算的数字极其巨大，很可能会爆<code>string</code>。</p>\n<p>所以我这次只好使用<code>char*</code>来重载运算符。</p>\n<p>由于直接使用<code>char*</code>运算，在最后不容易把各位合起来（速度较慢），所以我只好选择在合并时，先使用string储存，再把多个string合并到一个<code>char*</code>中。</p>\n<p>这样，就会涉及到<code>string</code>与<code>char*</code>之间的转换。</p>\n<h1 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h1><p>我以前从来没有使用过<code>string</code>到<code>char*</code>的转换，对这一块非常不熟悉。于是便去网上搜。</p>\n<p>先是看到了这个：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str;</span><br><span class=\"line\"><span class=\"keyword\">char</span>* charstr;</span><br><span class=\"line\">charstr=str.c_str();</span><br></pre></td></tr></table></figure>\n\n<p>发现并不能解决问题。</p>\n<p>IDE给我的提示是不能使用<code>const char*</code>赋值给<code>char*</code>。</p>\n<p>自然想到了可以这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str;</span><br><span class=\"line\"><span class=\"keyword\">char</span>* charstr;</span><br><span class=\"line\">charstr=(<span class=\"keyword\">char</span>*)str.c_str();</span><br></pre></td></tr></table></figure>\n\n<p>这一次虽然IDE并没有说我语法错误，可是实际效果是仍无法赋值。</p>\n<p>从网上又发现了这样的一个函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.data()</span><br></pre></td></tr></table></figure>\n\n<p>这个函数返回的是一个<code>string</code>除了末尾的<code>‘\\0’</code>之外的字符串。</p>\n<p>结果使用之后仍然是返回的<code>const char*</code>，无法赋值。</p>\n<p>后来我又从网上的一篇博客中意识到了<code>const char*</code>无法给<code>char*</code>赋值的原因：</p>\n<p>因为<code>const char*</code>和<code>char*</code>都是指针，如果赋值的话，<code>char*</code>也会指向<code>const char*</code>，这样就会造成<code>const char*</code> 的值被<code>char*</code>改变。</p>\n<p>所以，想使用<code>const char*</code>给<code>char*</code>赋值，其实是不可能的。</p>\n<p>但是有一个函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">strcpy</span>()</span><br></pre></td></tr></table></figure>\n\n<p>所以我们就可以在定义<code>char*</code>的时候先new出来一块新的空间，然后再<code>strcpy</code>一下即可。</p>\n<p>这样问题就解决了。</p>\n<p>（虽然看起来很简单，但是我调试了将近一天的时间）</p>\n<h1 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h1><p>所以我们使用<code>string</code>转换为<code>char*</code>的时候，只需要先写一个<code>c_str()</code>，然后再使用<code>strcpy()</code>复制即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"思考起因\"><a href=\"#思考起因\" class=\"headerlink\" title=\"思考起因\"></a>思考起因</h1><p>这其实又是一篇主要记录过程的博客。</p>\n<p>这次引起我对这一块内容的思考的是我自己出的一道题。但是因为这道题以后可能要用于考试，所以暂时不公布具体题目。</p>\n<p>总之，在做这道题的时候，又用到了我上次说到的运算符重载。</p>\n<p>可是，这次要计算的数字极其巨大，很可能会爆<code>string</code>。</p>\n<p>所以我这次只好使用<code>char*</code>来重载运算符。</p>\n<p>由于直接使用<code>char*</code>运算，在最后不容易把各位合起来（速度较慢），所以我只好选择在合并时，先使用string储存，再把多个string合并到一个<code>char*</code>中。</p>\n<p>这样，就会涉及到<code>string</code>与<code>char*</code>之间的转换。</p>\n<h1 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h1><p>我以前从来没有使用过<code>string</code>到<code>char*</code>的转换，对这一块非常不熟悉。于是便去网上搜。</p>\n<p>先是看到了这个：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str;</span><br><span class=\"line\"><span class=\"keyword\">char</span>* charstr;</span><br><span class=\"line\">charstr=str.c_str();</span><br></pre></td></tr></table></figure>\n\n<p>发现并不能解决问题。</p>\n<p>IDE给我的提示是不能使用<code>const char*</code>赋值给<code>char*</code>。</p>\n<p>自然想到了可以这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str;</span><br><span class=\"line\"><span class=\"keyword\">char</span>* charstr;</span><br><span class=\"line\">charstr=(<span class=\"keyword\">char</span>*)str.c_str();</span><br></pre></td></tr></table></figure>\n\n<p>这一次虽然IDE并没有说我语法错误，可是实际效果是仍无法赋值。</p>\n<p>从网上又发现了这样的一个函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.data()</span><br></pre></td></tr></table></figure>\n\n<p>这个函数返回的是一个<code>string</code>除了末尾的<code>‘\\0’</code>之外的字符串。</p>\n<p>结果使用之后仍然是返回的<code>const char*</code>，无法赋值。</p>\n<p>后来我又从网上的一篇博客中意识到了<code>const char*</code>无法给<code>char*</code>赋值的原因：</p>\n<p>因为<code>const char*</code>和<code>char*</code>都是指针，如果赋值的话，<code>char*</code>也会指向<code>const char*</code>，这样就会造成<code>const char*</code> 的值被<code>char*</code>改变。</p>\n<p>所以，想使用<code>const char*</code>给<code>char*</code>赋值，其实是不可能的。</p>\n<p>但是有一个函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">strcpy</span>()</span><br></pre></td></tr></table></figure>\n\n<p>所以我们就可以在定义<code>char*</code>的时候先new出来一块新的空间，然后再<code>strcpy</code>一下即可。</p>\n<p>这样问题就解决了。</p>\n<p>（虽然看起来很简单，但是我调试了将近一天的时间）</p>\n<h1 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h1><p>所以我们使用<code>string</code>转换为<code>char*</code>的时候，只需要先写一个<code>c_str()</code>，然后再使用<code>strcpy()</code>复制即可。</p>\n"},{"title":"关于C++读入数字按位取出与进制转换问题","date":"2020-01-26T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%887.php","_content":"这一片博客我就不写具体的一个题了，只是总结一种典型问题读入数字按位取出。\n\n就拿数字12345举例吧。\n\n是首先，我们要取出个位。这样取出：\n\n```cpp\n12345/1=12345\n\n12345%10=5.     //为了好发现规律\n```\n\n这样我们就有了它的个位。十位是这样：\n\n```\n12345/10=1234\n\n1234%10=4.\n```\n\n同理，百位：\n\n```cpp\n12345/100=123\n\n123%10=3.\n```\n\n于是可以发现，取出哪一位，就是要先将原数除以这一位的位名，再模10.\n\n程序：\n\n```cpp\n#include<iostream>\n#include<cmath>\nusing namespace std;\nint main()\n{\n    int a[100];\n    int wei = 0;\n    int num;\n    cin >> num;\n    while ((num / (int)pow(10, wei)) != 0)        //循环终止条件是这个数的位数小于这一次要除以的数的位数\n    {\n        a[wei] =(num/(int)pow(10,wei))%10;        //根据刚才得出的结论，取出各位，存到数组中。\n        wei++;    \n    }\n}\n```\n\n然后是进制转换问题。其实和取位问题差不多，只不过取出之后要乘上这一位对应的进制的次方数。\n\n程序：\n\n```cpp\nlong long to10(int jz,int num)//功能：将输入的数转换成十进制 \n{    \n    long long result=0;\n    int wei=0;\n    while(num/(int)pow(10,wei)!=0)//将输入的数按位取出 \n    {\n        result+=pow(jz,wei)*((int)(num/pow(10,wei))%10);//按数所在的位置乘上对应的进制的次方 \n        wei++;\n//        (num/1)%10\n//        (num/10)%10\n//        (num/100)%10\n    }\n    return result;\n } \n```\n\n","source":"_posts/关于C++读入数字按位取出与进制转换问题.md","raw":"---\ntitle: 关于C++读入数字按位取出与进制转换问题\ndate: 2020-01-27\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%887.php   \ntags: \n    - 数论\n    - 算法概述\n---\n这一片博客我就不写具体的一个题了，只是总结一种典型问题读入数字按位取出。\n\n就拿数字12345举例吧。\n\n是首先，我们要取出个位。这样取出：\n\n```cpp\n12345/1=12345\n\n12345%10=5.     //为了好发现规律\n```\n\n这样我们就有了它的个位。十位是这样：\n\n```\n12345/10=1234\n\n1234%10=4.\n```\n\n同理，百位：\n\n```cpp\n12345/100=123\n\n123%10=3.\n```\n\n于是可以发现，取出哪一位，就是要先将原数除以这一位的位名，再模10.\n\n程序：\n\n```cpp\n#include<iostream>\n#include<cmath>\nusing namespace std;\nint main()\n{\n    int a[100];\n    int wei = 0;\n    int num;\n    cin >> num;\n    while ((num / (int)pow(10, wei)) != 0)        //循环终止条件是这个数的位数小于这一次要除以的数的位数\n    {\n        a[wei] =(num/(int)pow(10,wei))%10;        //根据刚才得出的结论，取出各位，存到数组中。\n        wei++;    \n    }\n}\n```\n\n然后是进制转换问题。其实和取位问题差不多，只不过取出之后要乘上这一位对应的进制的次方数。\n\n程序：\n\n```cpp\nlong long to10(int jz,int num)//功能：将输入的数转换成十进制 \n{    \n    long long result=0;\n    int wei=0;\n    while(num/(int)pow(10,wei)!=0)//将输入的数按位取出 \n    {\n        result+=pow(jz,wei)*((int)(num/pow(10,wei))%10);//按数所在的位置乘上对应的进制的次方 \n        wei++;\n//        (num/1)%10\n//        (num/10)%10\n//        (num/100)%10\n    }\n    return result;\n } \n```\n\n","slug":"关于C++读入数字按位取出与进制转换问题","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2mp0012pb0y519g0krn","content":"<p>这一片博客我就不写具体的一个题了，只是总结一种典型问题读入数字按位取出。</p>\n<p>就拿数字12345举例吧。</p>\n<p>是首先，我们要取出个位。这样取出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12345</span>/<span class=\"number\">1</span>=<span class=\"number\">12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12345</span>%<span class=\"number\">10</span>=<span class=\"number\">5.</span>     <span class=\"comment\">//为了好发现规律</span></span><br></pre></td></tr></table></figure>\n\n<p>这样我们就有了它的个位。十位是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12345&#x2F;10&#x3D;1234</span><br><span class=\"line\"></span><br><span class=\"line\">1234%10&#x3D;4.</span><br></pre></td></tr></table></figure>\n\n<p>同理，百位：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12345</span>/<span class=\"number\">100</span>=<span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">123</span>%<span class=\"number\">10</span>=<span class=\"number\">3.</span></span><br></pre></td></tr></table></figure>\n\n<p>于是可以发现，取出哪一位，就是要先将原数除以这一位的位名，再模10.</p>\n<p>程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> wei = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; num;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((num / (<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, wei)) != <span class=\"number\">0</span>)        <span class=\"comment\">//循环终止条件是这个数的位数小于这一次要除以的数的位数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[wei] =(num/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,wei))%<span class=\"number\">10</span>;        <span class=\"comment\">//根据刚才得出的结论，取出各位，存到数组中。</span></span><br><span class=\"line\">        wei++;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后是进制转换问题。其实和取位问题差不多，只不过取出之后要乘上这一位对应的进制的次方数。</p>\n<p>程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">to10</span><span class=\"params\">(<span class=\"keyword\">int</span> jz,<span class=\"keyword\">int</span> num)</span><span class=\"comment\">//功能：将输入的数转换成十进制 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> wei=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(num/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,wei)!=<span class=\"number\">0</span>)<span class=\"comment\">//将输入的数按位取出 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result+=<span class=\"built_in\">pow</span>(jz,wei)*((<span class=\"keyword\">int</span>)(num/<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,wei))%<span class=\"number\">10</span>);<span class=\"comment\">//按数所在的位置乘上对应的进制的次方 </span></span><br><span class=\"line\">        wei++;</span><br><span class=\"line\"><span class=\"comment\">//        (num/1)%10</span></span><br><span class=\"line\"><span class=\"comment\">//        (num/10)%10</span></span><br><span class=\"line\"><span class=\"comment\">//        (num/100)%10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>这一片博客我就不写具体的一个题了，只是总结一种典型问题读入数字按位取出。</p>\n<p>就拿数字12345举例吧。</p>\n<p>是首先，我们要取出个位。这样取出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12345</span>/<span class=\"number\">1</span>=<span class=\"number\">12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12345</span>%<span class=\"number\">10</span>=<span class=\"number\">5.</span>     <span class=\"comment\">//为了好发现规律</span></span><br></pre></td></tr></table></figure>\n\n<p>这样我们就有了它的个位。十位是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12345&#x2F;10&#x3D;1234</span><br><span class=\"line\"></span><br><span class=\"line\">1234%10&#x3D;4.</span><br></pre></td></tr></table></figure>\n\n<p>同理，百位：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12345</span>/<span class=\"number\">100</span>=<span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">123</span>%<span class=\"number\">10</span>=<span class=\"number\">3.</span></span><br></pre></td></tr></table></figure>\n\n<p>于是可以发现，取出哪一位，就是要先将原数除以这一位的位名，再模10.</p>\n<p>程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> wei = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; num;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((num / (<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, wei)) != <span class=\"number\">0</span>)        <span class=\"comment\">//循环终止条件是这个数的位数小于这一次要除以的数的位数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[wei] =(num/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,wei))%<span class=\"number\">10</span>;        <span class=\"comment\">//根据刚才得出的结论，取出各位，存到数组中。</span></span><br><span class=\"line\">        wei++;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后是进制转换问题。其实和取位问题差不多，只不过取出之后要乘上这一位对应的进制的次方数。</p>\n<p>程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">to10</span><span class=\"params\">(<span class=\"keyword\">int</span> jz,<span class=\"keyword\">int</span> num)</span><span class=\"comment\">//功能：将输入的数转换成十进制 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> wei=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(num/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,wei)!=<span class=\"number\">0</span>)<span class=\"comment\">//将输入的数按位取出 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result+=<span class=\"built_in\">pow</span>(jz,wei)*((<span class=\"keyword\">int</span>)(num/<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,wei))%<span class=\"number\">10</span>);<span class=\"comment\">//按数所在的位置乘上对应的进制的次方 </span></span><br><span class=\"line\">        wei++;</span><br><span class=\"line\"><span class=\"comment\">//        (num/1)%10</span></span><br><span class=\"line\"><span class=\"comment\">//        (num/10)%10</span></span><br><span class=\"line\"><span class=\"comment\">//        (num/100)%10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n\n"},{"title":"关于class","date":"2020-07-29T14:39:22.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://tvax3.sinaimg.cn/large/0072Vf1pgy1fodqpglwr2j312w0rnx6p.jpg","description":"关于class的一些基础介绍。","_content":"# 首先\n关于`class`，许多`OIer`便会认为这是一种非常高深的语法，我们无论是现在还是以后的`OI`学习中都用不到。\n\n确实，`class`在`OI`比赛中可以永远不用。\n\n可是，如果这么说的话，除了递归之外，其他函数也可以在`OI`比赛中永远不使用。可是，那我们使用它的原因是什么呢？\n\n对，是因为它可以使程序编写更加容易。\n\n众所周知，`C++`相较于`C`，主要的区别就是在于`C++`增加了关于面向对象的支持，和`STL`。由于我们一般并不去使用面向对象，所以我们学习的语言被戏称为`\"C with STL\"`。\n\n但是，学习面向对象的基本思想，和有关面向对象的基本语法，真的可以让我们对`C++`语言的认识提升一个档次。\n\n# class是什么？\n其实，我们在使用`struct`的时候，就已经对面向对象有了初步的认识。\n\n`struct`其实就相当于是这样：\n\n```cpp\nstruct Node\n{\n    int x;\n    int y;\n    int value;\n}\n```\n相当于：\n```cpp\nclass Node\n{\n    public:\n    int x;\n    int y;\n    int value;\n}\n```\n没错，也就是说，`struct`就相当于是一个全部都是`public`的`class`。\n\n说到这里，读者对`class`的望而生畏的感觉应当减少了一些。\n\n但是很显然，`class`远远不只有这一点点用处。\n\n# class\n`class`的基本用法：\n```cpp\nclass a_class\n{\n    private:\n\n    public:\n\n}\n```\n可以看出，这个`class`比刚才的那一个多出了一个`private:`。\n\n那这个`private`有什么用处呢？\n\n在`private`内部的函数，只能在类的内部访问，在外部无论通过什么方法也是无法直接访问的。\n\n在调用类的时候，只能使用`public`内部的函数。\n\n这样就有了一个好处：\n\n我们在使用一个类的时候，不需要管它内部是怎样实现的，只需要调用在`public`中的函数接口即可。\n\n这样，虽然我们再写类的时候要仔细思考接口怎样编写比较方便，但是大大减少了我们在写类外部代码时的思维量。\n\n而毕竟写类只需要写一次，调用可能需奥很多很多次，所以我们总体的思维量还是会有所下降。\n\n# 范例\n（下面是我自己在考试的时候写的矩阵快速幂代码：~~其实本来只是想秀给CYC看的~~）\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nclass martix\n{\nprivate:\n\tlong long nums[6][6];\n\tclear()\n\t{\n\t\tmemset(nums,0,sizeof(nums));\n\t}\n\tmake_standard()\n\t{\n\t\tmemset(nums,0,sizeof(nums));\n\t\tfor(int i=1;i<=5;i++)\n\t\t{\n\t\t\tnums[i][i]=1;\n\t\t}\n\t}\npublic:\n\tmartix()\n\t{\n\t\tclear();\n\t}\n\tmartix operator*(martix b)\n\t{\n\t\tmartix result;\n\t\tfor(int i=1;i<=3;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=3;j++)\n\t\t\t{\n\t\t\t\tfor(int k=1;k<=3;k++)\n\t\t\t\t{\n\t\t\t\t\tresult.nums[i][j]+=nums[i][k]*b.nums[k][j]%1000000007;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tmartix quick_pow(long long k)\n\t{\n\t\tmartix result;\n\t\tresult.make_standard();\n\t\tmartix base;\n\t\tfor(register int i=1;i<=5;i++)\n\t\t{\n\t\t\tfor(register int j=1;j<=5;j++)\n\t\t\t{\n\t\t\t\tbase.nums[i][j]=nums[i][j];\n\t\t\t}\n\t\t}\n\t\twhile(k)\n\t\t{\n\t\t\tif(k&1)\n\t\t\t{\n\t\t\t\tresult=result*base;\n\t\t\t}\n\t\t\tk>>=1;\n\t\t\tbase=base*base;\n\t\t}\n\t\treturn result;\n\t}\n\tvoid make_fib()\n\t{\n\t\tnums[1][1]=1;\n\t\tnums[1][2]=1;\n\t\tnums[1][3]=1;\n\t}\n\tvoid make_base()\n\t{\n\t\tnums[1][1]=1;\n\t\tnums[1][2]=1;\n\t\tnums[2][1]=0;\n\t\tnums[2][2]=0;\n\t\tnums[3][1]=1;\n\t\tnums[3][2]=0;\n\t\tnums[2][3]=1;\n\t\tnums[1][3]=0;\n\t}\n\tvoid print()\n\t{\n\t\tprintf(\"%I64d\\n\",nums[1][3]%1000000007);\n\t}\n};\n\nconst int maxn=2e7+90;\nmartix fib;\nmartix base;\nint T;\n\nint main()\n{\n\tfreopen(\"seq.in\",\"r\",stdin);\n\tfreopen(\"seq.out\",\"w\",stdout);\n\tcin>>T;\n\tint temp;\n\tfor(int i=1;i<=T;i++)\n\t{\n\t\tcin>>temp;\n\t\tfib.make_fib();\n\t\tbase.make_base();\n\t\tfib=fib*base.quick_pow(temp-1);\n\t\tfib.print();\n\t}\n\treturn 0;\n}\n\n```\n本文目前只是写了一丁点皮毛。以后应该会持续更新。","source":"_posts/关于class.md","raw":"---\ntitle: 关于class\ndate: 2020-07-29 22:39:22\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://tvax3.sinaimg.cn/large/0072Vf1pgy1fodqpglwr2j312w0rnx6p.jpg\ntags: \n    - C++基础\ndescription: 关于class的一些基础介绍。\n---\n# 首先\n关于`class`，许多`OIer`便会认为这是一种非常高深的语法，我们无论是现在还是以后的`OI`学习中都用不到。\n\n确实，`class`在`OI`比赛中可以永远不用。\n\n可是，如果这么说的话，除了递归之外，其他函数也可以在`OI`比赛中永远不使用。可是，那我们使用它的原因是什么呢？\n\n对，是因为它可以使程序编写更加容易。\n\n众所周知，`C++`相较于`C`，主要的区别就是在于`C++`增加了关于面向对象的支持，和`STL`。由于我们一般并不去使用面向对象，所以我们学习的语言被戏称为`\"C with STL\"`。\n\n但是，学习面向对象的基本思想，和有关面向对象的基本语法，真的可以让我们对`C++`语言的认识提升一个档次。\n\n# class是什么？\n其实，我们在使用`struct`的时候，就已经对面向对象有了初步的认识。\n\n`struct`其实就相当于是这样：\n\n```cpp\nstruct Node\n{\n    int x;\n    int y;\n    int value;\n}\n```\n相当于：\n```cpp\nclass Node\n{\n    public:\n    int x;\n    int y;\n    int value;\n}\n```\n没错，也就是说，`struct`就相当于是一个全部都是`public`的`class`。\n\n说到这里，读者对`class`的望而生畏的感觉应当减少了一些。\n\n但是很显然，`class`远远不只有这一点点用处。\n\n# class\n`class`的基本用法：\n```cpp\nclass a_class\n{\n    private:\n\n    public:\n\n}\n```\n可以看出，这个`class`比刚才的那一个多出了一个`private:`。\n\n那这个`private`有什么用处呢？\n\n在`private`内部的函数，只能在类的内部访问，在外部无论通过什么方法也是无法直接访问的。\n\n在调用类的时候，只能使用`public`内部的函数。\n\n这样就有了一个好处：\n\n我们在使用一个类的时候，不需要管它内部是怎样实现的，只需要调用在`public`中的函数接口即可。\n\n这样，虽然我们再写类的时候要仔细思考接口怎样编写比较方便，但是大大减少了我们在写类外部代码时的思维量。\n\n而毕竟写类只需要写一次，调用可能需奥很多很多次，所以我们总体的思维量还是会有所下降。\n\n# 范例\n（下面是我自己在考试的时候写的矩阵快速幂代码：~~其实本来只是想秀给CYC看的~~）\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nclass martix\n{\nprivate:\n\tlong long nums[6][6];\n\tclear()\n\t{\n\t\tmemset(nums,0,sizeof(nums));\n\t}\n\tmake_standard()\n\t{\n\t\tmemset(nums,0,sizeof(nums));\n\t\tfor(int i=1;i<=5;i++)\n\t\t{\n\t\t\tnums[i][i]=1;\n\t\t}\n\t}\npublic:\n\tmartix()\n\t{\n\t\tclear();\n\t}\n\tmartix operator*(martix b)\n\t{\n\t\tmartix result;\n\t\tfor(int i=1;i<=3;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=3;j++)\n\t\t\t{\n\t\t\t\tfor(int k=1;k<=3;k++)\n\t\t\t\t{\n\t\t\t\t\tresult.nums[i][j]+=nums[i][k]*b.nums[k][j]%1000000007;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tmartix quick_pow(long long k)\n\t{\n\t\tmartix result;\n\t\tresult.make_standard();\n\t\tmartix base;\n\t\tfor(register int i=1;i<=5;i++)\n\t\t{\n\t\t\tfor(register int j=1;j<=5;j++)\n\t\t\t{\n\t\t\t\tbase.nums[i][j]=nums[i][j];\n\t\t\t}\n\t\t}\n\t\twhile(k)\n\t\t{\n\t\t\tif(k&1)\n\t\t\t{\n\t\t\t\tresult=result*base;\n\t\t\t}\n\t\t\tk>>=1;\n\t\t\tbase=base*base;\n\t\t}\n\t\treturn result;\n\t}\n\tvoid make_fib()\n\t{\n\t\tnums[1][1]=1;\n\t\tnums[1][2]=1;\n\t\tnums[1][3]=1;\n\t}\n\tvoid make_base()\n\t{\n\t\tnums[1][1]=1;\n\t\tnums[1][2]=1;\n\t\tnums[2][1]=0;\n\t\tnums[2][2]=0;\n\t\tnums[3][1]=1;\n\t\tnums[3][2]=0;\n\t\tnums[2][3]=1;\n\t\tnums[1][3]=0;\n\t}\n\tvoid print()\n\t{\n\t\tprintf(\"%I64d\\n\",nums[1][3]%1000000007);\n\t}\n};\n\nconst int maxn=2e7+90;\nmartix fib;\nmartix base;\nint T;\n\nint main()\n{\n\tfreopen(\"seq.in\",\"r\",stdin);\n\tfreopen(\"seq.out\",\"w\",stdout);\n\tcin>>T;\n\tint temp;\n\tfor(int i=1;i<=T;i++)\n\t{\n\t\tcin>>temp;\n\t\tfib.make_fib();\n\t\tbase.make_base();\n\t\tfib=fib*base.quick_pow(temp-1);\n\t\tfib.print();\n\t}\n\treturn 0;\n}\n\n```\n本文目前只是写了一丁点皮毛。以后应该会持续更新。","slug":"关于class","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2mt0016pb0yfd50c3z3","content":"<h1 id=\"首先\"><a href=\"#首先\" class=\"headerlink\" title=\"首先\"></a>首先</h1><p>关于<code>class</code>，许多<code>OIer</code>便会认为这是一种非常高深的语法，我们无论是现在还是以后的<code>OI</code>学习中都用不到。</p>\n<p>确实，<code>class</code>在<code>OI</code>比赛中可以永远不用。</p>\n<p>可是，如果这么说的话，除了递归之外，其他函数也可以在<code>OI</code>比赛中永远不使用。可是，那我们使用它的原因是什么呢？</p>\n<p>对，是因为它可以使程序编写更加容易。</p>\n<p>众所周知，<code>C++</code>相较于<code>C</code>，主要的区别就是在于<code>C++</code>增加了关于面向对象的支持，和<code>STL</code>。由于我们一般并不去使用面向对象，所以我们学习的语言被戏称为<code>&quot;C with STL&quot;</code>。</p>\n<p>但是，学习面向对象的基本思想，和有关面向对象的基本语法，真的可以让我们对<code>C++</code>语言的认识提升一个档次。</p>\n<h1 id=\"class是什么？\"><a href=\"#class是什么？\" class=\"headerlink\" title=\"class是什么？\"></a>class是什么？</h1><p>其实，我们在使用<code>struct</code>的时候，就已经对面向对象有了初步的认识。</p>\n<p><code>struct</code>其实就相当于是这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相当于：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没错，也就是说，<code>struct</code>就相当于是一个全部都是<code>public</code>的<code>class</code>。</p>\n<p>说到这里，读者对<code>class</code>的望而生畏的感觉应当减少了一些。</p>\n<p>但是很显然，<code>class</code>远远不只有这一点点用处。</p>\n<h1 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h1><p><code>class</code>的基本用法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">a_class</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，这个<code>class</code>比刚才的那一个多出了一个<code>private:</code>。</p>\n<p>那这个<code>private</code>有什么用处呢？</p>\n<p>在<code>private</code>内部的函数，只能在类的内部访问，在外部无论通过什么方法也是无法直接访问的。</p>\n<p>在调用类的时候，只能使用<code>public</code>内部的函数。</p>\n<p>这样就有了一个好处：</p>\n<p>我们在使用一个类的时候，不需要管它内部是怎样实现的，只需要调用在<code>public</code>中的函数接口即可。</p>\n<p>这样，虽然我们再写类的时候要仔细思考接口怎样编写比较方便，但是大大减少了我们在写类外部代码时的思维量。</p>\n<p>而毕竟写类只需要写一次，调用可能需奥很多很多次，所以我们总体的思维量还是会有所下降。</p>\n<h1 id=\"范例\"><a href=\"#范例\" class=\"headerlink\" title=\"范例\"></a>范例</h1><p>（下面是我自己在考试的时候写的矩阵快速幂代码：<del>其实本来只是想秀给CYC看的</del>）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">martix</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> nums[<span class=\"number\">6</span>][<span class=\"number\">6</span>];</span><br><span class=\"line\">\tclear()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(nums,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(nums));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmake_standard()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(nums,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(nums));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnums[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tmartix()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tclear();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmartix <span class=\"keyword\">operator</span>*(martix b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmartix result;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">3</span>;j++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=<span class=\"number\">3</span>;k++)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tresult.nums[i][j]+=nums[i][k]*b.nums[k][j]%<span class=\"number\">1000000007</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\">martix <span class=\"title\">quick_pow</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tmartix result;</span><br><span class=\"line\">\t\tresult.make_standard();</span><br><span class=\"line\">\t\tmartix base;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">5</span>;j++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbase.nums[i][j]=nums[i][j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(k)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(k&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tresult=result*base;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tk&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tbase=base*base;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">make_fib</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">make_base</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">2</span>][<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">2</span>][<span class=\"number\">2</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">3</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">3</span>][<span class=\"number\">2</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">2</span>][<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">3</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%I64d\\n&quot;</span>,nums[<span class=\"number\">1</span>][<span class=\"number\">3</span>]%<span class=\"number\">1000000007</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e7</span>+<span class=\"number\">90</span>;</span><br><span class=\"line\">martix fib;</span><br><span class=\"line\">martix base;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">&quot;seq.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">&quot;seq.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;T;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=T;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;temp;</span><br><span class=\"line\">\t\tfib.make_fib();</span><br><span class=\"line\">\t\tbase.make_base();</span><br><span class=\"line\">\t\tfib=fib*base.quick_pow(temp<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tfib.print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>本文目前只是写了一丁点皮毛。以后应该会持续更新。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"首先\"><a href=\"#首先\" class=\"headerlink\" title=\"首先\"></a>首先</h1><p>关于<code>class</code>，许多<code>OIer</code>便会认为这是一种非常高深的语法，我们无论是现在还是以后的<code>OI</code>学习中都用不到。</p>\n<p>确实，<code>class</code>在<code>OI</code>比赛中可以永远不用。</p>\n<p>可是，如果这么说的话，除了递归之外，其他函数也可以在<code>OI</code>比赛中永远不使用。可是，那我们使用它的原因是什么呢？</p>\n<p>对，是因为它可以使程序编写更加容易。</p>\n<p>众所周知，<code>C++</code>相较于<code>C</code>，主要的区别就是在于<code>C++</code>增加了关于面向对象的支持，和<code>STL</code>。由于我们一般并不去使用面向对象，所以我们学习的语言被戏称为<code>&quot;C with STL&quot;</code>。</p>\n<p>但是，学习面向对象的基本思想，和有关面向对象的基本语法，真的可以让我们对<code>C++</code>语言的认识提升一个档次。</p>\n<h1 id=\"class是什么？\"><a href=\"#class是什么？\" class=\"headerlink\" title=\"class是什么？\"></a>class是什么？</h1><p>其实，我们在使用<code>struct</code>的时候，就已经对面向对象有了初步的认识。</p>\n<p><code>struct</code>其实就相当于是这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相当于：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没错，也就是说，<code>struct</code>就相当于是一个全部都是<code>public</code>的<code>class</code>。</p>\n<p>说到这里，读者对<code>class</code>的望而生畏的感觉应当减少了一些。</p>\n<p>但是很显然，<code>class</code>远远不只有这一点点用处。</p>\n<h1 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h1><p><code>class</code>的基本用法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">a_class</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，这个<code>class</code>比刚才的那一个多出了一个<code>private:</code>。</p>\n<p>那这个<code>private</code>有什么用处呢？</p>\n<p>在<code>private</code>内部的函数，只能在类的内部访问，在外部无论通过什么方法也是无法直接访问的。</p>\n<p>在调用类的时候，只能使用<code>public</code>内部的函数。</p>\n<p>这样就有了一个好处：</p>\n<p>我们在使用一个类的时候，不需要管它内部是怎样实现的，只需要调用在<code>public</code>中的函数接口即可。</p>\n<p>这样，虽然我们再写类的时候要仔细思考接口怎样编写比较方便，但是大大减少了我们在写类外部代码时的思维量。</p>\n<p>而毕竟写类只需要写一次，调用可能需奥很多很多次，所以我们总体的思维量还是会有所下降。</p>\n<h1 id=\"范例\"><a href=\"#范例\" class=\"headerlink\" title=\"范例\"></a>范例</h1><p>（下面是我自己在考试的时候写的矩阵快速幂代码：<del>其实本来只是想秀给CYC看的</del>）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">martix</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> nums[<span class=\"number\">6</span>][<span class=\"number\">6</span>];</span><br><span class=\"line\">\tclear()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(nums,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(nums));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmake_standard()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(nums,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(nums));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnums[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tmartix()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tclear();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmartix <span class=\"keyword\">operator</span>*(martix b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmartix result;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">3</span>;j++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=<span class=\"number\">3</span>;k++)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tresult.nums[i][j]+=nums[i][k]*b.nums[k][j]%<span class=\"number\">1000000007</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\">martix <span class=\"title\">quick_pow</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tmartix result;</span><br><span class=\"line\">\t\tresult.make_standard();</span><br><span class=\"line\">\t\tmartix base;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">5</span>;j++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbase.nums[i][j]=nums[i][j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(k)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(k&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tresult=result*base;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tk&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tbase=base*base;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">make_fib</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">make_base</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">2</span>][<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">2</span>][<span class=\"number\">2</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">3</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">3</span>][<span class=\"number\">2</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">2</span>][<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnums[<span class=\"number\">1</span>][<span class=\"number\">3</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%I64d\\n&quot;</span>,nums[<span class=\"number\">1</span>][<span class=\"number\">3</span>]%<span class=\"number\">1000000007</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e7</span>+<span class=\"number\">90</span>;</span><br><span class=\"line\">martix fib;</span><br><span class=\"line\">martix base;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">&quot;seq.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">&quot;seq.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;T;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=T;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;temp;</span><br><span class=\"line\">\t\tfib.make_fib();</span><br><span class=\"line\">\t\tbase.make_base();</span><br><span class=\"line\">\t\tfib=fib*base.quick_pow(temp<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tfib.print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>本文目前只是写了一丁点皮毛。以后应该会持续更新。</p>\n"},{"title":"关于SBT平衡树","date":"2021-01-15T02:21:47.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://tva1.sinaimg.cn/large/9bd9b167ly1fwsfzt2p29j21hc0u04qp.jpg","description":"SBT平衡树学习历程与详解。","keywords":["SBT","平衡树"],"_content":"现在我发现写各种数据结构用指针的好少啊……所以我想写一个指针版的SBT</br>\n明明指针版的又好理解又好康又好写又好记啊对吧\n<h2>迷惑行为</h2>\n<p class='div-border green'>\n一开始学平衡树的时候学的是替罪羊树……然后后来替罪羊树就愣是很久都没打出来……（虽然替罪羊树qs好写）\n后看书的时候各种书上都没有替罪羊树（可能是因为名字就不太✨？）<br/>\n又不能浪费看书的时间所以就转投了书上有的SBT。\n</p>\n<h2>迷惑行为++</h2>\n第二天上机的时候又忘了一部分就看着别人的写\n然后就看到这样一份代码：\n\n```cpp\nint remove(int &x,int key)\n{\n\tint d_key;\n\ttree[x].size--;\n\tif ((key == tree[x].key) || (key < tree[x].key && tree[x].left == 0) ||\n\t    (key > tree[x].key && tree[x].right == 0))\n\t{\n\t\td_key = tree[x].key;\n\t\tif (tree[x].left && tree[x].right)\n\t\t{\n\t\t\ttree[x].key = remove(tree[x].left, tree[x].key + 1);\n\t\t} else\n\t\t{\n\t\t\tx = tree[x].left + tree[x].right;\n\t\t}\n\t} else if (key > tree[x].key)\n\t\td_key = remove(tree[x].right, key);\n\telse if (key < tree[x].key)\n\t\td_key = remove(tree[x].left, key);\n\treturn d_key;\n}\n```\n看到这一行了没有：\n\n```cpp\nx = tree[x].left + tree[x].right;\n```\n感觉好迷惑<br/>\n两个指针相加……<br/>\n总之是不知道想干什么\n\n热心的`JYC`小同学热心的指出了热心的问题<br/>\n前面有一句这个\n\n```cpp\nif (tree[x].left && tree[x].right)\n```\n\n也就是说，这两个`left`,`right`至少有一个是零<br/>\n这一句的值就是非零的那个……<br/>\n是我太菜了<br/>\n\n\n<h2>MODULE解析</h2>\n\n<h3>定义Node</h3>\n\n```cpp\nstruct Node\n{\n\tNode *lch, *rch;//左儿子，右儿子\n\tint val, size;//键值，字数\n\tNode(int key)//初始化\n    {\n\t    lch=rch=NULL;\n\t    size=1;\n\t    val=key;\n    }\n}rot(0);\n```\n<h3>左旋，右旋</h3>\n\n```c++\nvoid L_rotate(Node *x)\n{\n\tNode *y = x->lch;\n\tx->rch = y->lch;\n\ty->lch = x;\n\ty->size = x->size;\n\tx->size = x->lch->size + x->rch->size + 1;\n\tx = y;\n}\nvoid R_rotate(Node *x)\n{\n\tNode *y = x->lch;\n\tx->lch = y->rch;\n\ty->rch = x;\n\ty->size = x->size;\n\tx->size = x->lch->size + x->rch->size + 1;\n\tx = y;\n}\n```\n<h3>maintain</h3>\n\n```c++\nvoid maintain(Node *x,bool flag)\n{\n    if (flag== false)\n    {\n        if (x->lch->lch->size>x->rch->size)\n        {\n            R_rotate(x);\n        } else if (x->lch->rch->size>x->rch->size)\n        {\n            R_rotate(x->lch);\n            R_rotate(x);\n        } else\n        {\n            return;\n        }\n    } else\n    {\n        if (x->rch->rch->size>x->lch->size)\n        {\n            L_rotate(x);\n        } else if (x->rch->lch->size>x->lch->size)\n        {\n            R_rotate(x->rch);\n            R_rotate(x);\n        } else\n        {\n            return;\n        }\n    }\n    maintain(x->lch, false);\n    maintain(x->rch, true);\n    maintain(x, true);\n    maintain(x, false);\n}\n```\n<h3>插♂入</h3>\n\n```c++\nvoid insert(Node *x,int keys)\n{\n\tif (x == NULL)\n\t{\n\t\tx = new Node(keys);\n\t} else\n\t{\n\t\tx->size++;\n\t\tif (keys < x->val)\n\t\t{\n\t\t\tinsert(x->lch, keys);\n\t\t} else\n\t\t{\n\t\t\tinsert(x->rch, keys);\n\t\t}\n\t\tmaintain(x, keys >= x->val);\n\t}\n}\n```\n<h3>删除</h3>\n\n```c++\nint remove(Node *x,int keys)\n{\n\tint dekey;\n\t--x->size;\n\tif ((keys==x->val)||(keys<x->val&&x->lch==NULL)||(keys>x->val&&x->rch==NULL))\n\t{\n\t\tdekey=x->val;\n\t\tif (x->lch&&x->rch)\n\t\t{\n\t\t\tx->val=remove(x->lch,x->val+1);\n\t\t} else\n\t\t{\n\t\t\tif (x->lch==NULL)\n\t\t\t{\n\t\t\t\tx=x->rch;\n\t\t\t} else if (x->rch==NULL)\n\t\t\t{\n\t\t\t\tx=x->lch;\n\t\t\t} else\n\t\t\t{\n\t\t\t\tx=NULL;\n\t\t\t}\n\t\t}\n\t} else if (keys>x->val)\n\t{\n\t\tdekey=remove(x->rch,keys);\n\t} else if (keys<x->val)\n\t{\n\t\tdekey=remove(x->rch,keys);\n\t}\n\treturn dekey;\n}\n```\n<h3>查找最小值</h3>\n\n```c++\nint get_min()\n{\n\tNode *x;\n\tfor (x = &rot; x->lch; x=x->lch);\n\treturn x->val;\n}\n```\n<h3>查找最大值</h3>\n\n```c++\nint get_max()\n{\n\tNode *x;\n\tfor (x = &rot; x->rch; x=x->rch);\n\treturn x->val;\n}\n```\n<h3>查询第K大的值</h3>\n\n```c++\nint find_Kth(Node *x,int K)\n{\n\tint tr=x->lch->size+1;\n\tif (tr==K)\n\t{\n\t\treturn x->val;\n\t} else if (tr<K)\n\t{\n\t\treturn find_Kth(x->rch,K-tr);\n\t} else\n\t{\n\t\treturn find_Kth(x->lch,K);\n\t}\n}\n```\n<h3>查询值的排名</h3>\n\n```c++\nint rank(Node *x,int keys)\n{\n\tif (keys<x->val)\n\t{\n\t\treturn rank(x->lch,keys);\n\t} else if (keys>x->val)\n\t{\n\t\treturn rank(x->rch,keys);\n\t}\n\treturn x->lch->size+1;\n}\n```\n<h3>查询前驱</h3>\n\n```c++\nint Lowwer(int w)\n{\n\tNode *now=rot;\n\tint result=-2147483600;\n\twhile(now)\n\t{\n\t\tif(now->val<w&&now->val>result)\n\t\t{\n\t\t\tresult=now->val;\n\t\t}\n\t\tif(w>now->val)\n\t\t{\n\t\t\tnow=now->rch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnow=now->lch;\n\t\t}\n\t}\n\treturn result;\n}\n```\n\n<h3>查询后继</h3>\n\n```c++\nint Upper(int w)\n{\n\tNode *now=rot;\n\tint result=2147483600;\n\twhile(now)\n\t{\n\t\tif(now->val>w&&now->val<result)\n\t\t{\n\t\t\tresult=now->val;\n\t\t}\n\t\tif(w<now->val)\n\t\t{\n\t\t\tnow=now->lch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnow=now->rch;\n\t\t}\n\t}\n\treturn result;\n}\n```\n\n<h3>main</h3>\n\n```c++\nint main()\n{\n\ttotN=read();\n\tregister char opt;\n\tregister long long K;\n\tfor(register long long i=1;i<=totN;++i)\n\t{\n\t\topt=getchar();\n\t\tK=read();\n\t\tswitch (opt)\n\t\t{\n\t\tcase '1':\n\t\t\tinsert(rot,K);\n\t\t\tbreak;\n\t\tcase '2':\n\t\t\tremove(rot,K);\n\t\t\tbreak;\n\t\tcase '3':\n\t\t\twrite(ranking(rot,K));\n\t\tcase '4':\n\t\t\twrite(find_Kth(rot,K));\n\t\tcase '5':\n\t\t\twrite(Lowwer(K));\n\t\tcase '6':\n\t\t\twrite(Upper(K));\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n} // LikiBlaze Code\n```\n\n<h2>完整代码（整洁，不压行，代码界<s>清流(WWF狂喜)</s>)(368行预警)</h2>\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n\tlong long x = 0;\n\tint f = 1;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9')\n\t{\n\t\tif (ch == '-')\n\t\t\tf = -1;\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9')\n\t{\n\t\tx = (x << 1) + (x << 3) + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn x * f;\n}\nvoid write(const long long &x)\n{\n\tif (!x)\n\t{\n\t\tputchar('0');\n\t\treturn;\n\t}\n\tchar f[100];\n\tlong long tmp = x;\n\tif (tmp < 0)\n\t{\n\t\ttmp = -tmp;\n\t\tputchar('-');\n\t}\n\tlong long s = 0;\n\twhile (tmp > 0)\n\t{\n\t\tf[s++] = tmp % 10 + '0';\n\t\ttmp /= 10;\n\t}\n\twhile (s > 0)\n\t{\n\t\tputchar(f[--s]);\n\t}\n}\ninline double dread()\n{\n\tdouble r;\n\tdouble x = 0, t = 0;\n\tint s = 0, f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar())\n\t{\n\t\tif (c == '-')\n\t\t{\n\t\t\tf = -1;\n\t\t}\n\t\tif (c == '.')\n\t\t{\n\t\t\tgoto readt;\n\t\t}\n\t}\n\tfor (; isdigit(c) && c != '.'; c = getchar())\n\t{\n\t\tx = x * 10 + c - '0';\n\t}\nreadt:\n\tfor (; c == '.'; c = getchar())\n\t\t;\n\tfor (; isdigit(c); c = getchar())\n\t{\n\t\tt = t * 10 + c - '0';\n\t\t++s;\n\t}\n\tr = (x + t / pow(10, s)) * f;\n\treturn r;\n}\n\ninline void dwrite(long long x)\n{\n\tif (x == 0)\n\t{\n\t\tputchar(48);\n\t\treturn;\n\t}\n\tint bit[20], p = 0, i;\n\tfor (; x; x /= 10)\n\t\tbit[++p] = x % 10;\n\tfor (i = p; i > 0; --i)\n\t\tputchar(bit[i] + 48);\n}\ninline void write(double x, int k)\n{\n\tstatic int n = pow(10, k);\n\tif (x == 0)\n\t{\n\t\tputchar('0');\n\t\tputchar('.');\n\t\tfor (int i = 1; i <= k; ++i)\n\t\t\tputchar('0');\n\t\treturn;\n\t}\n\tif (x < 0)\n\t\tputchar('-'), x = -x;\n\tlong long y = (long long)(x * n) % n;\n\tx = (long long)x;\n\tdwrite(x), putchar('.');\n\tint bit[10], p = 0, i;\n\tfor (; p < k; y /= 10)\n\t\tbit[++p] = y % 10;\n\tfor (i = p; i > 0; i--)\n\t\tputchar(bit[i] + 48);\n}\n\nstruct Node\n{\n\tNode *lch, *rch;\n\tint val, size;\n\tNode(int key)\n\t{\n\t\tlch = rch = NULL;\n\t\tsize = 1;\n\t\tval = key;\n\t}\n};\n\nNode *rot = new Node(0);\n\nvoid L_rotate(Node *x)\n{\n\tNode *y = x->lch;\n\tx->rch = y->lch;\n\ty->lch = x;\n\ty->size = x->size;\n\tx->size = x->lch->size + x->rch->size + 1;\n\tx = y;\n}\n\nvoid R_rotate(Node *x)\n{\n\tNode *y = x->lch;\n\tx->lch = y->rch;\n\ty->rch = x;\n\ty->size = x->size;\n\tx->size = x->lch->size + x->rch->size + 1;\n\tx = y;\n}\n\nvoid maintain(Node *x, bool flag)\n{\n\tif (flag == false)\n\t{\n\t\tif (x->lch->lch->size > x->rch->size)\n\t\t{\n\t\t\tR_rotate(x);\n\t\t}\n\t\telse if (x->lch->rch->size > x->rch->size)\n\t\t{\n\t\t\tR_rotate(x->lch);\n\t\t\tR_rotate(x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (x->rch->rch->size > x->lch->size)\n\t\t{\n\t\t\tL_rotate(x);\n\t\t}\n\t\telse if (x->rch->lch->size > x->lch->size)\n\t\t{\n\t\t\tR_rotate(x->rch);\n\t\t\tR_rotate(x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n\tmaintain(x->lch, false);\n\tmaintain(x->rch, true);\n\tmaintain(x, true);\n\tmaintain(x, false);\n}\n\nvoid insert(Node *x, int keys)\n{\n\tif (x == NULL)\n\t{\n\t\tx = new Node(keys);\n\t}\n\telse\n\t{\n\t\tx->size++;\n\t\tif (keys < x->val)\n\t\t{\n\t\t\tinsert(x->lch, keys);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinsert(x->rch, keys);\n\t\t}\n\t\tmaintain(x, keys >= x->val);\n\t}\n}\n\nint remove(Node *x, int keys)\n{\n\tint dekey;\n\t--x->size;\n\tif ((keys == x->val) || (keys < x->val && x->lch == NULL) || (keys > x->val && x->rch == NULL))\n\t{\n\t\tdekey = x->val;\n\t\tif (x->lch && x->rch)\n\t\t{\n\t\t\tx->val = remove(x->lch, x->val + 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (x->lch == NULL)\n\t\t\t{\n\t\t\t\tx = x->rch;\n\t\t\t}\n\t\t\telse if (x->rch == NULL)\n\t\t\t{\n\t\t\t\tx = x->lch;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = NULL;\n\t\t\t}\n\t\t}\n\t}\n\telse if (keys > x->val)\n\t{\n\t\tdekey = remove(x->rch, keys);\n\t}\n\telse if (keys < x->val)\n\t{\n\t\tdekey = remove(x->rch, keys);\n\t}\n\treturn dekey;\n}\n\nint get_min()\n{\n\tNode *x;\n\tfor (x = rot; x->lch; x = x->lch)\n\t\t;\n\treturn x->val;\n}\nint get_max()\n{\n\tNode *x;\n\tfor (x = rot; x->rch; x = x->rch)\n\t\t;\n\treturn x->val;\n}\nint find_Kth(Node *x, int K)\n{\n\tint tr = x->lch->size + 1;\n\tif (tr == K)\n\t{\n\t\treturn x->val;\n\t}\n\telse if (tr < K)\n\t{\n\t\treturn find_Kth(x->rch, K - tr);\n\t}\n\telse\n\t{\n\t\treturn find_Kth(x->lch, K);\n\t}\n}\nint ranking(Node *x, int keys)\n{\n\tif (keys < x->val)\n\t{\n\t\treturn ranking(x->lch, keys);\n\t}\n\telse if (keys > x->val)\n\t{\n\t\treturn ranking(x->rch, keys);\n\t}\n\treturn x->lch->size + 1;\n}\n\nint Upper(int w)\n{\n\tNode *now = rot;\n\tint result = 2147483600;\n\twhile (now)\n\t{\n\t\tif (now->val > w && now->val < result)\n\t\t{\n\t\t\tresult = now->val;\n\t\t}\n\t\tif (w < now->val)\n\t\t{\n\t\t\tnow = now->lch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnow = now->rch;\n\t\t}\n\t}\n\treturn result;\n}\nint Lowwer(int w)\n{\n\tNode *now = rot;\n\tint result = -2147483600;\n\twhile (now)\n\t{\n\t\tif (now->val < w && now->val > result)\n\t\t{\n\t\t\tresult = now->val;\n\t\t}\n\t\tif (w > now->val)\n\t\t{\n\t\t\tnow = now->rch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnow = now->lch;\n\t\t}\n\t}\n\treturn result;\n}\n\nlong long totN;\n\nint main()\n{\n\ttotN = read();\n\tregister char opt;\n\tregister long long K;\n\tfor (register long long i = 1; i <= totN; ++i)\n\t{\n\t\topt = getchar();\n\t\tK = read();\n\t\tswitch (opt)\n\t\t{\n\t\tcase '1':\n\t\t\tinsert(rot, K);\n\t\t\tbreak;\n\t\tcase '2':\n\t\t\tremove(rot, K);\n\t\t\tbreak;\n\t\tcase '3':\n\t\t\twrite(ranking(rot, K));\n\t\tcase '4':\n\t\t\twrite(find_Kth(rot, K));\n\t\tcase '5':\n\t\t\twrite(Lowwer(K));\n\t\tcase '6':\n\t\t\twrite(Upper(K));\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n} // LikiBlaze Code\n```\n","source":"_posts/关于SBT平衡树.md","raw":"---\ntitle: 关于SBT平衡树\ndate: 2021-01-15 10:21:47\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://tva1.sinaimg.cn/large/9bd9b167ly1fwsfzt2p29j21hc0u04qp.jpg  \ntags:\n- 数据结构\ncategories: 数据结构 \ndescription: SBT平衡树学习历程与详解。\nkeywords:\n- SBT\n- 平衡树\n---\n现在我发现写各种数据结构用指针的好少啊……所以我想写一个指针版的SBT</br>\n明明指针版的又好理解又好康又好写又好记啊对吧\n<h2>迷惑行为</h2>\n<p class='div-border green'>\n一开始学平衡树的时候学的是替罪羊树……然后后来替罪羊树就愣是很久都没打出来……（虽然替罪羊树qs好写）\n后看书的时候各种书上都没有替罪羊树（可能是因为名字就不太✨？）<br/>\n又不能浪费看书的时间所以就转投了书上有的SBT。\n</p>\n<h2>迷惑行为++</h2>\n第二天上机的时候又忘了一部分就看着别人的写\n然后就看到这样一份代码：\n\n```cpp\nint remove(int &x,int key)\n{\n\tint d_key;\n\ttree[x].size--;\n\tif ((key == tree[x].key) || (key < tree[x].key && tree[x].left == 0) ||\n\t    (key > tree[x].key && tree[x].right == 0))\n\t{\n\t\td_key = tree[x].key;\n\t\tif (tree[x].left && tree[x].right)\n\t\t{\n\t\t\ttree[x].key = remove(tree[x].left, tree[x].key + 1);\n\t\t} else\n\t\t{\n\t\t\tx = tree[x].left + tree[x].right;\n\t\t}\n\t} else if (key > tree[x].key)\n\t\td_key = remove(tree[x].right, key);\n\telse if (key < tree[x].key)\n\t\td_key = remove(tree[x].left, key);\n\treturn d_key;\n}\n```\n看到这一行了没有：\n\n```cpp\nx = tree[x].left + tree[x].right;\n```\n感觉好迷惑<br/>\n两个指针相加……<br/>\n总之是不知道想干什么\n\n热心的`JYC`小同学热心的指出了热心的问题<br/>\n前面有一句这个\n\n```cpp\nif (tree[x].left && tree[x].right)\n```\n\n也就是说，这两个`left`,`right`至少有一个是零<br/>\n这一句的值就是非零的那个……<br/>\n是我太菜了<br/>\n\n\n<h2>MODULE解析</h2>\n\n<h3>定义Node</h3>\n\n```cpp\nstruct Node\n{\n\tNode *lch, *rch;//左儿子，右儿子\n\tint val, size;//键值，字数\n\tNode(int key)//初始化\n    {\n\t    lch=rch=NULL;\n\t    size=1;\n\t    val=key;\n    }\n}rot(0);\n```\n<h3>左旋，右旋</h3>\n\n```c++\nvoid L_rotate(Node *x)\n{\n\tNode *y = x->lch;\n\tx->rch = y->lch;\n\ty->lch = x;\n\ty->size = x->size;\n\tx->size = x->lch->size + x->rch->size + 1;\n\tx = y;\n}\nvoid R_rotate(Node *x)\n{\n\tNode *y = x->lch;\n\tx->lch = y->rch;\n\ty->rch = x;\n\ty->size = x->size;\n\tx->size = x->lch->size + x->rch->size + 1;\n\tx = y;\n}\n```\n<h3>maintain</h3>\n\n```c++\nvoid maintain(Node *x,bool flag)\n{\n    if (flag== false)\n    {\n        if (x->lch->lch->size>x->rch->size)\n        {\n            R_rotate(x);\n        } else if (x->lch->rch->size>x->rch->size)\n        {\n            R_rotate(x->lch);\n            R_rotate(x);\n        } else\n        {\n            return;\n        }\n    } else\n    {\n        if (x->rch->rch->size>x->lch->size)\n        {\n            L_rotate(x);\n        } else if (x->rch->lch->size>x->lch->size)\n        {\n            R_rotate(x->rch);\n            R_rotate(x);\n        } else\n        {\n            return;\n        }\n    }\n    maintain(x->lch, false);\n    maintain(x->rch, true);\n    maintain(x, true);\n    maintain(x, false);\n}\n```\n<h3>插♂入</h3>\n\n```c++\nvoid insert(Node *x,int keys)\n{\n\tif (x == NULL)\n\t{\n\t\tx = new Node(keys);\n\t} else\n\t{\n\t\tx->size++;\n\t\tif (keys < x->val)\n\t\t{\n\t\t\tinsert(x->lch, keys);\n\t\t} else\n\t\t{\n\t\t\tinsert(x->rch, keys);\n\t\t}\n\t\tmaintain(x, keys >= x->val);\n\t}\n}\n```\n<h3>删除</h3>\n\n```c++\nint remove(Node *x,int keys)\n{\n\tint dekey;\n\t--x->size;\n\tif ((keys==x->val)||(keys<x->val&&x->lch==NULL)||(keys>x->val&&x->rch==NULL))\n\t{\n\t\tdekey=x->val;\n\t\tif (x->lch&&x->rch)\n\t\t{\n\t\t\tx->val=remove(x->lch,x->val+1);\n\t\t} else\n\t\t{\n\t\t\tif (x->lch==NULL)\n\t\t\t{\n\t\t\t\tx=x->rch;\n\t\t\t} else if (x->rch==NULL)\n\t\t\t{\n\t\t\t\tx=x->lch;\n\t\t\t} else\n\t\t\t{\n\t\t\t\tx=NULL;\n\t\t\t}\n\t\t}\n\t} else if (keys>x->val)\n\t{\n\t\tdekey=remove(x->rch,keys);\n\t} else if (keys<x->val)\n\t{\n\t\tdekey=remove(x->rch,keys);\n\t}\n\treturn dekey;\n}\n```\n<h3>查找最小值</h3>\n\n```c++\nint get_min()\n{\n\tNode *x;\n\tfor (x = &rot; x->lch; x=x->lch);\n\treturn x->val;\n}\n```\n<h3>查找最大值</h3>\n\n```c++\nint get_max()\n{\n\tNode *x;\n\tfor (x = &rot; x->rch; x=x->rch);\n\treturn x->val;\n}\n```\n<h3>查询第K大的值</h3>\n\n```c++\nint find_Kth(Node *x,int K)\n{\n\tint tr=x->lch->size+1;\n\tif (tr==K)\n\t{\n\t\treturn x->val;\n\t} else if (tr<K)\n\t{\n\t\treturn find_Kth(x->rch,K-tr);\n\t} else\n\t{\n\t\treturn find_Kth(x->lch,K);\n\t}\n}\n```\n<h3>查询值的排名</h3>\n\n```c++\nint rank(Node *x,int keys)\n{\n\tif (keys<x->val)\n\t{\n\t\treturn rank(x->lch,keys);\n\t} else if (keys>x->val)\n\t{\n\t\treturn rank(x->rch,keys);\n\t}\n\treturn x->lch->size+1;\n}\n```\n<h3>查询前驱</h3>\n\n```c++\nint Lowwer(int w)\n{\n\tNode *now=rot;\n\tint result=-2147483600;\n\twhile(now)\n\t{\n\t\tif(now->val<w&&now->val>result)\n\t\t{\n\t\t\tresult=now->val;\n\t\t}\n\t\tif(w>now->val)\n\t\t{\n\t\t\tnow=now->rch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnow=now->lch;\n\t\t}\n\t}\n\treturn result;\n}\n```\n\n<h3>查询后继</h3>\n\n```c++\nint Upper(int w)\n{\n\tNode *now=rot;\n\tint result=2147483600;\n\twhile(now)\n\t{\n\t\tif(now->val>w&&now->val<result)\n\t\t{\n\t\t\tresult=now->val;\n\t\t}\n\t\tif(w<now->val)\n\t\t{\n\t\t\tnow=now->lch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnow=now->rch;\n\t\t}\n\t}\n\treturn result;\n}\n```\n\n<h3>main</h3>\n\n```c++\nint main()\n{\n\ttotN=read();\n\tregister char opt;\n\tregister long long K;\n\tfor(register long long i=1;i<=totN;++i)\n\t{\n\t\topt=getchar();\n\t\tK=read();\n\t\tswitch (opt)\n\t\t{\n\t\tcase '1':\n\t\t\tinsert(rot,K);\n\t\t\tbreak;\n\t\tcase '2':\n\t\t\tremove(rot,K);\n\t\t\tbreak;\n\t\tcase '3':\n\t\t\twrite(ranking(rot,K));\n\t\tcase '4':\n\t\t\twrite(find_Kth(rot,K));\n\t\tcase '5':\n\t\t\twrite(Lowwer(K));\n\t\tcase '6':\n\t\t\twrite(Upper(K));\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n} // LikiBlaze Code\n```\n\n<h2>完整代码（整洁，不压行，代码界<s>清流(WWF狂喜)</s>)(368行预警)</h2>\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n\tlong long x = 0;\n\tint f = 1;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9')\n\t{\n\t\tif (ch == '-')\n\t\t\tf = -1;\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9')\n\t{\n\t\tx = (x << 1) + (x << 3) + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn x * f;\n}\nvoid write(const long long &x)\n{\n\tif (!x)\n\t{\n\t\tputchar('0');\n\t\treturn;\n\t}\n\tchar f[100];\n\tlong long tmp = x;\n\tif (tmp < 0)\n\t{\n\t\ttmp = -tmp;\n\t\tputchar('-');\n\t}\n\tlong long s = 0;\n\twhile (tmp > 0)\n\t{\n\t\tf[s++] = tmp % 10 + '0';\n\t\ttmp /= 10;\n\t}\n\twhile (s > 0)\n\t{\n\t\tputchar(f[--s]);\n\t}\n}\ninline double dread()\n{\n\tdouble r;\n\tdouble x = 0, t = 0;\n\tint s = 0, f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar())\n\t{\n\t\tif (c == '-')\n\t\t{\n\t\t\tf = -1;\n\t\t}\n\t\tif (c == '.')\n\t\t{\n\t\t\tgoto readt;\n\t\t}\n\t}\n\tfor (; isdigit(c) && c != '.'; c = getchar())\n\t{\n\t\tx = x * 10 + c - '0';\n\t}\nreadt:\n\tfor (; c == '.'; c = getchar())\n\t\t;\n\tfor (; isdigit(c); c = getchar())\n\t{\n\t\tt = t * 10 + c - '0';\n\t\t++s;\n\t}\n\tr = (x + t / pow(10, s)) * f;\n\treturn r;\n}\n\ninline void dwrite(long long x)\n{\n\tif (x == 0)\n\t{\n\t\tputchar(48);\n\t\treturn;\n\t}\n\tint bit[20], p = 0, i;\n\tfor (; x; x /= 10)\n\t\tbit[++p] = x % 10;\n\tfor (i = p; i > 0; --i)\n\t\tputchar(bit[i] + 48);\n}\ninline void write(double x, int k)\n{\n\tstatic int n = pow(10, k);\n\tif (x == 0)\n\t{\n\t\tputchar('0');\n\t\tputchar('.');\n\t\tfor (int i = 1; i <= k; ++i)\n\t\t\tputchar('0');\n\t\treturn;\n\t}\n\tif (x < 0)\n\t\tputchar('-'), x = -x;\n\tlong long y = (long long)(x * n) % n;\n\tx = (long long)x;\n\tdwrite(x), putchar('.');\n\tint bit[10], p = 0, i;\n\tfor (; p < k; y /= 10)\n\t\tbit[++p] = y % 10;\n\tfor (i = p; i > 0; i--)\n\t\tputchar(bit[i] + 48);\n}\n\nstruct Node\n{\n\tNode *lch, *rch;\n\tint val, size;\n\tNode(int key)\n\t{\n\t\tlch = rch = NULL;\n\t\tsize = 1;\n\t\tval = key;\n\t}\n};\n\nNode *rot = new Node(0);\n\nvoid L_rotate(Node *x)\n{\n\tNode *y = x->lch;\n\tx->rch = y->lch;\n\ty->lch = x;\n\ty->size = x->size;\n\tx->size = x->lch->size + x->rch->size + 1;\n\tx = y;\n}\n\nvoid R_rotate(Node *x)\n{\n\tNode *y = x->lch;\n\tx->lch = y->rch;\n\ty->rch = x;\n\ty->size = x->size;\n\tx->size = x->lch->size + x->rch->size + 1;\n\tx = y;\n}\n\nvoid maintain(Node *x, bool flag)\n{\n\tif (flag == false)\n\t{\n\t\tif (x->lch->lch->size > x->rch->size)\n\t\t{\n\t\t\tR_rotate(x);\n\t\t}\n\t\telse if (x->lch->rch->size > x->rch->size)\n\t\t{\n\t\t\tR_rotate(x->lch);\n\t\t\tR_rotate(x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (x->rch->rch->size > x->lch->size)\n\t\t{\n\t\t\tL_rotate(x);\n\t\t}\n\t\telse if (x->rch->lch->size > x->lch->size)\n\t\t{\n\t\t\tR_rotate(x->rch);\n\t\t\tR_rotate(x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n\tmaintain(x->lch, false);\n\tmaintain(x->rch, true);\n\tmaintain(x, true);\n\tmaintain(x, false);\n}\n\nvoid insert(Node *x, int keys)\n{\n\tif (x == NULL)\n\t{\n\t\tx = new Node(keys);\n\t}\n\telse\n\t{\n\t\tx->size++;\n\t\tif (keys < x->val)\n\t\t{\n\t\t\tinsert(x->lch, keys);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinsert(x->rch, keys);\n\t\t}\n\t\tmaintain(x, keys >= x->val);\n\t}\n}\n\nint remove(Node *x, int keys)\n{\n\tint dekey;\n\t--x->size;\n\tif ((keys == x->val) || (keys < x->val && x->lch == NULL) || (keys > x->val && x->rch == NULL))\n\t{\n\t\tdekey = x->val;\n\t\tif (x->lch && x->rch)\n\t\t{\n\t\t\tx->val = remove(x->lch, x->val + 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (x->lch == NULL)\n\t\t\t{\n\t\t\t\tx = x->rch;\n\t\t\t}\n\t\t\telse if (x->rch == NULL)\n\t\t\t{\n\t\t\t\tx = x->lch;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = NULL;\n\t\t\t}\n\t\t}\n\t}\n\telse if (keys > x->val)\n\t{\n\t\tdekey = remove(x->rch, keys);\n\t}\n\telse if (keys < x->val)\n\t{\n\t\tdekey = remove(x->rch, keys);\n\t}\n\treturn dekey;\n}\n\nint get_min()\n{\n\tNode *x;\n\tfor (x = rot; x->lch; x = x->lch)\n\t\t;\n\treturn x->val;\n}\nint get_max()\n{\n\tNode *x;\n\tfor (x = rot; x->rch; x = x->rch)\n\t\t;\n\treturn x->val;\n}\nint find_Kth(Node *x, int K)\n{\n\tint tr = x->lch->size + 1;\n\tif (tr == K)\n\t{\n\t\treturn x->val;\n\t}\n\telse if (tr < K)\n\t{\n\t\treturn find_Kth(x->rch, K - tr);\n\t}\n\telse\n\t{\n\t\treturn find_Kth(x->lch, K);\n\t}\n}\nint ranking(Node *x, int keys)\n{\n\tif (keys < x->val)\n\t{\n\t\treturn ranking(x->lch, keys);\n\t}\n\telse if (keys > x->val)\n\t{\n\t\treturn ranking(x->rch, keys);\n\t}\n\treturn x->lch->size + 1;\n}\n\nint Upper(int w)\n{\n\tNode *now = rot;\n\tint result = 2147483600;\n\twhile (now)\n\t{\n\t\tif (now->val > w && now->val < result)\n\t\t{\n\t\t\tresult = now->val;\n\t\t}\n\t\tif (w < now->val)\n\t\t{\n\t\t\tnow = now->lch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnow = now->rch;\n\t\t}\n\t}\n\treturn result;\n}\nint Lowwer(int w)\n{\n\tNode *now = rot;\n\tint result = -2147483600;\n\twhile (now)\n\t{\n\t\tif (now->val < w && now->val > result)\n\t\t{\n\t\t\tresult = now->val;\n\t\t}\n\t\tif (w > now->val)\n\t\t{\n\t\t\tnow = now->rch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnow = now->lch;\n\t\t}\n\t}\n\treturn result;\n}\n\nlong long totN;\n\nint main()\n{\n\ttotN = read();\n\tregister char opt;\n\tregister long long K;\n\tfor (register long long i = 1; i <= totN; ++i)\n\t{\n\t\topt = getchar();\n\t\tK = read();\n\t\tswitch (opt)\n\t\t{\n\t\tcase '1':\n\t\t\tinsert(rot, K);\n\t\t\tbreak;\n\t\tcase '2':\n\t\t\tremove(rot, K);\n\t\t\tbreak;\n\t\tcase '3':\n\t\t\twrite(ranking(rot, K));\n\t\tcase '4':\n\t\t\twrite(find_Kth(rot, K));\n\t\tcase '5':\n\t\t\twrite(Lowwer(K));\n\t\tcase '6':\n\t\t\twrite(Upper(K));\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n} // LikiBlaze Code\n```\n","slug":"关于SBT平衡树","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2mv0019pb0y51uq2xen","content":"<p>现在我发现写各种数据结构用指针的好少啊……所以我想写一个指针版的SBT</br><br>明明指针版的又好理解又好康又好写又好记啊对吧</p>\n<h2>迷惑行为</h2>\n<p class='div-border green'>\n一开始学平衡树的时候学的是替罪羊树……然后后来替罪羊树就愣是很久都没打出来……（虽然替罪羊树qs好写）\n后看书的时候各种书上都没有替罪羊树（可能是因为名字就不太✨？）<br/>\n又不能浪费看书的时间所以就转投了书上有的SBT。\n</p>\n<h2>迷惑行为++</h2>\n第二天上机的时候又忘了一部分就看着别人的写\n然后就看到这样一份代码：\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x,<span class=\"keyword\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d_key;</span><br><span class=\"line\">\ttree[x].size--;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((key == tree[x].key) || (key &lt; tree[x].key &amp;&amp; tree[x].left == <span class=\"number\">0</span>) ||</span><br><span class=\"line\">\t    (key &gt; tree[x].key &amp;&amp; tree[x].right == <span class=\"number\">0</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\td_key = tree[x].key;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tree[x].left &amp;&amp; tree[x].right)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttree[x].key = remove(tree[x].left, tree[x].key + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tx = tree[x].left + tree[x].right;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; tree[x].key)</span><br><span class=\"line\">\t\td_key = remove(tree[x].right, key);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &lt; tree[x].key)</span><br><span class=\"line\">\t\td_key = remove(tree[x].left, key);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> d_key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到这一行了没有：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = tree[x].left + tree[x].right;</span><br></pre></td></tr></table></figure>\n<p>感觉好迷惑<br/><br>两个指针相加……<br/><br>总之是不知道想干什么</p>\n<p>热心的<code>JYC</code>小同学热心的指出了热心的问题<br/><br>前面有一句这个</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (tree[x].left &amp;&amp; tree[x].right)</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，这两个<code>left</code>,<code>right</code>至少有一个是零<br/><br>这一句的值就是非零的那个……<br/><br>是我太菜了<br/></p>\n<h2>MODULE解析</h2>\n\n<h3>定义Node</h3>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tNode *lch, *rch;<span class=\"comment\">//左儿子，右儿子</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> val, size;<span class=\"comment\">//键值，字数</span></span><br><span class=\"line\">\tNode(<span class=\"keyword\">int</span> key)<span class=\"comment\">//初始化</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t    lch=rch=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t    size=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t    val=key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;rot(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h3>左旋，右旋</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">L_rotate</span><span class=\"params\">(Node *x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *y = x-&gt;lch;</span><br><span class=\"line\">\tx-&gt;rch = y-&gt;lch;</span><br><span class=\"line\">\ty-&gt;lch = x;</span><br><span class=\"line\">\ty-&gt;size = x-&gt;size;</span><br><span class=\"line\">\tx-&gt;size = x-&gt;lch-&gt;size + x-&gt;rch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">R_rotate</span><span class=\"params\">(Node *x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *y = x-&gt;lch;</span><br><span class=\"line\">\tx-&gt;lch = y-&gt;rch;</span><br><span class=\"line\">\ty-&gt;rch = x;</span><br><span class=\"line\">\ty-&gt;size = x-&gt;size;</span><br><span class=\"line\">\tx-&gt;size = x-&gt;lch-&gt;size + x-&gt;rch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>maintain</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maintain</span><span class=\"params\">(Node *x,<span class=\"keyword\">bool</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag== <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x-&gt;lch-&gt;lch-&gt;size&gt;x-&gt;rch-&gt;size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            R_rotate(x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;lch-&gt;rch-&gt;size&gt;x-&gt;rch-&gt;size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            R_rotate(x-&gt;lch);</span><br><span class=\"line\">            R_rotate(x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x-&gt;rch-&gt;rch-&gt;size&gt;x-&gt;lch-&gt;size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            L_rotate(x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;rch-&gt;lch-&gt;size&gt;x-&gt;lch-&gt;size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            R_rotate(x-&gt;rch);</span><br><span class=\"line\">            R_rotate(x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maintain(x-&gt;lch, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    maintain(x-&gt;rch, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    maintain(x, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    maintain(x, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>插♂入</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node *x,<span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx = <span class=\"keyword\">new</span> Node(keys);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx-&gt;size++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (keys &lt; x-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tinsert(x-&gt;lch, keys);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tinsert(x-&gt;rch, keys);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmaintain(x, keys &gt;= x-&gt;val);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>删除</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove</span><span class=\"params\">(Node *x,<span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dekey;</span><br><span class=\"line\">\t--x-&gt;size;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((keys==x-&gt;val)||(keys&lt;x-&gt;val&amp;&amp;x-&gt;lch==<span class=\"literal\">NULL</span>)||(keys&gt;x-&gt;val&amp;&amp;x-&gt;rch==<span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey=x-&gt;val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x-&gt;lch&amp;&amp;x-&gt;rch)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tx-&gt;val=remove(x-&gt;lch,x-&gt;val+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x-&gt;lch==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx=x-&gt;rch;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;rch==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx=x-&gt;lch;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys&gt;x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey=remove(x-&gt;rch,keys);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys&lt;x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey=remove(x-&gt;rch,keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dekey;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查找最小值</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_min</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (x = &amp;rot; x-&gt;lch; x=x-&gt;lch);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查找最大值</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_max</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (x = &amp;rot; x-&gt;rch; x=x-&gt;rch);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查询第K大的值</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find_Kth</span><span class=\"params\">(Node *x,<span class=\"keyword\">int</span> K)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tr=x-&gt;lch-&gt;size+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tr==K)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tr&lt;K)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find_Kth(x-&gt;rch,K-tr);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find_Kth(x-&gt;lch,K);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查询值的排名</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Node *x,<span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (keys&lt;x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rank(x-&gt;lch,keys);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys&gt;x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rank(x-&gt;rch,keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;lch-&gt;size+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查询前驱</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Lowwer</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *now=rot;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result=<span class=\"number\">-2147483600</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(now)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(now-&gt;val&lt;w&amp;&amp;now-&gt;val&gt;result)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tresult=now-&gt;val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(w&gt;now-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow=now-&gt;rch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow=now-&gt;lch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3>查询后继</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Upper</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *now=rot;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result=<span class=\"number\">2147483600</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(now)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(now-&gt;val&gt;w&amp;&amp;now-&gt;val&lt;result)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tresult=now-&gt;val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(w&lt;now-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow=now-&gt;lch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow=now-&gt;rch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3>main</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ttotN=read();</span><br><span class=\"line\">\t<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> opt;</span><br><span class=\"line\">\t<span class=\"keyword\">register</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> K;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i=<span class=\"number\">1</span>;i&lt;=totN;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\topt=getchar();</span><br><span class=\"line\">\t\tK=read();</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;1&#x27;</span>:</span><br><span class=\"line\">\t\t\tinsert(rot,K);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;2&#x27;</span>:</span><br><span class=\"line\">\t\t\tremove(rot,K);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;3&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(ranking(rot,K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;4&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(find_Kth(rot,K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;5&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(Lowwer(K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;6&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(Upper(K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n\n<h2>完整代码（整洁，不压行，代码界<s>清流(WWF狂喜)</s>)(368行预警)</h2>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">\t\t\tf = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tch = getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">\t\tch = getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = x;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttmp = -tmp;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tf[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\ttmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">dread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> r;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> x = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; !<span class=\"built_in\">isdigit</span>(c); c = getchar())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tf = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> readt;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; <span class=\"built_in\">isdigit</span>(c) &amp;&amp; c != <span class=\"string\">&#x27;.&#x27;</span>; c = getchar())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">readt:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; c == <span class=\"string\">&#x27;.&#x27;</span>; c = getchar())</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; <span class=\"built_in\">isdigit</span>(c); c = getchar())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tt = t * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\t++s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tr = (x + t / <span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, s)) * f;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dwrite</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"number\">48</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bit[<span class=\"number\">20</span>], p = <span class=\"number\">0</span>, i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; x; x /= <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\tbit[++p] = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = p; i &gt; <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(bit[i] + <span class=\"number\">48</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> n = <span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, k);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>), x = -x;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> y = (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)(x * n) % n;</span><br><span class=\"line\">\tx = (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)x;</span><br><span class=\"line\">\tdwrite(x), <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bit[<span class=\"number\">10</span>], p = <span class=\"number\">0</span>, i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; p &lt; k; y /= <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\tbit[++p] = y % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = p; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(bit[i] + <span class=\"number\">48</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tNode *lch, *rch;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> val, size;</span><br><span class=\"line\">\tNode(<span class=\"keyword\">int</span> key)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlch = rch = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tsize = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tval = key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Node *rot = <span class=\"keyword\">new</span> Node(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">L_rotate</span><span class=\"params\">(Node *x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *y = x-&gt;lch;</span><br><span class=\"line\">\tx-&gt;rch = y-&gt;lch;</span><br><span class=\"line\">\ty-&gt;lch = x;</span><br><span class=\"line\">\ty-&gt;size = x-&gt;size;</span><br><span class=\"line\">\tx-&gt;size = x-&gt;lch-&gt;size + x-&gt;rch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">R_rotate</span><span class=\"params\">(Node *x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *y = x-&gt;lch;</span><br><span class=\"line\">\tx-&gt;lch = y-&gt;rch;</span><br><span class=\"line\">\ty-&gt;rch = x;</span><br><span class=\"line\">\ty-&gt;size = x-&gt;size;</span><br><span class=\"line\">\tx-&gt;size = x-&gt;lch-&gt;size + x-&gt;rch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maintain</span><span class=\"params\">(Node *x, <span class=\"keyword\">bool</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag == <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x-&gt;lch-&gt;lch-&gt;size &gt; x-&gt;rch-&gt;size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tR_rotate(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;lch-&gt;rch-&gt;size &gt; x-&gt;rch-&gt;size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tR_rotate(x-&gt;lch);</span><br><span class=\"line\">\t\t\tR_rotate(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x-&gt;rch-&gt;rch-&gt;size &gt; x-&gt;lch-&gt;size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tL_rotate(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;rch-&gt;lch-&gt;size &gt; x-&gt;lch-&gt;size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tR_rotate(x-&gt;rch);</span><br><span class=\"line\">\t\t\tR_rotate(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmaintain(x-&gt;lch, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\tmaintain(x-&gt;rch, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\tmaintain(x, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\tmaintain(x, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node *x, <span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx = <span class=\"keyword\">new</span> Node(keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx-&gt;size++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (keys &lt; x-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tinsert(x-&gt;lch, keys);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tinsert(x-&gt;rch, keys);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmaintain(x, keys &gt;= x-&gt;val);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove</span><span class=\"params\">(Node *x, <span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dekey;</span><br><span class=\"line\">\t--x-&gt;size;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((keys == x-&gt;val) || (keys &lt; x-&gt;val &amp;&amp; x-&gt;lch == <span class=\"literal\">NULL</span>) || (keys &gt; x-&gt;val &amp;&amp; x-&gt;rch == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey = x-&gt;val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x-&gt;lch &amp;&amp; x-&gt;rch)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tx-&gt;val = remove(x-&gt;lch, x-&gt;val + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x-&gt;lch == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx = x-&gt;rch;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;rch == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx = x-&gt;lch;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys &gt; x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey = remove(x-&gt;rch, keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys &lt; x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey = remove(x-&gt;rch, keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dekey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_min</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (x = rot; x-&gt;lch; x = x-&gt;lch)</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_max</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (x = rot; x-&gt;rch; x = x-&gt;rch)</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find_Kth</span><span class=\"params\">(Node *x, <span class=\"keyword\">int</span> K)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tr = x-&gt;lch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tr == K)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tr &lt; K)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find_Kth(x-&gt;rch, K - tr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find_Kth(x-&gt;lch, K);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ranking</span><span class=\"params\">(Node *x, <span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (keys &lt; x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ranking(x-&gt;lch, keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys &gt; x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ranking(x-&gt;rch, keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;lch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Upper</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *now = rot;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result = <span class=\"number\">2147483600</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (now)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (now-&gt;val &gt; w &amp;&amp; now-&gt;val &lt; result)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tresult = now-&gt;val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (w &lt; now-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow = now-&gt;lch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow = now-&gt;rch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Lowwer</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *now = rot;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result = <span class=\"number\">-2147483600</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (now)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (now-&gt;val &lt; w &amp;&amp; now-&gt;val &gt; result)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tresult = now-&gt;val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (w &gt; now-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow = now-&gt;rch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow = now-&gt;lch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totN;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ttotN = read();</span><br><span class=\"line\">\t<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> opt;</span><br><span class=\"line\">\t<span class=\"keyword\">register</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> K;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\topt = getchar();</span><br><span class=\"line\">\t\tK = read();</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;1&#x27;</span>:</span><br><span class=\"line\">\t\t\tinsert(rot, K);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;2&#x27;</span>:</span><br><span class=\"line\">\t\t\tremove(rot, K);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;3&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(ranking(rot, K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;4&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(find_Kth(rot, K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;5&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(Lowwer(K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;6&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(Upper(K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>现在我发现写各种数据结构用指针的好少啊……所以我想写一个指针版的SBT</br><br>明明指针版的又好理解又好康又好写又好记啊对吧</p>\n<h2>迷惑行为</h2>\n<p class='div-border green'>\n一开始学平衡树的时候学的是替罪羊树……然后后来替罪羊树就愣是很久都没打出来……（虽然替罪羊树qs好写）\n后看书的时候各种书上都没有替罪羊树（可能是因为名字就不太✨？）<br/>\n又不能浪费看书的时间所以就转投了书上有的SBT。\n</p>\n<h2>迷惑行为++</h2>\n第二天上机的时候又忘了一部分就看着别人的写\n然后就看到这样一份代码：\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x,<span class=\"keyword\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d_key;</span><br><span class=\"line\">\ttree[x].size--;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((key == tree[x].key) || (key &lt; tree[x].key &amp;&amp; tree[x].left == <span class=\"number\">0</span>) ||</span><br><span class=\"line\">\t    (key &gt; tree[x].key &amp;&amp; tree[x].right == <span class=\"number\">0</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\td_key = tree[x].key;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tree[x].left &amp;&amp; tree[x].right)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttree[x].key = remove(tree[x].left, tree[x].key + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tx = tree[x].left + tree[x].right;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; tree[x].key)</span><br><span class=\"line\">\t\td_key = remove(tree[x].right, key);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &lt; tree[x].key)</span><br><span class=\"line\">\t\td_key = remove(tree[x].left, key);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> d_key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到这一行了没有：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = tree[x].left + tree[x].right;</span><br></pre></td></tr></table></figure>\n<p>感觉好迷惑<br/><br>两个指针相加……<br/><br>总之是不知道想干什么</p>\n<p>热心的<code>JYC</code>小同学热心的指出了热心的问题<br/><br>前面有一句这个</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (tree[x].left &amp;&amp; tree[x].right)</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，这两个<code>left</code>,<code>right</code>至少有一个是零<br/><br>这一句的值就是非零的那个……<br/><br>是我太菜了<br/></p>\n<h2>MODULE解析</h2>\n\n<h3>定义Node</h3>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tNode *lch, *rch;<span class=\"comment\">//左儿子，右儿子</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> val, size;<span class=\"comment\">//键值，字数</span></span><br><span class=\"line\">\tNode(<span class=\"keyword\">int</span> key)<span class=\"comment\">//初始化</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t    lch=rch=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t    size=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t    val=key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;rot(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h3>左旋，右旋</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">L_rotate</span><span class=\"params\">(Node *x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *y = x-&gt;lch;</span><br><span class=\"line\">\tx-&gt;rch = y-&gt;lch;</span><br><span class=\"line\">\ty-&gt;lch = x;</span><br><span class=\"line\">\ty-&gt;size = x-&gt;size;</span><br><span class=\"line\">\tx-&gt;size = x-&gt;lch-&gt;size + x-&gt;rch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">R_rotate</span><span class=\"params\">(Node *x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *y = x-&gt;lch;</span><br><span class=\"line\">\tx-&gt;lch = y-&gt;rch;</span><br><span class=\"line\">\ty-&gt;rch = x;</span><br><span class=\"line\">\ty-&gt;size = x-&gt;size;</span><br><span class=\"line\">\tx-&gt;size = x-&gt;lch-&gt;size + x-&gt;rch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>maintain</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maintain</span><span class=\"params\">(Node *x,<span class=\"keyword\">bool</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag== <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x-&gt;lch-&gt;lch-&gt;size&gt;x-&gt;rch-&gt;size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            R_rotate(x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;lch-&gt;rch-&gt;size&gt;x-&gt;rch-&gt;size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            R_rotate(x-&gt;lch);</span><br><span class=\"line\">            R_rotate(x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x-&gt;rch-&gt;rch-&gt;size&gt;x-&gt;lch-&gt;size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            L_rotate(x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;rch-&gt;lch-&gt;size&gt;x-&gt;lch-&gt;size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            R_rotate(x-&gt;rch);</span><br><span class=\"line\">            R_rotate(x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maintain(x-&gt;lch, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    maintain(x-&gt;rch, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    maintain(x, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    maintain(x, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>插♂入</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node *x,<span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx = <span class=\"keyword\">new</span> Node(keys);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx-&gt;size++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (keys &lt; x-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tinsert(x-&gt;lch, keys);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tinsert(x-&gt;rch, keys);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmaintain(x, keys &gt;= x-&gt;val);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>删除</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove</span><span class=\"params\">(Node *x,<span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dekey;</span><br><span class=\"line\">\t--x-&gt;size;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((keys==x-&gt;val)||(keys&lt;x-&gt;val&amp;&amp;x-&gt;lch==<span class=\"literal\">NULL</span>)||(keys&gt;x-&gt;val&amp;&amp;x-&gt;rch==<span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey=x-&gt;val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x-&gt;lch&amp;&amp;x-&gt;rch)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tx-&gt;val=remove(x-&gt;lch,x-&gt;val+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x-&gt;lch==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx=x-&gt;rch;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;rch==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx=x-&gt;lch;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys&gt;x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey=remove(x-&gt;rch,keys);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys&lt;x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey=remove(x-&gt;rch,keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dekey;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查找最小值</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_min</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (x = &amp;rot; x-&gt;lch; x=x-&gt;lch);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查找最大值</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_max</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (x = &amp;rot; x-&gt;rch; x=x-&gt;rch);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查询第K大的值</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find_Kth</span><span class=\"params\">(Node *x,<span class=\"keyword\">int</span> K)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tr=x-&gt;lch-&gt;size+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tr==K)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tr&lt;K)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find_Kth(x-&gt;rch,K-tr);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find_Kth(x-&gt;lch,K);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查询值的排名</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(Node *x,<span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (keys&lt;x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rank(x-&gt;lch,keys);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys&gt;x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rank(x-&gt;rch,keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;lch-&gt;size+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查询前驱</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Lowwer</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *now=rot;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result=<span class=\"number\">-2147483600</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(now)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(now-&gt;val&lt;w&amp;&amp;now-&gt;val&gt;result)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tresult=now-&gt;val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(w&gt;now-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow=now-&gt;rch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow=now-&gt;lch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3>查询后继</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Upper</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *now=rot;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result=<span class=\"number\">2147483600</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(now)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(now-&gt;val&gt;w&amp;&amp;now-&gt;val&lt;result)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tresult=now-&gt;val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(w&lt;now-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow=now-&gt;lch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow=now-&gt;rch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3>main</h3>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ttotN=read();</span><br><span class=\"line\">\t<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> opt;</span><br><span class=\"line\">\t<span class=\"keyword\">register</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> K;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i=<span class=\"number\">1</span>;i&lt;=totN;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\topt=getchar();</span><br><span class=\"line\">\t\tK=read();</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;1&#x27;</span>:</span><br><span class=\"line\">\t\t\tinsert(rot,K);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;2&#x27;</span>:</span><br><span class=\"line\">\t\t\tremove(rot,K);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;3&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(ranking(rot,K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;4&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(find_Kth(rot,K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;5&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(Lowwer(K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;6&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(Upper(K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n\n<h2>完整代码（整洁，不压行，代码界<s>清流(WWF狂喜)</s>)(368行预警)</h2>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">\t\t\tf = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tch = getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">\t\tch = getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = x;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttmp = -tmp;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tf[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\ttmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">dread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> r;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> x = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; !<span class=\"built_in\">isdigit</span>(c); c = getchar())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tf = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> readt;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; <span class=\"built_in\">isdigit</span>(c) &amp;&amp; c != <span class=\"string\">&#x27;.&#x27;</span>; c = getchar())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">readt:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; c == <span class=\"string\">&#x27;.&#x27;</span>; c = getchar())</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; <span class=\"built_in\">isdigit</span>(c); c = getchar())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tt = t * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\t++s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tr = (x + t / <span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, s)) * f;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dwrite</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"number\">48</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bit[<span class=\"number\">20</span>], p = <span class=\"number\">0</span>, i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; x; x /= <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\tbit[++p] = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = p; i &gt; <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(bit[i] + <span class=\"number\">48</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> n = <span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, k);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>), x = -x;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> y = (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)(x * n) % n;</span><br><span class=\"line\">\tx = (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)x;</span><br><span class=\"line\">\tdwrite(x), <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bit[<span class=\"number\">10</span>], p = <span class=\"number\">0</span>, i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; p &lt; k; y /= <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\tbit[++p] = y % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = p; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(bit[i] + <span class=\"number\">48</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tNode *lch, *rch;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> val, size;</span><br><span class=\"line\">\tNode(<span class=\"keyword\">int</span> key)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlch = rch = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tsize = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tval = key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Node *rot = <span class=\"keyword\">new</span> Node(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">L_rotate</span><span class=\"params\">(Node *x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *y = x-&gt;lch;</span><br><span class=\"line\">\tx-&gt;rch = y-&gt;lch;</span><br><span class=\"line\">\ty-&gt;lch = x;</span><br><span class=\"line\">\ty-&gt;size = x-&gt;size;</span><br><span class=\"line\">\tx-&gt;size = x-&gt;lch-&gt;size + x-&gt;rch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">R_rotate</span><span class=\"params\">(Node *x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *y = x-&gt;lch;</span><br><span class=\"line\">\tx-&gt;lch = y-&gt;rch;</span><br><span class=\"line\">\ty-&gt;rch = x;</span><br><span class=\"line\">\ty-&gt;size = x-&gt;size;</span><br><span class=\"line\">\tx-&gt;size = x-&gt;lch-&gt;size + x-&gt;rch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maintain</span><span class=\"params\">(Node *x, <span class=\"keyword\">bool</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag == <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x-&gt;lch-&gt;lch-&gt;size &gt; x-&gt;rch-&gt;size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tR_rotate(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;lch-&gt;rch-&gt;size &gt; x-&gt;rch-&gt;size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tR_rotate(x-&gt;lch);</span><br><span class=\"line\">\t\t\tR_rotate(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x-&gt;rch-&gt;rch-&gt;size &gt; x-&gt;lch-&gt;size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tL_rotate(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;rch-&gt;lch-&gt;size &gt; x-&gt;lch-&gt;size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tR_rotate(x-&gt;rch);</span><br><span class=\"line\">\t\t\tR_rotate(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmaintain(x-&gt;lch, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\tmaintain(x-&gt;rch, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\tmaintain(x, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\tmaintain(x, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node *x, <span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx = <span class=\"keyword\">new</span> Node(keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx-&gt;size++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (keys &lt; x-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tinsert(x-&gt;lch, keys);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tinsert(x-&gt;rch, keys);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmaintain(x, keys &gt;= x-&gt;val);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove</span><span class=\"params\">(Node *x, <span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dekey;</span><br><span class=\"line\">\t--x-&gt;size;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((keys == x-&gt;val) || (keys &lt; x-&gt;val &amp;&amp; x-&gt;lch == <span class=\"literal\">NULL</span>) || (keys &gt; x-&gt;val &amp;&amp; x-&gt;rch == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey = x-&gt;val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x-&gt;lch &amp;&amp; x-&gt;rch)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tx-&gt;val = remove(x-&gt;lch, x-&gt;val + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x-&gt;lch == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx = x-&gt;rch;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x-&gt;rch == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx = x-&gt;lch;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tx = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys &gt; x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey = remove(x-&gt;rch, keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys &lt; x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdekey = remove(x-&gt;rch, keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dekey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_min</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (x = rot; x-&gt;lch; x = x-&gt;lch)</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_max</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (x = rot; x-&gt;rch; x = x-&gt;rch)</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find_Kth</span><span class=\"params\">(Node *x, <span class=\"keyword\">int</span> K)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tr = x-&gt;lch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tr == K)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x-&gt;val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tr &lt; K)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find_Kth(x-&gt;rch, K - tr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find_Kth(x-&gt;lch, K);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ranking</span><span class=\"params\">(Node *x, <span class=\"keyword\">int</span> keys)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (keys &lt; x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ranking(x-&gt;lch, keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (keys &gt; x-&gt;val)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ranking(x-&gt;rch, keys);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x-&gt;lch-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Upper</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *now = rot;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result = <span class=\"number\">2147483600</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (now)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (now-&gt;val &gt; w &amp;&amp; now-&gt;val &lt; result)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tresult = now-&gt;val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (w &lt; now-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow = now-&gt;lch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow = now-&gt;rch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Lowwer</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *now = rot;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result = <span class=\"number\">-2147483600</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (now)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (now-&gt;val &lt; w &amp;&amp; now-&gt;val &gt; result)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tresult = now-&gt;val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (w &gt; now-&gt;val)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow = now-&gt;rch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnow = now-&gt;lch;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totN;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ttotN = read();</span><br><span class=\"line\">\t<span class=\"keyword\">register</span> <span class=\"keyword\">char</span> opt;</span><br><span class=\"line\">\t<span class=\"keyword\">register</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> K;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = <span class=\"number\">1</span>; i &lt;= totN; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\topt = getchar();</span><br><span class=\"line\">\t\tK = read();</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;1&#x27;</span>:</span><br><span class=\"line\">\t\t\tinsert(rot, K);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;2&#x27;</span>:</span><br><span class=\"line\">\t\t\tremove(rot, K);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;3&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(ranking(rot, K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;4&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(find_Kth(rot, K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;5&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(Lowwer(K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;6&#x27;</span>:</span><br><span class=\"line\">\t\t\twrite(Upper(K));</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n"},{"title":"关于递归与递推","date":"2020-01-29T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%888.php","_content":"又在洛谷上刷题。\n\n又是一题，\n\n# P1028 数的计算\n\n来，咱读题：\n\n### 题目描述\n\n我们要求找出具有下列性质数的个数(包含输入的自然数n*n*):\n\n先输入一个自然数n*n*(n \\le 1000*n*≤1000),然后对此自然数按照如下方法进行处理:\n\n1. 不作任何处理;\n2. 在它的左边加上一个自然数,但该自然数不能超过原数的一半;\n3. 加上数后,继续按此规则进行处理,直到不能再加自然数为止.\n\n### 输入格式\n\n11个自然数n*n*(n \\le 1000*n*≤1000)\n\n### 输出格式\n\n11个整数，表示具有该性质数的个数。\n\n### 输入输出样例\n\n**输入 #1**\n\n```\n6\n```\n\n**输出 #1**\n\n```\n6\n\n```\n\n### 说明/提示\n\n满足条件的数为\n\n6，16，26，126，36，136\n\n看完题，这题不很简单吗？一个递归不就解决？\n\n满怀信心地写程序：\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint s=0;\nint js(int a)\n{\n    a/=2;\n    for(int i=1;i<=a;i++)\n    {\n        s++;\n        js(i);\n    }\n    return s;\n}\nint main()\n{\n    int n;\n    cin>>n;\n    cout<<js(n)+1;\n} \n```\n\n一下F5都没有按（我用的Visual Studio 2019），就满怀信心的提交。\n\n结局并不是我想象的那样，而是这样：\n\n<img src=\"https://img2018.cnblogs.com/common/1924270/202001/1924270-20200130105231688-904029671.png\" alt=\"\" />\n\n（开始怀疑）\n\n自己试了一下，果然：\n\n<img src=\"https://img2018.cnblogs.com/common/1924270/202001/1924270-20200130105859198-1176811657.png\" alt=\"\" />\n\n这好歹也是个`I7-6700K`\n\n怎么也不知道应该怎样改进，只好查看了一下题解，发现题解使用的是递推算法。\n\n我们以4为例子来进行说明\n\n4后面可以跟上1,2组成14,24\n\n14后面跟不了,24可以跟上1组成124\n\n再加上4本身就可以得到4的种类\n\n即 14,24,124,4\n\n而我们只要算出1,2的种类就可以加起来得到4的种类\n\n因此，我们得到\n\n```cpp\n1 f[1]=1\n2 f[2]=2=f[1]+1\n3 f[3]=2=f[1]+1\n4 f[4]=4=f[1]+f[2]+1\n5 f[5]=4=f[1]+f[2]+1\n```\n\n以此类推，我们得到以下代码\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint fuc[1000];\nint main()\n{ \n    int n;\n    cin>>n;\n    for(int i=0;i<=n;i++)\n    {\n        for(int j=1;j<=i/2;j++)\n        {\n            fuc[i]+=fuc[j];\n        }\n        fuc[i]++;//还要加上这个数本身 \n    }\n    cout<<fuc[n];\n    return 0;\n}\n```\n\n我就发现了自己算法的问题：\n\n递推算法每算好一个数，下一个数就只需要加起来就行了；而递归算法每个数都要重新计算，自然效率低。\n","source":"_posts/关于递归与递推.md","raw":"---\ntitle: 关于递归与递推\ndate: 2020-01-30\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%888.php   \ntags: \n    - C++一本通题库\n    - 递归\n    - 递推\n---\n又在洛谷上刷题。\n\n又是一题，\n\n# P1028 数的计算\n\n来，咱读题：\n\n### 题目描述\n\n我们要求找出具有下列性质数的个数(包含输入的自然数n*n*):\n\n先输入一个自然数n*n*(n \\le 1000*n*≤1000),然后对此自然数按照如下方法进行处理:\n\n1. 不作任何处理;\n2. 在它的左边加上一个自然数,但该自然数不能超过原数的一半;\n3. 加上数后,继续按此规则进行处理,直到不能再加自然数为止.\n\n### 输入格式\n\n11个自然数n*n*(n \\le 1000*n*≤1000)\n\n### 输出格式\n\n11个整数，表示具有该性质数的个数。\n\n### 输入输出样例\n\n**输入 #1**\n\n```\n6\n```\n\n**输出 #1**\n\n```\n6\n\n```\n\n### 说明/提示\n\n满足条件的数为\n\n6，16，26，126，36，136\n\n看完题，这题不很简单吗？一个递归不就解决？\n\n满怀信心地写程序：\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint s=0;\nint js(int a)\n{\n    a/=2;\n    for(int i=1;i<=a;i++)\n    {\n        s++;\n        js(i);\n    }\n    return s;\n}\nint main()\n{\n    int n;\n    cin>>n;\n    cout<<js(n)+1;\n} \n```\n\n一下F5都没有按（我用的Visual Studio 2019），就满怀信心的提交。\n\n结局并不是我想象的那样，而是这样：\n\n<img src=\"https://img2018.cnblogs.com/common/1924270/202001/1924270-20200130105231688-904029671.png\" alt=\"\" />\n\n（开始怀疑）\n\n自己试了一下，果然：\n\n<img src=\"https://img2018.cnblogs.com/common/1924270/202001/1924270-20200130105859198-1176811657.png\" alt=\"\" />\n\n这好歹也是个`I7-6700K`\n\n怎么也不知道应该怎样改进，只好查看了一下题解，发现题解使用的是递推算法。\n\n我们以4为例子来进行说明\n\n4后面可以跟上1,2组成14,24\n\n14后面跟不了,24可以跟上1组成124\n\n再加上4本身就可以得到4的种类\n\n即 14,24,124,4\n\n而我们只要算出1,2的种类就可以加起来得到4的种类\n\n因此，我们得到\n\n```cpp\n1 f[1]=1\n2 f[2]=2=f[1]+1\n3 f[3]=2=f[1]+1\n4 f[4]=4=f[1]+f[2]+1\n5 f[5]=4=f[1]+f[2]+1\n```\n\n以此类推，我们得到以下代码\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint fuc[1000];\nint main()\n{ \n    int n;\n    cin>>n;\n    for(int i=0;i<=n;i++)\n    {\n        for(int j=1;j<=i/2;j++)\n        {\n            fuc[i]+=fuc[j];\n        }\n        fuc[i]++;//还要加上这个数本身 \n    }\n    cout<<fuc[n];\n    return 0;\n}\n```\n\n我就发现了自己算法的问题：\n\n递推算法每算好一个数，下一个数就只需要加起来就行了；而递归算法每个数都要重新计算，自然效率低。\n","slug":"关于递归与递推","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2mx001cpb0y0hkk4js0","content":"<p>又在洛谷上刷题。</p>\n<p>又是一题，</p>\n<h1 id=\"P1028-数的计算\"><a href=\"#P1028-数的计算\" class=\"headerlink\" title=\"P1028 数的计算\"></a>P1028 数的计算</h1><p>来，咱读题：</p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>我们要求找出具有下列性质数的个数(包含输入的自然数n<em>n</em>):</p>\n<p>先输入一个自然数n<em>n</em>(n \\le 1000<em>n</em>≤1000),然后对此自然数按照如下方法进行处理:</p>\n<ol>\n<li>不作任何处理;</li>\n<li>在它的左边加上一个自然数,但该自然数不能超过原数的一半;</li>\n<li>加上数后,继续按此规则进行处理,直到不能再加自然数为止.</li>\n</ol>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>11个自然数n<em>n</em>(n \\le 1000<em>n</em>≤1000)</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>11个整数，表示具有该性质数的个数。</p>\n<h3 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h3><p><strong>输入 #1</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h3><p>满足条件的数为</p>\n<p>6，16，26，126，36，136</p>\n<p>看完题，这题不很简单吗？一个递归不就解决？</p>\n<p>满怀信心地写程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">js</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a/=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=a;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s++;</span><br><span class=\"line\">        js(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;js(n)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>一下F5都没有按（我用的Visual Studio 2019），就满怀信心的提交。</p>\n<p>结局并不是我想象的那样，而是这样：</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/common/1924270/202001/1924270-20200130105231688-904029671.png\" alt=\"\" />\n\n<p>（开始怀疑）</p>\n<p>自己试了一下，果然：</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/common/1924270/202001/1924270-20200130105859198-1176811657.png\" alt=\"\" />\n\n<p>这好歹也是个<code>I7-6700K</code></p>\n<p>怎么也不知道应该怎样改进，只好查看了一下题解，发现题解使用的是递推算法。</p>\n<p>我们以4为例子来进行说明</p>\n<p>4后面可以跟上1,2组成14,24</p>\n<p>14后面跟不了,24可以跟上1组成124</p>\n<p>再加上4本身就可以得到4的种类</p>\n<p>即 14,24,124,4</p>\n<p>而我们只要算出1,2的种类就可以加起来得到4的种类</p>\n<p>因此，我们得到</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> f[<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span> f[<span class=\"number\">2</span>]=<span class=\"number\">2</span>=f[<span class=\"number\">1</span>]+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> f[<span class=\"number\">3</span>]=<span class=\"number\">2</span>=f[<span class=\"number\">1</span>]+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span> f[<span class=\"number\">4</span>]=<span class=\"number\">4</span>=f[<span class=\"number\">1</span>]+f[<span class=\"number\">2</span>]+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">5</span> f[<span class=\"number\">5</span>]=<span class=\"number\">4</span>=f[<span class=\"number\">1</span>]+f[<span class=\"number\">2</span>]+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>以此类推，我们得到以下代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> fuc[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=i/<span class=\"number\">2</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fuc[i]+=fuc[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fuc[i]++;<span class=\"comment\">//还要加上这个数本身 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;fuc[n];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我就发现了自己算法的问题：</p>\n<p>递推算法每算好一个数，下一个数就只需要加起来就行了；而递归算法每个数都要重新计算，自然效率低。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>又在洛谷上刷题。</p>\n<p>又是一题，</p>\n<h1 id=\"P1028-数的计算\"><a href=\"#P1028-数的计算\" class=\"headerlink\" title=\"P1028 数的计算\"></a>P1028 数的计算</h1><p>来，咱读题：</p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>我们要求找出具有下列性质数的个数(包含输入的自然数n<em>n</em>):</p>\n<p>先输入一个自然数n<em>n</em>(n \\le 1000<em>n</em>≤1000),然后对此自然数按照如下方法进行处理:</p>\n<ol>\n<li>不作任何处理;</li>\n<li>在它的左边加上一个自然数,但该自然数不能超过原数的一半;</li>\n<li>加上数后,继续按此规则进行处理,直到不能再加自然数为止.</li>\n</ol>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>11个自然数n<em>n</em>(n \\le 1000<em>n</em>≤1000)</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>11个整数，表示具有该性质数的个数。</p>\n<h3 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h3><p><strong>输入 #1</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出 #1</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h3><p>满足条件的数为</p>\n<p>6，16，26，126，36，136</p>\n<p>看完题，这题不很简单吗？一个递归不就解决？</p>\n<p>满怀信心地写程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">js</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a/=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=a;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s++;</span><br><span class=\"line\">        js(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;js(n)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>一下F5都没有按（我用的Visual Studio 2019），就满怀信心的提交。</p>\n<p>结局并不是我想象的那样，而是这样：</p>\n<img src=\"https://img2018.cnblogs.com/common/1924270/202001/1924270-20200130105231688-904029671.png\" alt=\"\" />\n\n<p>（开始怀疑）</p>\n<p>自己试了一下，果然：</p>\n<img src=\"https://img2018.cnblogs.com/common/1924270/202001/1924270-20200130105859198-1176811657.png\" alt=\"\" />\n\n<p>这好歹也是个<code>I7-6700K</code></p>\n<p>怎么也不知道应该怎样改进，只好查看了一下题解，发现题解使用的是递推算法。</p>\n<p>我们以4为例子来进行说明</p>\n<p>4后面可以跟上1,2组成14,24</p>\n<p>14后面跟不了,24可以跟上1组成124</p>\n<p>再加上4本身就可以得到4的种类</p>\n<p>即 14,24,124,4</p>\n<p>而我们只要算出1,2的种类就可以加起来得到4的种类</p>\n<p>因此，我们得到</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> f[<span class=\"number\">1</span>]=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span> f[<span class=\"number\">2</span>]=<span class=\"number\">2</span>=f[<span class=\"number\">1</span>]+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> f[<span class=\"number\">3</span>]=<span class=\"number\">2</span>=f[<span class=\"number\">1</span>]+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span> f[<span class=\"number\">4</span>]=<span class=\"number\">4</span>=f[<span class=\"number\">1</span>]+f[<span class=\"number\">2</span>]+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">5</span> f[<span class=\"number\">5</span>]=<span class=\"number\">4</span>=f[<span class=\"number\">1</span>]+f[<span class=\"number\">2</span>]+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>以此类推，我们得到以下代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> fuc[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=i/<span class=\"number\">2</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fuc[i]+=fuc[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fuc[i]++;<span class=\"comment\">//还要加上这个数本身 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;fuc[n];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我就发现了自己算法的问题：</p>\n<p>递推算法每算好一个数，下一个数就只需要加起来就行了；而递归算法每个数都要重新计算，自然效率低。</p>\n"},{"title":"关于运算符重载","date":"2020-04-24T16:00:00.000Z","description":"运算符重载是怎么回事呢？运算符相信大家都很熟悉，但是运算符重载是怎么回事呢，下面就让小编带大家一起了解吧。 运算符重载，其实就是重载运算符，大家可能会很惊讶运算符怎么会重载呢？但事实就是这样，小编也感到非常惊讶。 这就是关于运算符重载的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！","top_img":"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=476743152,3697553782&fm=26&gp=0.jpg","cover":"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2048673721,1712647245&fm=26&gp=0.jpg","_content":"# 前言\n\n这篇博客可能会比较短，但是这应该是我研究最久的博客之一了。\n\n# 思考起因\n\n<img src=\"https://s1.ax1x.com/2020/07/12/U1jSud.png\" alt=\"\" />\n\n首先看到这道题，因为位数明显会很大，所以第一个要想到的就是这道题要用到高精。\n\n当然，用到高精度的题很多。\n\n而这道题还要用到快速幂。\n\n同时用到高精和快速幂的题目也很多。\n\n的确。\n\n众所周知，在快速幂运算中，要多次用到乘法。所以乘法的简洁性很重要，否则，程序写起来会很麻烦。而我们只想写这样的快速幂：\n\n```cpp\nint poww(int a, int b) \n{\n    int ans = 1, base = a;\n    while (b != 0) \n   {\n        if (b & 1 != 0)\n            ans *= base;\n            base *= base;\n            b >>= 1;\n    }\n    return ans;\n}\n```\n\n以后更难的题中，我们还要用到更多高精乘法。\n\n那怎么办呢？\n\n这就用到我们的运算符重载了。\n\n# 研究历程\n\n再讲讲我的研究历程吧。\n\n先是想到要用重载运算符，觉得应该和重载函数是一样的，就自己先写了这个：\n\n```cpp\nstring operator*(string a,string b)\n{\n    \n}\n```\n\n发现不太行。\n\n于是从网上找资料：\n\n```cpp\n#include <iostream>\nusing namespace std;\n \nclass Box\n{\n   public:\n \n      double getVolume(void)\n      {\n         return length * breadth * height;\n      }\n      void setLength( double len )\n      {\n          length = len;\n      }\n \n      void setBreadth( double bre )\n      {\n          breadth = bre;\n      }\n \n      void setHeight( double hei )\n      {\n          height = hei;\n      }\n      // 重载 + 运算符，用于把两个 Box 对象相加\n      Box operator+(const Box& b)\n      {\n         Box box;\n         box.length = this->length + b.length;\n         box.breadth = this->breadth + b.breadth;\n         box.height = this->height + b.height;\n         return box;\n      }\n   private:\n      double length;      // 长度\n      double breadth;     // 宽度\n      double height;      // 高度\n};\n// 程序的主函数\nint main( )\n{\n   Box Box1;                // 声明 Box1，类型为 Box\n   Box Box2;                // 声明 Box2，类型为 Box\n   Box Box3;                // 声明 Box3，类型为 Box\n   double volume = 0.0;     // 把体积存储在该变量中\n \n   // Box1 详述\n   Box1.setLength(6.0); \n   Box1.setBreadth(7.0); \n   Box1.setHeight(5.0);\n \n   // Box2 详述\n   Box2.setLength(12.0); \n   Box2.setBreadth(13.0); \n   Box2.setHeight(10.0);\n \n   // Box1 的体积\n   volume = Box1.getVolume();\n   cout << \"Volume of Box1 : \" << volume <<endl;\n \n   // Box2 的体积\n   volume = Box2.getVolume();\n   cout << \"Volume of Box2 : \" << volume <<endl;\n \n   // 把两个对象相加，得到 Box3\n   Box3 = Box1 + Box2;\n \n   // Box3 的体积\n   volume = Box3.getVolume();\n   cout << \"Volume of Box3 : \" << volume <<endl;\n \n   return 0;\n}\n```\n\n```cpp\n#include<iostream>\nusing namespace std;\nclass complex { //复数类\npublic: //外部接口\n complex(double r = 0.0, double i = 0.0) { real = r; imag = i; } //构造函数_ \n const complex operator+(const complex &c) const ;\n \n const complex operator - (const complex &c) const;\n void display(); //输出复数\nprivate: //私有数据成员\n double real;  //复数实部\n double imag;  //复数虚部\n};\n \nconst complex complex:: operator+(const complex &c) const {\n return complex(real + c.real, imag + c.imag);\n}\n \nconst complex complex:: operator-(const complex &c) const {\n return complex(real - c.real, imag - c.imag);\n}\nvoid complex::display() {\n cout << \"(\" << real << \",\" << imag << \" i)\" << endl;\n}\nvoid main() {\n complex c1(5, 4), c2(2,\n10), c3; //三个复数类的对象\n cout << \"c1=\"; c1.display();\n cout << \"c2=\"; c2.display();\n c3 = c1 + c2; //使用重载运算符完成复数减法\n cout << \"c3=c1+c2=\";\n c3.display();\n c3 = c1 - c2; //使用重载运算符完成复数加法\n cout << \"c3=c1-c2=\";\n c3.display();\n}\n```\n\n全都是这种。\n\n这些东西，让我这个连类都不知道是什么的蒟蒻怎么看得懂？！\n\n继续不停的翻找，还都是这些。\n\n突然，灵光一现\n\n以前我在上清北学堂的时候，老师讲过大于、小于号的重载！\n\n于是又返回去看：\n\n<img src=\"https://s1.ax1x.com/2020/07/12/U1XKfO.jpg\" alt=\"\" />\n\n终于找到了！就是这个！\n\n# 正文\n\n这只是一个记录学习历程的博客，所以正文很短。\n\n所以我们要写的重载高精度乘法就是这样：\n\n```cpp\nstring operator*(const string &a,const string &b)\n{\n    \n    return ;\n}\n```\n\n还有这个：\n\n<img src=\"https://s1.ax1x.com/2020/07/12/U1XutK.png\" alt=\"\" />","source":"_posts/关于运算符重载.md","raw":"---\ntitle:  关于运算符重载\ndate:   2020-04-25\ntags:\n    - C++基础\n    - 运算符重载\ncategories: C++基础\ndescription: 运算符重载是怎么回事呢？运算符相信大家都很熟悉，但是运算符重载是怎么回事呢，下面就让小编带大家一起了解吧。 运算符重载，其实就是重载运算符，大家可能会很惊讶运算符怎么会重载呢？但事实就是这样，小编也感到非常惊讶。 这就是关于运算符重载的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！\ntop_img: https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=476743152,3697553782&fm=26&gp=0.jpg\ncover: https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2048673721,1712647245&fm=26&gp=0.jpg\n---\n# 前言\n\n这篇博客可能会比较短，但是这应该是我研究最久的博客之一了。\n\n# 思考起因\n\n<img src=\"https://s1.ax1x.com/2020/07/12/U1jSud.png\" alt=\"\" />\n\n首先看到这道题，因为位数明显会很大，所以第一个要想到的就是这道题要用到高精。\n\n当然，用到高精度的题很多。\n\n而这道题还要用到快速幂。\n\n同时用到高精和快速幂的题目也很多。\n\n的确。\n\n众所周知，在快速幂运算中，要多次用到乘法。所以乘法的简洁性很重要，否则，程序写起来会很麻烦。而我们只想写这样的快速幂：\n\n```cpp\nint poww(int a, int b) \n{\n    int ans = 1, base = a;\n    while (b != 0) \n   {\n        if (b & 1 != 0)\n            ans *= base;\n            base *= base;\n            b >>= 1;\n    }\n    return ans;\n}\n```\n\n以后更难的题中，我们还要用到更多高精乘法。\n\n那怎么办呢？\n\n这就用到我们的运算符重载了。\n\n# 研究历程\n\n再讲讲我的研究历程吧。\n\n先是想到要用重载运算符，觉得应该和重载函数是一样的，就自己先写了这个：\n\n```cpp\nstring operator*(string a,string b)\n{\n    \n}\n```\n\n发现不太行。\n\n于是从网上找资料：\n\n```cpp\n#include <iostream>\nusing namespace std;\n \nclass Box\n{\n   public:\n \n      double getVolume(void)\n      {\n         return length * breadth * height;\n      }\n      void setLength( double len )\n      {\n          length = len;\n      }\n \n      void setBreadth( double bre )\n      {\n          breadth = bre;\n      }\n \n      void setHeight( double hei )\n      {\n          height = hei;\n      }\n      // 重载 + 运算符，用于把两个 Box 对象相加\n      Box operator+(const Box& b)\n      {\n         Box box;\n         box.length = this->length + b.length;\n         box.breadth = this->breadth + b.breadth;\n         box.height = this->height + b.height;\n         return box;\n      }\n   private:\n      double length;      // 长度\n      double breadth;     // 宽度\n      double height;      // 高度\n};\n// 程序的主函数\nint main( )\n{\n   Box Box1;                // 声明 Box1，类型为 Box\n   Box Box2;                // 声明 Box2，类型为 Box\n   Box Box3;                // 声明 Box3，类型为 Box\n   double volume = 0.0;     // 把体积存储在该变量中\n \n   // Box1 详述\n   Box1.setLength(6.0); \n   Box1.setBreadth(7.0); \n   Box1.setHeight(5.0);\n \n   // Box2 详述\n   Box2.setLength(12.0); \n   Box2.setBreadth(13.0); \n   Box2.setHeight(10.0);\n \n   // Box1 的体积\n   volume = Box1.getVolume();\n   cout << \"Volume of Box1 : \" << volume <<endl;\n \n   // Box2 的体积\n   volume = Box2.getVolume();\n   cout << \"Volume of Box2 : \" << volume <<endl;\n \n   // 把两个对象相加，得到 Box3\n   Box3 = Box1 + Box2;\n \n   // Box3 的体积\n   volume = Box3.getVolume();\n   cout << \"Volume of Box3 : \" << volume <<endl;\n \n   return 0;\n}\n```\n\n```cpp\n#include<iostream>\nusing namespace std;\nclass complex { //复数类\npublic: //外部接口\n complex(double r = 0.0, double i = 0.0) { real = r; imag = i; } //构造函数_ \n const complex operator+(const complex &c) const ;\n \n const complex operator - (const complex &c) const;\n void display(); //输出复数\nprivate: //私有数据成员\n double real;  //复数实部\n double imag;  //复数虚部\n};\n \nconst complex complex:: operator+(const complex &c) const {\n return complex(real + c.real, imag + c.imag);\n}\n \nconst complex complex:: operator-(const complex &c) const {\n return complex(real - c.real, imag - c.imag);\n}\nvoid complex::display() {\n cout << \"(\" << real << \",\" << imag << \" i)\" << endl;\n}\nvoid main() {\n complex c1(5, 4), c2(2,\n10), c3; //三个复数类的对象\n cout << \"c1=\"; c1.display();\n cout << \"c2=\"; c2.display();\n c3 = c1 + c2; //使用重载运算符完成复数减法\n cout << \"c3=c1+c2=\";\n c3.display();\n c3 = c1 - c2; //使用重载运算符完成复数加法\n cout << \"c3=c1-c2=\";\n c3.display();\n}\n```\n\n全都是这种。\n\n这些东西，让我这个连类都不知道是什么的蒟蒻怎么看得懂？！\n\n继续不停的翻找，还都是这些。\n\n突然，灵光一现\n\n以前我在上清北学堂的时候，老师讲过大于、小于号的重载！\n\n于是又返回去看：\n\n<img src=\"https://s1.ax1x.com/2020/07/12/U1XKfO.jpg\" alt=\"\" />\n\n终于找到了！就是这个！\n\n# 正文\n\n这只是一个记录学习历程的博客，所以正文很短。\n\n所以我们要写的重载高精度乘法就是这样：\n\n```cpp\nstring operator*(const string &a,const string &b)\n{\n    \n    return ;\n}\n```\n\n还有这个：\n\n<img src=\"https://s1.ax1x.com/2020/07/12/U1XutK.png\" alt=\"\" />","slug":"关于运算符重载","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2my001fpb0y3rgac67e","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这篇博客可能会比较短，但是这应该是我研究最久的博客之一了。</p>\n<h1 id=\"思考起因\"><a href=\"#思考起因\" class=\"headerlink\" title=\"思考起因\"></a>思考起因</h1><img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://s1.ax1x.com/2020/07/12/U1jSud.png\" alt=\"\" />\n\n<p>首先看到这道题，因为位数明显会很大，所以第一个要想到的就是这道题要用到高精。</p>\n<p>当然，用到高精度的题很多。</p>\n<p>而这道题还要用到快速幂。</p>\n<p>同时用到高精和快速幂的题目也很多。</p>\n<p>的确。</p>\n<p>众所周知，在快速幂运算中，要多次用到乘法。所以乘法的简洁性很重要，否则，程序写起来会很麻烦。而我们只想写这样的快速幂：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">poww</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>, base = a;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b != <span class=\"number\">0</span>) </span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">            ans *= base;</span><br><span class=\"line\">            base *= base;</span><br><span class=\"line\">            b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以后更难的题中，我们还要用到更多高精乘法。</p>\n<p>那怎么办呢？</p>\n<p>这就用到我们的运算符重载了。</p>\n<h1 id=\"研究历程\"><a href=\"#研究历程\" class=\"headerlink\" title=\"研究历程\"></a>研究历程</h1><p>再讲讲我的研究历程吧。</p>\n<p>先是想到要用重载运算符，觉得应该和重载函数是一样的，就自己先写了这个：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> <span class=\"keyword\">operator</span>*(<span class=\"built_in\">string</span> a,<span class=\"built_in\">string</span> b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现不太行。</p>\n<p>于是从网上找资料：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span>:</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getVolume</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> length * breadth * height;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setLength</span><span class=\"params\">( <span class=\"keyword\">double</span> len )</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          length = len;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBreadth</span><span class=\"params\">( <span class=\"keyword\">double</span> bre )</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          breadth = bre;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">( <span class=\"keyword\">double</span> hei )</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          height = hei;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 重载 + 运算符，用于把两个 Box 对象相加</span></span><br><span class=\"line\">      Box <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Box&amp; b)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         Box box;</span><br><span class=\"line\">         box.length = <span class=\"keyword\">this</span>-&gt;length + b.length;</span><br><span class=\"line\">         box.breadth = <span class=\"keyword\">this</span>-&gt;breadth + b.breadth;</span><br><span class=\"line\">         box.height = <span class=\"keyword\">this</span>-&gt;height + b.height;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> box;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   <span class=\"keyword\">private</span>:</span><br><span class=\"line\">      <span class=\"keyword\">double</span> length;      <span class=\"comment\">// 长度</span></span><br><span class=\"line\">      <span class=\"keyword\">double</span> breadth;     <span class=\"comment\">// 宽度</span></span><br><span class=\"line\">      <span class=\"keyword\">double</span> height;      <span class=\"comment\">// 高度</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 程序的主函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   Box Box1;                <span class=\"comment\">// 声明 Box1，类型为 Box</span></span><br><span class=\"line\">   Box Box2;                <span class=\"comment\">// 声明 Box2，类型为 Box</span></span><br><span class=\"line\">   Box Box3;                <span class=\"comment\">// 声明 Box3，类型为 Box</span></span><br><span class=\"line\">   <span class=\"keyword\">double</span> volume = <span class=\"number\">0.0</span>;     <span class=\"comment\">// 把体积存储在该变量中</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// Box1 详述</span></span><br><span class=\"line\">   Box1.setLength(<span class=\"number\">6.0</span>); </span><br><span class=\"line\">   Box1.setBreadth(<span class=\"number\">7.0</span>); </span><br><span class=\"line\">   Box1.setHeight(<span class=\"number\">5.0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// Box2 详述</span></span><br><span class=\"line\">   Box2.setLength(<span class=\"number\">12.0</span>); </span><br><span class=\"line\">   Box2.setBreadth(<span class=\"number\">13.0</span>); </span><br><span class=\"line\">   Box2.setHeight(<span class=\"number\">10.0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// Box1 的体积</span></span><br><span class=\"line\">   volume = Box1.getVolume();</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;Volume of Box1 : &quot;</span> &lt;&lt; volume &lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// Box2 的体积</span></span><br><span class=\"line\">   volume = Box2.getVolume();</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;Volume of Box2 : &quot;</span> &lt;&lt; volume &lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// 把两个对象相加，得到 Box3</span></span><br><span class=\"line\">   Box3 = Box1 + Box2;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// Box3 的体积</span></span><br><span class=\"line\">   volume = Box3.getVolume();</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;Volume of Box3 : &quot;</span> &lt;&lt; volume &lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">complex</span> &#123;</span> <span class=\"comment\">//复数类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>: <span class=\"comment\">//外部接口</span></span><br><span class=\"line\"> <span class=\"built_in\">complex</span>(<span class=\"keyword\">double</span> r = <span class=\"number\">0.0</span>, <span class=\"keyword\">double</span> i = <span class=\"number\">0.0</span>) &#123; real = r; imag = i; &#125; <span class=\"comment\">//构造函数_ </span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> &amp;c) <span class=\"keyword\">const</span> ;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> <span class=\"keyword\">operator</span> - (<span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> &amp;c) <span class=\"keyword\">const</span>;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>; <span class=\"comment\">//输出复数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">//私有数据成员</span></span><br><span class=\"line\"> <span class=\"keyword\">double</span> real;  <span class=\"comment\">//复数实部</span></span><br><span class=\"line\"> <span class=\"keyword\">double</span> imag;  <span class=\"comment\">//复数虚部</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> <span class=\"built_in\">complex</span>:: <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> &amp;c) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">complex</span>(real + c.real, imag + c.imag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> <span class=\"built_in\">complex</span>:: <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> &amp;c) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">complex</span>(real - c.real, imag - c.imag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">complex::display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;(&quot;</span> &lt;&lt; real &lt;&lt; <span class=\"string\">&quot;,&quot;</span> &lt;&lt; imag &lt;&lt; <span class=\"string\">&quot; i)&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> complex c1(5, 4), c2(2,</span><br><span class=\"line\"><span class=\"number\">10</span>), c3; <span class=\"comment\">//三个复数类的对象</span></span><br><span class=\"line\"> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c1=&quot;</span>; c1.display();</span><br><span class=\"line\"> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c2=&quot;</span>; c2.display();</span><br><span class=\"line\"> c3 = c1 + c2; <span class=\"comment\">//使用重载运算符完成复数减法</span></span><br><span class=\"line\"> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c3=c1+c2=&quot;</span>;</span><br><span class=\"line\"> c3.display();</span><br><span class=\"line\"> c3 = c1 - c2; <span class=\"comment\">//使用重载运算符完成复数加法</span></span><br><span class=\"line\"> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c3=c1-c2=&quot;</span>;</span><br><span class=\"line\"> c3.display();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>全都是这种。</p>\n<p>这些东西，让我这个连类都不知道是什么的蒟蒻怎么看得懂？！</p>\n<p>继续不停的翻找，还都是这些。</p>\n<p>突然，灵光一现</p>\n<p>以前我在上清北学堂的时候，老师讲过大于、小于号的重载！</p>\n<p>于是又返回去看：</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://s1.ax1x.com/2020/07/12/U1XKfO.jpg\" alt=\"\" />\n\n<p>终于找到了！就是这个！</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>这只是一个记录学习历程的博客，所以正文很短。</p>\n<p>所以我们要写的重载高精度乘法就是这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;a,<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有这个：</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://s1.ax1x.com/2020/07/12/U1XutK.png\" alt=\"\" />","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这篇博客可能会比较短，但是这应该是我研究最久的博客之一了。</p>\n<h1 id=\"思考起因\"><a href=\"#思考起因\" class=\"headerlink\" title=\"思考起因\"></a>思考起因</h1><img src=\"https://s1.ax1x.com/2020/07/12/U1jSud.png\" alt=\"\" />\n\n<p>首先看到这道题，因为位数明显会很大，所以第一个要想到的就是这道题要用到高精。</p>\n<p>当然，用到高精度的题很多。</p>\n<p>而这道题还要用到快速幂。</p>\n<p>同时用到高精和快速幂的题目也很多。</p>\n<p>的确。</p>\n<p>众所周知，在快速幂运算中，要多次用到乘法。所以乘法的简洁性很重要，否则，程序写起来会很麻烦。而我们只想写这样的快速幂：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">poww</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>, base = a;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b != <span class=\"number\">0</span>) </span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">            ans *= base;</span><br><span class=\"line\">            base *= base;</span><br><span class=\"line\">            b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以后更难的题中，我们还要用到更多高精乘法。</p>\n<p>那怎么办呢？</p>\n<p>这就用到我们的运算符重载了。</p>\n<h1 id=\"研究历程\"><a href=\"#研究历程\" class=\"headerlink\" title=\"研究历程\"></a>研究历程</h1><p>再讲讲我的研究历程吧。</p>\n<p>先是想到要用重载运算符，觉得应该和重载函数是一样的，就自己先写了这个：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> <span class=\"keyword\">operator</span>*(<span class=\"built_in\">string</span> a,<span class=\"built_in\">string</span> b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现不太行。</p>\n<p>于是从网上找资料：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span>:</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getVolume</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> length * breadth * height;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setLength</span><span class=\"params\">( <span class=\"keyword\">double</span> len )</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          length = len;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBreadth</span><span class=\"params\">( <span class=\"keyword\">double</span> bre )</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          breadth = bre;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">( <span class=\"keyword\">double</span> hei )</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          height = hei;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 重载 + 运算符，用于把两个 Box 对象相加</span></span><br><span class=\"line\">      Box <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Box&amp; b)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         Box box;</span><br><span class=\"line\">         box.length = <span class=\"keyword\">this</span>-&gt;length + b.length;</span><br><span class=\"line\">         box.breadth = <span class=\"keyword\">this</span>-&gt;breadth + b.breadth;</span><br><span class=\"line\">         box.height = <span class=\"keyword\">this</span>-&gt;height + b.height;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> box;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   <span class=\"keyword\">private</span>:</span><br><span class=\"line\">      <span class=\"keyword\">double</span> length;      <span class=\"comment\">// 长度</span></span><br><span class=\"line\">      <span class=\"keyword\">double</span> breadth;     <span class=\"comment\">// 宽度</span></span><br><span class=\"line\">      <span class=\"keyword\">double</span> height;      <span class=\"comment\">// 高度</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 程序的主函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   Box Box1;                <span class=\"comment\">// 声明 Box1，类型为 Box</span></span><br><span class=\"line\">   Box Box2;                <span class=\"comment\">// 声明 Box2，类型为 Box</span></span><br><span class=\"line\">   Box Box3;                <span class=\"comment\">// 声明 Box3，类型为 Box</span></span><br><span class=\"line\">   <span class=\"keyword\">double</span> volume = <span class=\"number\">0.0</span>;     <span class=\"comment\">// 把体积存储在该变量中</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// Box1 详述</span></span><br><span class=\"line\">   Box1.setLength(<span class=\"number\">6.0</span>); </span><br><span class=\"line\">   Box1.setBreadth(<span class=\"number\">7.0</span>); </span><br><span class=\"line\">   Box1.setHeight(<span class=\"number\">5.0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// Box2 详述</span></span><br><span class=\"line\">   Box2.setLength(<span class=\"number\">12.0</span>); </span><br><span class=\"line\">   Box2.setBreadth(<span class=\"number\">13.0</span>); </span><br><span class=\"line\">   Box2.setHeight(<span class=\"number\">10.0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// Box1 的体积</span></span><br><span class=\"line\">   volume = Box1.getVolume();</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;Volume of Box1 : &quot;</span> &lt;&lt; volume &lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// Box2 的体积</span></span><br><span class=\"line\">   volume = Box2.getVolume();</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;Volume of Box2 : &quot;</span> &lt;&lt; volume &lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// 把两个对象相加，得到 Box3</span></span><br><span class=\"line\">   Box3 = Box1 + Box2;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// Box3 的体积</span></span><br><span class=\"line\">   volume = Box3.getVolume();</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;Volume of Box3 : &quot;</span> &lt;&lt; volume &lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">complex</span> &#123;</span> <span class=\"comment\">//复数类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>: <span class=\"comment\">//外部接口</span></span><br><span class=\"line\"> <span class=\"built_in\">complex</span>(<span class=\"keyword\">double</span> r = <span class=\"number\">0.0</span>, <span class=\"keyword\">double</span> i = <span class=\"number\">0.0</span>) &#123; real = r; imag = i; &#125; <span class=\"comment\">//构造函数_ </span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> &amp;c) <span class=\"keyword\">const</span> ;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> <span class=\"keyword\">operator</span> - (<span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> &amp;c) <span class=\"keyword\">const</span>;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>; <span class=\"comment\">//输出复数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">//私有数据成员</span></span><br><span class=\"line\"> <span class=\"keyword\">double</span> real;  <span class=\"comment\">//复数实部</span></span><br><span class=\"line\"> <span class=\"keyword\">double</span> imag;  <span class=\"comment\">//复数虚部</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> <span class=\"built_in\">complex</span>:: <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> &amp;c) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">complex</span>(real + c.real, imag + c.imag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> <span class=\"built_in\">complex</span>:: <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> <span class=\"built_in\">complex</span> &amp;c) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">complex</span>(real - c.real, imag - c.imag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">complex::display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;(&quot;</span> &lt;&lt; real &lt;&lt; <span class=\"string\">&quot;,&quot;</span> &lt;&lt; imag &lt;&lt; <span class=\"string\">&quot; i)&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> complex c1(5, 4), c2(2,</span><br><span class=\"line\"><span class=\"number\">10</span>), c3; <span class=\"comment\">//三个复数类的对象</span></span><br><span class=\"line\"> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c1=&quot;</span>; c1.display();</span><br><span class=\"line\"> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c2=&quot;</span>; c2.display();</span><br><span class=\"line\"> c3 = c1 + c2; <span class=\"comment\">//使用重载运算符完成复数减法</span></span><br><span class=\"line\"> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c3=c1+c2=&quot;</span>;</span><br><span class=\"line\"> c3.display();</span><br><span class=\"line\"> c3 = c1 - c2; <span class=\"comment\">//使用重载运算符完成复数加法</span></span><br><span class=\"line\"> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c3=c1-c2=&quot;</span>;</span><br><span class=\"line\"> c3.display();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>全都是这种。</p>\n<p>这些东西，让我这个连类都不知道是什么的蒟蒻怎么看得懂？！</p>\n<p>继续不停的翻找，还都是这些。</p>\n<p>突然，灵光一现</p>\n<p>以前我在上清北学堂的时候，老师讲过大于、小于号的重载！</p>\n<p>于是又返回去看：</p>\n<img src=\"https://s1.ax1x.com/2020/07/12/U1XKfO.jpg\" alt=\"\" />\n\n<p>终于找到了！就是这个！</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>这只是一个记录学习历程的博客，所以正文很短。</p>\n<p>所以我们要写的重载高精度乘法就是这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;a,<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有这个：</p>\n<img src=\"https://s1.ax1x.com/2020/07/12/U1XutK.png\" alt=\"\" />"},{"title":"关于各种背包问题","date":"2020-05-21T16:00:00.000Z","header-img":"img/post-bg-js-version.jpg","catalog":true,"description":"关于背包问题的讲解。","top_img":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594525366471&di=8e3ffaabf0a2b1ea4b30189cf73ed2e1&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F3904775955ff065697bb05f399e818e4d85065e388323-rfUlex_fw658","cover":"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1067197159,3623630202&fm=26&gp=0.jpg","_content":"\n# 概述\n\n## 嗯……背包问题是什么？\n\n背包问题，是动态规划问题中的典型的一类。顾名思义，是跟背包有关的问题（竟然和名字有关，爷青结）。\n\n大概就是讲背包空间有限，怎样合理地装物品可以让总价值最高的问题。\n\n其实也不是非常难。\n\n## 本文讲哪几类？\n\n背包问题的主要难点也就在于种类繁多，需要记忆各种递推公式、循环结构。\n\n不过毕竟是记忆而已，总是比其他需要现场推倒递推公式的要好不少。\n\n本文主要讲以下几类：\n\n**01背包问题**\n\n**完全背包问题**\n\n**多重背包问题**\n\n**二维费用背包问题**\n\n**分组背包问题**\n\n# 01背包问题\n\n## 题目\n\n#### 题目描述\n\n一个旅行者有一个最多能装M公斤的背包，现在有n件物品，它们的重量分别是$$W_{1}$$，$$W_{2}$$，...,$$W_{n}$$,它们的价值分别为$$C_{1}$$,$$C_{2}$$,...,$$C_{n}$$，求旅行者能获得最大总价值。\n\n#### 输入\n\n第一行：两个整数，M(背包容量，M≤200)和N(物品数量，N≤30)；\n\n第2~N+1行：每行二个整数$$W_{i}$$ ,$$ C_{i}$$表示每个物品的重量和价值。\n\n#### 输出\n\n仅一行，一个数，表示最大总价值。\n\n输入样例\n\n```cpp\n10 4\n2 1\n3 3\n4 5\n7 9\n```\n\n输出样例\n\n```cpp\n12\n```\n\n## 讲解\n\n既然要用用动态规划法解决0-1背包问题，我们就先定义动态规划的三个要点，即状态、状态转移方程和边界条件。\n\n首先我们用子问题定义状态，我们用F(i,j)表示把前i件物品放入容量为j的背包中的最大总重量。\n\n然后我们要考虑怎样的状态转移方程可以把这个问题转化为更小的子问题。我们依然以每一个物品都有放或不放两种选择的策略为基础，考虑第i件物品，如果我们选择不放第i件物品，那么问题就直接转化为把前i-1件物品放入容量为j的背包中的最大总重量，如果我们选择放第i件物品，那么问题就转化为把前i-1件物品放入容量为j-V[i]的背包中的最大总重量加上第i件物品的重量（这里值得注意的一点是，如果j-V[i]<0，即放入第i件物品后超过了背包容量的限制，那么我们就只能选择不放第i件物品了）。所以状态转移方程为\n\n```cpp\nF(i,j)=max{F(i-1,j),F(i-1,j-V[i])+W[i]}\n```\n\n边界条件则很容易得到，i=0时`F(i,j)`为0（没有物品就没有重量），j<0时`F(i,j)`为负无穷（但在代码中并不会这样初始化，我们在`j-V[i]<0`时不计算第二种情况即可）。最终答案则是`f(n,C)`。但其实这个空间复杂度是可以优化的。\n\n可以直接用`f[i]`来表示当重量为i时，可以有的最大价值。\n\n状态转移方程：\n\n```cpp\nf[j] = max(f[j], f[j-c[i]]+w[i])\n```\n\n到了这里，终于要讲循环顺序的问题了。\n\n其实第二层循环为什么要反向的问题，我也研究了好久，终于在看一篇文章的时候恍然大悟。\n\n根据题意，每种物品只有一件。\n\n当我们循环的时候，如果正序，那自然就会从前到后的更新数组。\n\n那如果背包容量大于某件物品的多倍呢？\n\n而恰好这件物品性价比很高？\n\n假设a是一个常数。这件物品的质量为w。\n\n那么，比如说，我们在循环到i=a的时候，把这件物品装进了背包。\n\n那再循环到i=a+w的时候，可能又会把这件物品装进背包。\n\n也就是说，这件物品被使用了两次，甚至后面可能更多。\n\n而根据题意，每件物品只有一个。\n\n而对于每一次更新，只会用到i比当前小的数据，而不会用到i比当前大的。（因为要查看`f[i-w[j]]`,w[j]不可能是负的）\n\n所以，先把大的更新了是没有问题的。\n\n（学了背包问题这么久，终于把这个问题解决了！！！开心！！！）\n\n## 核心代码：\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#define M 1000\n\nusing namespace std;\n\nint f[M], c[M], w[M];\nint ans, v, m;\n\nint main() \n{\n    scanf(\"%d%d\", &v, &m);\n    for(int i = 1; i <= m; i++)\n    { \n        scanf(\"%d%d\", &c[i], &w[i]);\n    } \n    for(int i = 1; i <= m; i++)\n    { \n        for(int j = v; j >= c[i]; j--) \n        {\n            f[j] = max(f[j], f[j-c[i]]+w[i]);\n        }\n    } \n    printf(\"%d\\n\", f[v]);\n    return 0;\n}\n```\n\n# 完全背包问题\n\n## 题目\n\n#### 题目描述\n\n设有n种物品，每种物品有一个重量及一个价值。但每种物品的数量是无限的，同时有一个背包，最大载重量为M，今从n种物品中选取若干件(同一种物品可以多次选取)，使其重量的和小于等于M，而价值的和为最大。\n\n#### 输入\n\n第一行：两个整数，M(背包容量，M≤200)和N(物品数量，N≤30)；\n\n第2~N+1行：每行二个整数$$W_{i}$$，$$C_{i}$$表示每个物品的重量和价值。\n\n#### 输出\n\n仅一行，一个数，表示最大总价值。\n\n输入样例\n\n```cpp\n10 4\n2 1\n3 3\n4 5\n7 9\n```\n\n#### 输出样例\n\n```cpp\nmax=12\n```\n\n## 讲解\n\n那么，既然刚才讲了01背包因为每种物品只有一个所以只能逆序循环，完全背包问题自然就是把循环顺序改为顺序就可以了！\n\n——就这？就这？就这？\n\n——对，就这。\n\n——啊这，泪目\n\n[doge]\n\n## 核心代码\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#define M 1000\n\nusing namespace std;\n\nint f[M], c[M], w[M];\nint ans, v, m;\n\nint main() \n{\n    scanf(\"%d%d\", &v, &m);\n    for(int i = 1; i <= m; i++)\n    { \n        scanf(\"%d%d\", &c[i], &w[i]);\n    } \n    for(int i = 1; i <= m; i++)\n    { \n        for(int j = c[i]; j <= v; j++) \n        {\n            f[j] = max(f[j], f[j-c[i]]+w[i]);\n        }\n    } \n    printf(\"max=%d\\n\", f[v]);\n    return 0;\n}\n```\n\n#  多重背包问题\n\n## 题目\n\n#### 题目描述\n\n为了庆贺班级在校运动会上取得全校第一名成绩，班主任决定开一场庆功会，为此拨款购买奖品犒劳运动员。期望拨款金额能购买最大价值的奖品，可以补充他们的精力和体力。\n\n#### 输入\n\n第一行二个数`n`(n≤500)，`m`(m≤6000)，其中n代表希望购买的奖品的种数，m表示拨款金额。\n\n接下来n行，每行3个数，`v`、`w`、`s`，分别表示第I种奖品的价格、价值（价格与价值是不同的概念）和能购买的最大数量（买0件到s件均可），其中v≤100，w≤1000，s≤10。\n\n#### 输出\n\n一行：一个数，表示此次购买能获得的最大的价值（注意！不是价格）。\n\n#### 输入样例\n\n```\n5 1000\n80 20 4\n40 50 9\n30 50 7\n40 30 6\n20 20 1\n```\n\n#### 输出样例\n\n```\n1040\n```\n\n## 讲解\n\n其实多重背包问题，虽然一个物品有了好几个，但是仍然可以按照01背包问题的思路，每个物品能取几件就存储几次就好了（当做不同的物品）\n\n## 核心代码\n\n```cpp\n#include <bits/stdc++.h>\n#define M 1000\n\nusing namespace std;\n\nint f[M], c[M], w[M],num[M];\nint ans, v, m;\n\nint main()\n{\n        scanf(\"%d%d\", &v, &m);\n        for(int i = 1; i <= m; i++)\n        {\n            scanf(\"%d%d%d\", &c[i], &w[i],&num[i]);\n        }\n        int jjc=m;\n        for (int i = 1; i <= m; ++i)\n        {\n            for (int j = 1; j <= num[i]; ++j)\n            {\n                c[jjc]=c[i];\n                w[jjc]=w[i];\n                jjc++;\n            }\n        }\n        for(int i = 1; i <= m; i++)\n        {\n            for(int j = c[i]; j <= v; j++)\n            {\n                f[j] = max(f[j], f[j-c[i]]+w[i]);\n            }\n        }\n        printf(\"max=%d\\n\", f[v]);\n        return 0;\n}\n```\n\n# 二维费用背包问题\n\n##题目\n\n#### 题目描述\n\n宠物小精灵是一部讲述小智和他的搭档皮卡丘一起冒险的故事。\n\n一天，小智和皮卡丘来到了小精灵狩猎场，里面有很多珍贵的野生宠物小精灵。小智也想收服其中的一些小精灵。然而，野生的小精灵并不那么容易被收服。对于每一个野生小精灵而言，小智可能需要使用很多个精灵球才能收服它，而在收服过程中，野生小精灵也会对皮卡丘造成一定的伤害（从而减少皮卡丘的体力）。当皮卡丘的体力小于等于0时，小智就必须结束狩猎（因为他需要给皮卡丘疗伤），而使得皮卡丘体力小于等于0的野生小精灵也不会被小智收服。当小智的精灵球用完时，狩猎也宣告结束。\n\n我们假设小智遇到野生小精灵时有两个选择：收服它，或者离开它。如果小智选择了收服，那么一定会扔出能够收服该小精灵的精灵球，而皮卡丘也一定会受到相应的伤害；如果选择离开它，那么小智不会损失精灵球，皮卡丘也不会损失体力。\n\n小智的目标有两个：主要目标是收服尽可能多的野生小精灵；如果可以收服的小精灵数量一样，小智希望皮卡丘受到的伤害越小（剩余体力越大），因为他们还要继续冒险。\n\n现在已知小智的精灵球数量和皮卡丘的初始体力，已知每一个小精灵需要的用于收服的精灵球数目和它在被收服过程中会对皮卡丘造成的伤害数目。请问，小智该如何选择收服哪些小精灵以达到他的目标呢？\n\n#### 输入\n\n输入数据的第一行包含三个整数：N(0<N<1000)，M(0<M<500)，K(0<K<100)，分别代表小智的精灵球数量、皮卡丘初始的体力值、野生小精灵的数量。\n\n之后的K行，每一行代表一个野生小精灵，包括两个整数：收服该小精灵需要的精灵球的数量，以及收服过程中对皮卡丘造成的伤害。\n\n#### 输出\n\n输出为一行，包含两个整数：C，R，分别表示最多收服C个小精灵，以及收服C个小精灵时皮卡丘的剩余体力值最多为R。\n\n#### 输入样例#01\n\n```cpp\n10 100 5\n7 10\n2 40\n2 50\n1 20\n4 20\n```\n\n#### 输出样例#01\n\n```cpp\n3 30\n```\n\n#### 输入样例#02\n\n```cpp\n10 100 5\n\n8 110\n\n12 10\n\n20 10\n\n5 200\n\n1 110\n```\n\n####输出样例#02\n\n```cpp\n0 100\n```\n\n#### 提示\n\n对于样例输入2：小智一个小精灵都没法收服，皮卡丘也不会收到任何伤害，所以输出`0 100`。\n\n# 分组背包问题\n\n## 题目\n\n#### 题目描述\n\n一个旅行者有一个最多能装V公斤的背包，现在有n件物品，它们的重量分别是$$W_{1}$$，$$W_{2}$$，...,$$W_{n}$$,它们的价值分别为$$C_{1}$$,$$C_{2}$$,...,$$C_{n}$$，这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。\n\n#### 输入\n\n第一行：三个整数，`V`(背包容量，V≤200)，`N`(物品数量，N≤30)和`T`(最大组号，T≤10)；\n\n第2~N+1行：每行三个整数$$W_{i}$$,$$C_{i}$$,$$P_{i}$$表示每个物品的重量，价值，所属组号。\n\n#### 输出\n\n仅一行，一个数，表示最大总价值。\n\n#### 输入样例\n\n```\n10 6 3\n2 1 1\n3 3 1\n4 8 2\n6 9 2\n2 8 3\n3 9 3\n```\n\n#### 输出样例\n\n```\n20\n```","source":"_posts/关于各种背包问题.md","raw":"---\ntitle:  关于各种背包问题\ndate:   2020-05-22\nheader-img: img/post-bg-js-version.jpg\ncatalog: true\ntags:\n    - 背包问题\ncategories: 背包问题\ndescription: 关于背包问题的讲解。\ntop_img: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594525366471&di=8e3ffaabf0a2b1ea4b30189cf73ed2e1&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F3904775955ff065697bb05f399e818e4d85065e388323-rfUlex_fw658\ncover: https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1067197159,3623630202&fm=26&gp=0.jpg\n---\n\n# 概述\n\n## 嗯……背包问题是什么？\n\n背包问题，是动态规划问题中的典型的一类。顾名思义，是跟背包有关的问题（竟然和名字有关，爷青结）。\n\n大概就是讲背包空间有限，怎样合理地装物品可以让总价值最高的问题。\n\n其实也不是非常难。\n\n## 本文讲哪几类？\n\n背包问题的主要难点也就在于种类繁多，需要记忆各种递推公式、循环结构。\n\n不过毕竟是记忆而已，总是比其他需要现场推倒递推公式的要好不少。\n\n本文主要讲以下几类：\n\n**01背包问题**\n\n**完全背包问题**\n\n**多重背包问题**\n\n**二维费用背包问题**\n\n**分组背包问题**\n\n# 01背包问题\n\n## 题目\n\n#### 题目描述\n\n一个旅行者有一个最多能装M公斤的背包，现在有n件物品，它们的重量分别是$$W_{1}$$，$$W_{2}$$，...,$$W_{n}$$,它们的价值分别为$$C_{1}$$,$$C_{2}$$,...,$$C_{n}$$，求旅行者能获得最大总价值。\n\n#### 输入\n\n第一行：两个整数，M(背包容量，M≤200)和N(物品数量，N≤30)；\n\n第2~N+1行：每行二个整数$$W_{i}$$ ,$$ C_{i}$$表示每个物品的重量和价值。\n\n#### 输出\n\n仅一行，一个数，表示最大总价值。\n\n输入样例\n\n```cpp\n10 4\n2 1\n3 3\n4 5\n7 9\n```\n\n输出样例\n\n```cpp\n12\n```\n\n## 讲解\n\n既然要用用动态规划法解决0-1背包问题，我们就先定义动态规划的三个要点，即状态、状态转移方程和边界条件。\n\n首先我们用子问题定义状态，我们用F(i,j)表示把前i件物品放入容量为j的背包中的最大总重量。\n\n然后我们要考虑怎样的状态转移方程可以把这个问题转化为更小的子问题。我们依然以每一个物品都有放或不放两种选择的策略为基础，考虑第i件物品，如果我们选择不放第i件物品，那么问题就直接转化为把前i-1件物品放入容量为j的背包中的最大总重量，如果我们选择放第i件物品，那么问题就转化为把前i-1件物品放入容量为j-V[i]的背包中的最大总重量加上第i件物品的重量（这里值得注意的一点是，如果j-V[i]<0，即放入第i件物品后超过了背包容量的限制，那么我们就只能选择不放第i件物品了）。所以状态转移方程为\n\n```cpp\nF(i,j)=max{F(i-1,j),F(i-1,j-V[i])+W[i]}\n```\n\n边界条件则很容易得到，i=0时`F(i,j)`为0（没有物品就没有重量），j<0时`F(i,j)`为负无穷（但在代码中并不会这样初始化，我们在`j-V[i]<0`时不计算第二种情况即可）。最终答案则是`f(n,C)`。但其实这个空间复杂度是可以优化的。\n\n可以直接用`f[i]`来表示当重量为i时，可以有的最大价值。\n\n状态转移方程：\n\n```cpp\nf[j] = max(f[j], f[j-c[i]]+w[i])\n```\n\n到了这里，终于要讲循环顺序的问题了。\n\n其实第二层循环为什么要反向的问题，我也研究了好久，终于在看一篇文章的时候恍然大悟。\n\n根据题意，每种物品只有一件。\n\n当我们循环的时候，如果正序，那自然就会从前到后的更新数组。\n\n那如果背包容量大于某件物品的多倍呢？\n\n而恰好这件物品性价比很高？\n\n假设a是一个常数。这件物品的质量为w。\n\n那么，比如说，我们在循环到i=a的时候，把这件物品装进了背包。\n\n那再循环到i=a+w的时候，可能又会把这件物品装进背包。\n\n也就是说，这件物品被使用了两次，甚至后面可能更多。\n\n而根据题意，每件物品只有一个。\n\n而对于每一次更新，只会用到i比当前小的数据，而不会用到i比当前大的。（因为要查看`f[i-w[j]]`,w[j]不可能是负的）\n\n所以，先把大的更新了是没有问题的。\n\n（学了背包问题这么久，终于把这个问题解决了！！！开心！！！）\n\n## 核心代码：\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#define M 1000\n\nusing namespace std;\n\nint f[M], c[M], w[M];\nint ans, v, m;\n\nint main() \n{\n    scanf(\"%d%d\", &v, &m);\n    for(int i = 1; i <= m; i++)\n    { \n        scanf(\"%d%d\", &c[i], &w[i]);\n    } \n    for(int i = 1; i <= m; i++)\n    { \n        for(int j = v; j >= c[i]; j--) \n        {\n            f[j] = max(f[j], f[j-c[i]]+w[i]);\n        }\n    } \n    printf(\"%d\\n\", f[v]);\n    return 0;\n}\n```\n\n# 完全背包问题\n\n## 题目\n\n#### 题目描述\n\n设有n种物品，每种物品有一个重量及一个价值。但每种物品的数量是无限的，同时有一个背包，最大载重量为M，今从n种物品中选取若干件(同一种物品可以多次选取)，使其重量的和小于等于M，而价值的和为最大。\n\n#### 输入\n\n第一行：两个整数，M(背包容量，M≤200)和N(物品数量，N≤30)；\n\n第2~N+1行：每行二个整数$$W_{i}$$，$$C_{i}$$表示每个物品的重量和价值。\n\n#### 输出\n\n仅一行，一个数，表示最大总价值。\n\n输入样例\n\n```cpp\n10 4\n2 1\n3 3\n4 5\n7 9\n```\n\n#### 输出样例\n\n```cpp\nmax=12\n```\n\n## 讲解\n\n那么，既然刚才讲了01背包因为每种物品只有一个所以只能逆序循环，完全背包问题自然就是把循环顺序改为顺序就可以了！\n\n——就这？就这？就这？\n\n——对，就这。\n\n——啊这，泪目\n\n[doge]\n\n## 核心代码\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#define M 1000\n\nusing namespace std;\n\nint f[M], c[M], w[M];\nint ans, v, m;\n\nint main() \n{\n    scanf(\"%d%d\", &v, &m);\n    for(int i = 1; i <= m; i++)\n    { \n        scanf(\"%d%d\", &c[i], &w[i]);\n    } \n    for(int i = 1; i <= m; i++)\n    { \n        for(int j = c[i]; j <= v; j++) \n        {\n            f[j] = max(f[j], f[j-c[i]]+w[i]);\n        }\n    } \n    printf(\"max=%d\\n\", f[v]);\n    return 0;\n}\n```\n\n#  多重背包问题\n\n## 题目\n\n#### 题目描述\n\n为了庆贺班级在校运动会上取得全校第一名成绩，班主任决定开一场庆功会，为此拨款购买奖品犒劳运动员。期望拨款金额能购买最大价值的奖品，可以补充他们的精力和体力。\n\n#### 输入\n\n第一行二个数`n`(n≤500)，`m`(m≤6000)，其中n代表希望购买的奖品的种数，m表示拨款金额。\n\n接下来n行，每行3个数，`v`、`w`、`s`，分别表示第I种奖品的价格、价值（价格与价值是不同的概念）和能购买的最大数量（买0件到s件均可），其中v≤100，w≤1000，s≤10。\n\n#### 输出\n\n一行：一个数，表示此次购买能获得的最大的价值（注意！不是价格）。\n\n#### 输入样例\n\n```\n5 1000\n80 20 4\n40 50 9\n30 50 7\n40 30 6\n20 20 1\n```\n\n#### 输出样例\n\n```\n1040\n```\n\n## 讲解\n\n其实多重背包问题，虽然一个物品有了好几个，但是仍然可以按照01背包问题的思路，每个物品能取几件就存储几次就好了（当做不同的物品）\n\n## 核心代码\n\n```cpp\n#include <bits/stdc++.h>\n#define M 1000\n\nusing namespace std;\n\nint f[M], c[M], w[M],num[M];\nint ans, v, m;\n\nint main()\n{\n        scanf(\"%d%d\", &v, &m);\n        for(int i = 1; i <= m; i++)\n        {\n            scanf(\"%d%d%d\", &c[i], &w[i],&num[i]);\n        }\n        int jjc=m;\n        for (int i = 1; i <= m; ++i)\n        {\n            for (int j = 1; j <= num[i]; ++j)\n            {\n                c[jjc]=c[i];\n                w[jjc]=w[i];\n                jjc++;\n            }\n        }\n        for(int i = 1; i <= m; i++)\n        {\n            for(int j = c[i]; j <= v; j++)\n            {\n                f[j] = max(f[j], f[j-c[i]]+w[i]);\n            }\n        }\n        printf(\"max=%d\\n\", f[v]);\n        return 0;\n}\n```\n\n# 二维费用背包问题\n\n##题目\n\n#### 题目描述\n\n宠物小精灵是一部讲述小智和他的搭档皮卡丘一起冒险的故事。\n\n一天，小智和皮卡丘来到了小精灵狩猎场，里面有很多珍贵的野生宠物小精灵。小智也想收服其中的一些小精灵。然而，野生的小精灵并不那么容易被收服。对于每一个野生小精灵而言，小智可能需要使用很多个精灵球才能收服它，而在收服过程中，野生小精灵也会对皮卡丘造成一定的伤害（从而减少皮卡丘的体力）。当皮卡丘的体力小于等于0时，小智就必须结束狩猎（因为他需要给皮卡丘疗伤），而使得皮卡丘体力小于等于0的野生小精灵也不会被小智收服。当小智的精灵球用完时，狩猎也宣告结束。\n\n我们假设小智遇到野生小精灵时有两个选择：收服它，或者离开它。如果小智选择了收服，那么一定会扔出能够收服该小精灵的精灵球，而皮卡丘也一定会受到相应的伤害；如果选择离开它，那么小智不会损失精灵球，皮卡丘也不会损失体力。\n\n小智的目标有两个：主要目标是收服尽可能多的野生小精灵；如果可以收服的小精灵数量一样，小智希望皮卡丘受到的伤害越小（剩余体力越大），因为他们还要继续冒险。\n\n现在已知小智的精灵球数量和皮卡丘的初始体力，已知每一个小精灵需要的用于收服的精灵球数目和它在被收服过程中会对皮卡丘造成的伤害数目。请问，小智该如何选择收服哪些小精灵以达到他的目标呢？\n\n#### 输入\n\n输入数据的第一行包含三个整数：N(0<N<1000)，M(0<M<500)，K(0<K<100)，分别代表小智的精灵球数量、皮卡丘初始的体力值、野生小精灵的数量。\n\n之后的K行，每一行代表一个野生小精灵，包括两个整数：收服该小精灵需要的精灵球的数量，以及收服过程中对皮卡丘造成的伤害。\n\n#### 输出\n\n输出为一行，包含两个整数：C，R，分别表示最多收服C个小精灵，以及收服C个小精灵时皮卡丘的剩余体力值最多为R。\n\n#### 输入样例#01\n\n```cpp\n10 100 5\n7 10\n2 40\n2 50\n1 20\n4 20\n```\n\n#### 输出样例#01\n\n```cpp\n3 30\n```\n\n#### 输入样例#02\n\n```cpp\n10 100 5\n\n8 110\n\n12 10\n\n20 10\n\n5 200\n\n1 110\n```\n\n####输出样例#02\n\n```cpp\n0 100\n```\n\n#### 提示\n\n对于样例输入2：小智一个小精灵都没法收服，皮卡丘也不会收到任何伤害，所以输出`0 100`。\n\n# 分组背包问题\n\n## 题目\n\n#### 题目描述\n\n一个旅行者有一个最多能装V公斤的背包，现在有n件物品，它们的重量分别是$$W_{1}$$，$$W_{2}$$，...,$$W_{n}$$,它们的价值分别为$$C_{1}$$,$$C_{2}$$,...,$$C_{n}$$，这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。\n\n#### 输入\n\n第一行：三个整数，`V`(背包容量，V≤200)，`N`(物品数量，N≤30)和`T`(最大组号，T≤10)；\n\n第2~N+1行：每行三个整数$$W_{i}$$,$$C_{i}$$,$$P_{i}$$表示每个物品的重量，价值，所属组号。\n\n#### 输出\n\n仅一行，一个数，表示最大总价值。\n\n#### 输入样例\n\n```\n10 6 3\n2 1 1\n3 3 1\n4 8 2\n6 9 2\n2 8 3\n3 9 3\n```\n\n#### 输出样例\n\n```\n20\n```","slug":"关于各种背包问题","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2n0001hpb0y759g9fj5","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><h2 id=\"嗯……背包问题是什么？\"><a href=\"#嗯……背包问题是什么？\" class=\"headerlink\" title=\"嗯……背包问题是什么？\"></a>嗯……背包问题是什么？</h2><p>背包问题，是动态规划问题中的典型的一类。顾名思义，是跟背包有关的问题（竟然和名字有关，爷青结）。</p>\n<p>大概就是讲背包空间有限，怎样合理地装物品可以让总价值最高的问题。</p>\n<p>其实也不是非常难。</p>\n<h2 id=\"本文讲哪几类？\"><a href=\"#本文讲哪几类？\" class=\"headerlink\" title=\"本文讲哪几类？\"></a>本文讲哪几类？</h2><p>背包问题的主要难点也就在于种类繁多，需要记忆各种递推公式、循环结构。</p>\n<p>不过毕竟是记忆而已，总是比其他需要现场推倒递推公式的要好不少。</p>\n<p>本文主要讲以下几类：</p>\n<p><strong>01背包问题</strong></p>\n<p><strong>完全背包问题</strong></p>\n<p><strong>多重背包问题</strong></p>\n<p><strong>二维费用背包问题</strong></p>\n<p><strong>分组背包问题</strong></p>\n<h1 id=\"01背包问题\"><a href=\"#01背包问题\" class=\"headerlink\" title=\"01背包问题\"></a>01背包问题</h1><h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>一个旅行者有一个最多能装M公斤的背包，现在有n件物品，它们的重量分别是$$W_{1}$$，$$W_{2}$$，…,$$W_{n}$$,它们的价值分别为$$C_{1}$$,$$C_{2}$$,…,$$C_{n}$$，求旅行者能获得最大总价值。</p>\n<h4 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h4><p>第一行：两个整数，M(背包容量，M≤200)和N(物品数量，N≤30)；</p>\n<p>第2~N+1行：每行二个整数$$W_{i}$$ ,$$ C_{i}$$表示每个物品的重量和价值。</p>\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>仅一行，一个数，表示最大总价值。</p>\n<p>输入样例</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>输出样例</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"讲解\"><a href=\"#讲解\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>既然要用用动态规划法解决0-1背包问题，我们就先定义动态规划的三个要点，即状态、状态转移方程和边界条件。</p>\n<p>首先我们用子问题定义状态，我们用F(i,j)表示把前i件物品放入容量为j的背包中的最大总重量。</p>\n<p>然后我们要考虑怎样的状态转移方程可以把这个问题转化为更小的子问题。我们依然以每一个物品都有放或不放两种选择的策略为基础，考虑第i件物品，如果我们选择不放第i件物品，那么问题就直接转化为把前i-1件物品放入容量为j的背包中的最大总重量，如果我们选择放第i件物品，那么问题就转化为把前i-1件物品放入容量为j-V[i]的背包中的最大总重量加上第i件物品的重量（这里值得注意的一点是，如果j-V[i]&lt;0，即放入第i件物品后超过了背包容量的限制，那么我们就只能选择不放第i件物品了）。所以状态转移方程为</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F(i,j)=max&#123;F(i<span class=\"number\">-1</span>,j),F(i<span class=\"number\">-1</span>,j-V[i])+W[i]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>边界条件则很容易得到，i=0时<code>F(i,j)</code>为0（没有物品就没有重量），j&lt;0时<code>F(i,j)</code>为负无穷（但在代码中并不会这样初始化，我们在<code>j-V[i]&lt;0</code>时不计算第二种情况即可）。最终答案则是<code>f(n,C)</code>。但其实这个空间复杂度是可以优化的。</p>\n<p>可以直接用<code>f[i]</code>来表示当重量为i时，可以有的最大价值。</p>\n<p>状态转移方程：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f[j] = max(f[j], f[j-c[i]]+w[i])</span><br></pre></td></tr></table></figure>\n\n<p>到了这里，终于要讲循环顺序的问题了。</p>\n<p>其实第二层循环为什么要反向的问题，我也研究了好久，终于在看一篇文章的时候恍然大悟。</p>\n<p>根据题意，每种物品只有一件。</p>\n<p>当我们循环的时候，如果正序，那自然就会从前到后的更新数组。</p>\n<p>那如果背包容量大于某件物品的多倍呢？</p>\n<p>而恰好这件物品性价比很高？</p>\n<p>假设a是一个常数。这件物品的质量为w。</p>\n<p>那么，比如说，我们在循环到i=a的时候，把这件物品装进了背包。</p>\n<p>那再循环到i=a+w的时候，可能又会把这件物品装进背包。</p>\n<p>也就是说，这件物品被使用了两次，甚至后面可能更多。</p>\n<p>而根据题意，每件物品只有一个。</p>\n<p>而对于每一次更新，只会用到i比当前小的数据，而不会用到i比当前大的。（因为要查看<code>f[i-w[j]]</code>,w[j]不可能是负的）</p>\n<p>所以，先把大的更新了是没有问题的。</p>\n<p>（学了背包问题这么久，终于把这个问题解决了！！！开心！！！）</p>\n<h2 id=\"核心代码：\"><a href=\"#核心代码：\" class=\"headerlink\" title=\"核心代码：\"></a>核心代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[M], c[M], w[M];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans, v, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;v, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;c[i], &amp;w[i]);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = v; j &gt;= c[i]; j--) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f[j] = max(f[j], f[j-c[i]]+w[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, f[v]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"完全背包问题\"><a href=\"#完全背包问题\" class=\"headerlink\" title=\"完全背包问题\"></a>完全背包问题</h1><h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>设有n种物品，每种物品有一个重量及一个价值。但每种物品的数量是无限的，同时有一个背包，最大载重量为M，今从n种物品中选取若干件(同一种物品可以多次选取)，使其重量的和小于等于M，而价值的和为最大。</p>\n<h4 id=\"输入-1\"><a href=\"#输入-1\" class=\"headerlink\" title=\"输入\"></a>输入</h4><p>第一行：两个整数，M(背包容量，M≤200)和N(物品数量，N≤30)；</p>\n<p>第2~N+1行：每行二个整数$$W_{i}$$，$$C_{i}$$表示每个物品的重量和价值。</p>\n<h4 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>仅一行，一个数，表示最大总价值。</p>\n<p>输入样例</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max=<span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"讲解-1\"><a href=\"#讲解-1\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>那么，既然刚才讲了01背包因为每种物品只有一个所以只能逆序循环，完全背包问题自然就是把循环顺序改为顺序就可以了！</p>\n<p>——就这？就这？就这？</p>\n<p>——对，就这。</p>\n<p>——啊这，泪目</p>\n<p>[doge]</p>\n<h2 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[M], c[M], w[M];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans, v, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;v, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;c[i], &amp;w[i]);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c[i]; j &lt;= v; j++) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f[j] = max(f[j], f[j-c[i]]+w[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;max=%d\\n&quot;</span>, f[v]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"多重背包问题\"><a href=\"#多重背包问题\" class=\"headerlink\" title=\"多重背包问题\"></a>多重背包问题</h1><h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>为了庆贺班级在校运动会上取得全校第一名成绩，班主任决定开一场庆功会，为此拨款购买奖品犒劳运动员。期望拨款金额能购买最大价值的奖品，可以补充他们的精力和体力。</p>\n<h4 id=\"输入-2\"><a href=\"#输入-2\" class=\"headerlink\" title=\"输入\"></a>输入</h4><p>第一行二个数<code>n</code>(n≤500)，<code>m</code>(m≤6000)，其中n代表希望购买的奖品的种数，m表示拨款金额。</p>\n<p>接下来n行，每行3个数，<code>v</code>、<code>w</code>、<code>s</code>，分别表示第I种奖品的价格、价值（价格与价值是不同的概念）和能购买的最大数量（买0件到s件均可），其中v≤100，w≤1000，s≤10。</p>\n<h4 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>一行：一个数，表示此次购买能获得的最大的价值（注意！不是价格）。</p>\n<h4 id=\"输入样例\"><a href=\"#输入样例\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 1000</span><br><span class=\"line\">80 20 4</span><br><span class=\"line\">40 50 9</span><br><span class=\"line\">30 50 7</span><br><span class=\"line\">40 30 6</span><br><span class=\"line\">20 20 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出样例-1\"><a href=\"#输出样例-1\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1040</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"讲解-2\"><a href=\"#讲解-2\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>其实多重背包问题，虽然一个物品有了好几个，但是仍然可以按照01背包问题的思路，每个物品能取几件就存储几次就好了（当做不同的物品）</p>\n<h2 id=\"核心代码-1\"><a href=\"#核心代码-1\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[M], c[M], w[M],num[M];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans, v, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;v, &amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;c[i], &amp;w[i],&amp;num[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> jjc=m;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= num[i]; ++j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                c[jjc]=c[i];</span><br><span class=\"line\">                w[jjc]=w[i];</span><br><span class=\"line\">                jjc++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c[i]; j &lt;= v; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[j] = max(f[j], f[j-c[i]]+w[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;max=%d\\n&quot;</span>, f[v]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二维费用背包问题\"><a href=\"#二维费用背包问题\" class=\"headerlink\" title=\"二维费用背包问题\"></a>二维费用背包问题</h1><p>##题目</p>\n<h4 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>宠物小精灵是一部讲述小智和他的搭档皮卡丘一起冒险的故事。</p>\n<p>一天，小智和皮卡丘来到了小精灵狩猎场，里面有很多珍贵的野生宠物小精灵。小智也想收服其中的一些小精灵。然而，野生的小精灵并不那么容易被收服。对于每一个野生小精灵而言，小智可能需要使用很多个精灵球才能收服它，而在收服过程中，野生小精灵也会对皮卡丘造成一定的伤害（从而减少皮卡丘的体力）。当皮卡丘的体力小于等于0时，小智就必须结束狩猎（因为他需要给皮卡丘疗伤），而使得皮卡丘体力小于等于0的野生小精灵也不会被小智收服。当小智的精灵球用完时，狩猎也宣告结束。</p>\n<p>我们假设小智遇到野生小精灵时有两个选择：收服它，或者离开它。如果小智选择了收服，那么一定会扔出能够收服该小精灵的精灵球，而皮卡丘也一定会受到相应的伤害；如果选择离开它，那么小智不会损失精灵球，皮卡丘也不会损失体力。</p>\n<p>小智的目标有两个：主要目标是收服尽可能多的野生小精灵；如果可以收服的小精灵数量一样，小智希望皮卡丘受到的伤害越小（剩余体力越大），因为他们还要继续冒险。</p>\n<p>现在已知小智的精灵球数量和皮卡丘的初始体力，已知每一个小精灵需要的用于收服的精灵球数目和它在被收服过程中会对皮卡丘造成的伤害数目。请问，小智该如何选择收服哪些小精灵以达到他的目标呢？</p>\n<h4 id=\"输入-3\"><a href=\"#输入-3\" class=\"headerlink\" title=\"输入\"></a>输入</h4><p>输入数据的第一行包含三个整数：N(0&lt;N&lt;1000)，M(0&lt;M&lt;500)，K(0&lt;K&lt;100)，分别代表小智的精灵球数量、皮卡丘初始的体力值、野生小精灵的数量。</p>\n<p>之后的K行，每一行代表一个野生小精灵，包括两个整数：收服该小精灵需要的精灵球的数量，以及收服过程中对皮卡丘造成的伤害。</p>\n<h4 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>输出为一行，包含两个整数：C，R，分别表示最多收服C个小精灵，以及收服C个小精灵时皮卡丘的剩余体力值最多为R。</p>\n<h4 id=\"输入样例-01\"><a href=\"#输入样例-01\" class=\"headerlink\" title=\"输入样例#01\"></a>输入样例#01</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">100</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出样例-01\"><a href=\"#输出样例-01\" class=\"headerlink\" title=\"输出样例#01\"></a>输出样例#01</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输入样例-02\"><a href=\"#输入样例-02\" class=\"headerlink\" title=\"输入样例#02\"></a>输入样例#02</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">100</span> <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8</span> <span class=\"number\">110</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">20</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">110</span></span><br></pre></td></tr></table></figure>\n\n<p>####输出样例#02</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p>对于样例输入2：小智一个小精灵都没法收服，皮卡丘也不会收到任何伤害，所以输出<code>0 100</code>。</p>\n<h1 id=\"分组背包问题\"><a href=\"#分组背包问题\" class=\"headerlink\" title=\"分组背包问题\"></a>分组背包问题</h1><h2 id=\"题目-3\"><a href=\"#题目-3\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述-4\"><a href=\"#题目描述-4\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>一个旅行者有一个最多能装V公斤的背包，现在有n件物品，它们的重量分别是$$W_{1}$$，$$W_{2}$$，…,$$W_{n}$$,它们的价值分别为$$C_{1}$$,$$C_{2}$$,…,$$C_{n}$$，这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>\n<h4 id=\"输入-4\"><a href=\"#输入-4\" class=\"headerlink\" title=\"输入\"></a>输入</h4><p>第一行：三个整数，<code>V</code>(背包容量，V≤200)，<code>N</code>(物品数量，N≤30)和<code>T</code>(最大组号，T≤10)；</p>\n<p>第2~N+1行：每行三个整数$$W_{i}$$,$$C_{i}$$,$$P_{i}$$表示每个物品的重量，价值，所属组号。</p>\n<h4 id=\"输出-4\"><a href=\"#输出-4\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>仅一行，一个数，表示最大总价值。</p>\n<h4 id=\"输入样例-1\"><a href=\"#输入样例-1\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 6 3</span><br><span class=\"line\">2 1 1</span><br><span class=\"line\">3 3 1</span><br><span class=\"line\">4 8 2</span><br><span class=\"line\">6 9 2</span><br><span class=\"line\">2 8 3</span><br><span class=\"line\">3 9 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出样例-2\"><a href=\"#输出样例-2\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><h2 id=\"嗯……背包问题是什么？\"><a href=\"#嗯……背包问题是什么？\" class=\"headerlink\" title=\"嗯……背包问题是什么？\"></a>嗯……背包问题是什么？</h2><p>背包问题，是动态规划问题中的典型的一类。顾名思义，是跟背包有关的问题（竟然和名字有关，爷青结）。</p>\n<p>大概就是讲背包空间有限，怎样合理地装物品可以让总价值最高的问题。</p>\n<p>其实也不是非常难。</p>\n<h2 id=\"本文讲哪几类？\"><a href=\"#本文讲哪几类？\" class=\"headerlink\" title=\"本文讲哪几类？\"></a>本文讲哪几类？</h2><p>背包问题的主要难点也就在于种类繁多，需要记忆各种递推公式、循环结构。</p>\n<p>不过毕竟是记忆而已，总是比其他需要现场推倒递推公式的要好不少。</p>\n<p>本文主要讲以下几类：</p>\n<p><strong>01背包问题</strong></p>\n<p><strong>完全背包问题</strong></p>\n<p><strong>多重背包问题</strong></p>\n<p><strong>二维费用背包问题</strong></p>\n<p><strong>分组背包问题</strong></p>\n<h1 id=\"01背包问题\"><a href=\"#01背包问题\" class=\"headerlink\" title=\"01背包问题\"></a>01背包问题</h1><h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>一个旅行者有一个最多能装M公斤的背包，现在有n件物品，它们的重量分别是$$W_{1}$$，$$W_{2}$$，…,$$W_{n}$$,它们的价值分别为$$C_{1}$$,$$C_{2}$$,…,$$C_{n}$$，求旅行者能获得最大总价值。</p>\n<h4 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h4><p>第一行：两个整数，M(背包容量，M≤200)和N(物品数量，N≤30)；</p>\n<p>第2~N+1行：每行二个整数$$W_{i}$$ ,$$ C_{i}$$表示每个物品的重量和价值。</p>\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>仅一行，一个数，表示最大总价值。</p>\n<p>输入样例</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p>输出样例</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"讲解\"><a href=\"#讲解\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>既然要用用动态规划法解决0-1背包问题，我们就先定义动态规划的三个要点，即状态、状态转移方程和边界条件。</p>\n<p>首先我们用子问题定义状态，我们用F(i,j)表示把前i件物品放入容量为j的背包中的最大总重量。</p>\n<p>然后我们要考虑怎样的状态转移方程可以把这个问题转化为更小的子问题。我们依然以每一个物品都有放或不放两种选择的策略为基础，考虑第i件物品，如果我们选择不放第i件物品，那么问题就直接转化为把前i-1件物品放入容量为j的背包中的最大总重量，如果我们选择放第i件物品，那么问题就转化为把前i-1件物品放入容量为j-V[i]的背包中的最大总重量加上第i件物品的重量（这里值得注意的一点是，如果j-V[i]&lt;0，即放入第i件物品后超过了背包容量的限制，那么我们就只能选择不放第i件物品了）。所以状态转移方程为</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F(i,j)=max&#123;F(i<span class=\"number\">-1</span>,j),F(i<span class=\"number\">-1</span>,j-V[i])+W[i]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>边界条件则很容易得到，i=0时<code>F(i,j)</code>为0（没有物品就没有重量），j&lt;0时<code>F(i,j)</code>为负无穷（但在代码中并不会这样初始化，我们在<code>j-V[i]&lt;0</code>时不计算第二种情况即可）。最终答案则是<code>f(n,C)</code>。但其实这个空间复杂度是可以优化的。</p>\n<p>可以直接用<code>f[i]</code>来表示当重量为i时，可以有的最大价值。</p>\n<p>状态转移方程：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f[j] = max(f[j], f[j-c[i]]+w[i])</span><br></pre></td></tr></table></figure>\n\n<p>到了这里，终于要讲循环顺序的问题了。</p>\n<p>其实第二层循环为什么要反向的问题，我也研究了好久，终于在看一篇文章的时候恍然大悟。</p>\n<p>根据题意，每种物品只有一件。</p>\n<p>当我们循环的时候，如果正序，那自然就会从前到后的更新数组。</p>\n<p>那如果背包容量大于某件物品的多倍呢？</p>\n<p>而恰好这件物品性价比很高？</p>\n<p>假设a是一个常数。这件物品的质量为w。</p>\n<p>那么，比如说，我们在循环到i=a的时候，把这件物品装进了背包。</p>\n<p>那再循环到i=a+w的时候，可能又会把这件物品装进背包。</p>\n<p>也就是说，这件物品被使用了两次，甚至后面可能更多。</p>\n<p>而根据题意，每件物品只有一个。</p>\n<p>而对于每一次更新，只会用到i比当前小的数据，而不会用到i比当前大的。（因为要查看<code>f[i-w[j]]</code>,w[j]不可能是负的）</p>\n<p>所以，先把大的更新了是没有问题的。</p>\n<p>（学了背包问题这么久，终于把这个问题解决了！！！开心！！！）</p>\n<h2 id=\"核心代码：\"><a href=\"#核心代码：\" class=\"headerlink\" title=\"核心代码：\"></a>核心代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[M], c[M], w[M];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans, v, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;v, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;c[i], &amp;w[i]);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = v; j &gt;= c[i]; j--) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f[j] = max(f[j], f[j-c[i]]+w[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, f[v]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"完全背包问题\"><a href=\"#完全背包问题\" class=\"headerlink\" title=\"完全背包问题\"></a>完全背包问题</h1><h2 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>设有n种物品，每种物品有一个重量及一个价值。但每种物品的数量是无限的，同时有一个背包，最大载重量为M，今从n种物品中选取若干件(同一种物品可以多次选取)，使其重量的和小于等于M，而价值的和为最大。</p>\n<h4 id=\"输入-1\"><a href=\"#输入-1\" class=\"headerlink\" title=\"输入\"></a>输入</h4><p>第一行：两个整数，M(背包容量，M≤200)和N(物品数量，N≤30)；</p>\n<p>第2~N+1行：每行二个整数$$W_{i}$$，$$C_{i}$$表示每个物品的重量和价值。</p>\n<h4 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>仅一行，一个数，表示最大总价值。</p>\n<p>输入样例</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max=<span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"讲解-1\"><a href=\"#讲解-1\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>那么，既然刚才讲了01背包因为每种物品只有一个所以只能逆序循环，完全背包问题自然就是把循环顺序改为顺序就可以了！</p>\n<p>——就这？就这？就这？</p>\n<p>——对，就这。</p>\n<p>——啊这，泪目</p>\n<p>[doge]</p>\n<h2 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[M], c[M], w[M];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans, v, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;v, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;c[i], &amp;w[i]);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c[i]; j &lt;= v; j++) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f[j] = max(f[j], f[j-c[i]]+w[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;max=%d\\n&quot;</span>, f[v]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"多重背包问题\"><a href=\"#多重背包问题\" class=\"headerlink\" title=\"多重背包问题\"></a>多重背包问题</h1><h2 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>为了庆贺班级在校运动会上取得全校第一名成绩，班主任决定开一场庆功会，为此拨款购买奖品犒劳运动员。期望拨款金额能购买最大价值的奖品，可以补充他们的精力和体力。</p>\n<h4 id=\"输入-2\"><a href=\"#输入-2\" class=\"headerlink\" title=\"输入\"></a>输入</h4><p>第一行二个数<code>n</code>(n≤500)，<code>m</code>(m≤6000)，其中n代表希望购买的奖品的种数，m表示拨款金额。</p>\n<p>接下来n行，每行3个数，<code>v</code>、<code>w</code>、<code>s</code>，分别表示第I种奖品的价格、价值（价格与价值是不同的概念）和能购买的最大数量（买0件到s件均可），其中v≤100，w≤1000，s≤10。</p>\n<h4 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>一行：一个数，表示此次购买能获得的最大的价值（注意！不是价格）。</p>\n<h4 id=\"输入样例\"><a href=\"#输入样例\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 1000</span><br><span class=\"line\">80 20 4</span><br><span class=\"line\">40 50 9</span><br><span class=\"line\">30 50 7</span><br><span class=\"line\">40 30 6</span><br><span class=\"line\">20 20 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出样例-1\"><a href=\"#输出样例-1\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1040</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"讲解-2\"><a href=\"#讲解-2\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>其实多重背包问题，虽然一个物品有了好几个，但是仍然可以按照01背包问题的思路，每个物品能取几件就存储几次就好了（当做不同的物品）</p>\n<h2 id=\"核心代码-1\"><a href=\"#核心代码-1\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[M], c[M], w[M],num[M];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans, v, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;v, &amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;c[i], &amp;w[i],&amp;num[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> jjc=m;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= num[i]; ++j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                c[jjc]=c[i];</span><br><span class=\"line\">                w[jjc]=w[i];</span><br><span class=\"line\">                jjc++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c[i]; j &lt;= v; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[j] = max(f[j], f[j-c[i]]+w[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;max=%d\\n&quot;</span>, f[v]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二维费用背包问题\"><a href=\"#二维费用背包问题\" class=\"headerlink\" title=\"二维费用背包问题\"></a>二维费用背包问题</h1><p>##题目</p>\n<h4 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>宠物小精灵是一部讲述小智和他的搭档皮卡丘一起冒险的故事。</p>\n<p>一天，小智和皮卡丘来到了小精灵狩猎场，里面有很多珍贵的野生宠物小精灵。小智也想收服其中的一些小精灵。然而，野生的小精灵并不那么容易被收服。对于每一个野生小精灵而言，小智可能需要使用很多个精灵球才能收服它，而在收服过程中，野生小精灵也会对皮卡丘造成一定的伤害（从而减少皮卡丘的体力）。当皮卡丘的体力小于等于0时，小智就必须结束狩猎（因为他需要给皮卡丘疗伤），而使得皮卡丘体力小于等于0的野生小精灵也不会被小智收服。当小智的精灵球用完时，狩猎也宣告结束。</p>\n<p>我们假设小智遇到野生小精灵时有两个选择：收服它，或者离开它。如果小智选择了收服，那么一定会扔出能够收服该小精灵的精灵球，而皮卡丘也一定会受到相应的伤害；如果选择离开它，那么小智不会损失精灵球，皮卡丘也不会损失体力。</p>\n<p>小智的目标有两个：主要目标是收服尽可能多的野生小精灵；如果可以收服的小精灵数量一样，小智希望皮卡丘受到的伤害越小（剩余体力越大），因为他们还要继续冒险。</p>\n<p>现在已知小智的精灵球数量和皮卡丘的初始体力，已知每一个小精灵需要的用于收服的精灵球数目和它在被收服过程中会对皮卡丘造成的伤害数目。请问，小智该如何选择收服哪些小精灵以达到他的目标呢？</p>\n<h4 id=\"输入-3\"><a href=\"#输入-3\" class=\"headerlink\" title=\"输入\"></a>输入</h4><p>输入数据的第一行包含三个整数：N(0&lt;N&lt;1000)，M(0&lt;M&lt;500)，K(0&lt;K&lt;100)，分别代表小智的精灵球数量、皮卡丘初始的体力值、野生小精灵的数量。</p>\n<p>之后的K行，每一行代表一个野生小精灵，包括两个整数：收服该小精灵需要的精灵球的数量，以及收服过程中对皮卡丘造成的伤害。</p>\n<h4 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>输出为一行，包含两个整数：C，R，分别表示最多收服C个小精灵，以及收服C个小精灵时皮卡丘的剩余体力值最多为R。</p>\n<h4 id=\"输入样例-01\"><a href=\"#输入样例-01\" class=\"headerlink\" title=\"输入样例#01\"></a>输入样例#01</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">100</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出样例-01\"><a href=\"#输出样例-01\" class=\"headerlink\" title=\"输出样例#01\"></a>输出样例#01</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输入样例-02\"><a href=\"#输入样例-02\" class=\"headerlink\" title=\"输入样例#02\"></a>输入样例#02</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">100</span> <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8</span> <span class=\"number\">110</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">20</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">110</span></span><br></pre></td></tr></table></figure>\n\n<p>####输出样例#02</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h4><p>对于样例输入2：小智一个小精灵都没法收服，皮卡丘也不会收到任何伤害，所以输出<code>0 100</code>。</p>\n<h1 id=\"分组背包问题\"><a href=\"#分组背包问题\" class=\"headerlink\" title=\"分组背包问题\"></a>分组背包问题</h1><h2 id=\"题目-3\"><a href=\"#题目-3\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h4 id=\"题目描述-4\"><a href=\"#题目描述-4\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>一个旅行者有一个最多能装V公斤的背包，现在有n件物品，它们的重量分别是$$W_{1}$$，$$W_{2}$$，…,$$W_{n}$$,它们的价值分别为$$C_{1}$$,$$C_{2}$$,…,$$C_{n}$$，这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>\n<h4 id=\"输入-4\"><a href=\"#输入-4\" class=\"headerlink\" title=\"输入\"></a>输入</h4><p>第一行：三个整数，<code>V</code>(背包容量，V≤200)，<code>N</code>(物品数量，N≤30)和<code>T</code>(最大组号，T≤10)；</p>\n<p>第2~N+1行：每行三个整数$$W_{i}$$,$$C_{i}$$,$$P_{i}$$表示每个物品的重量，价值，所属组号。</p>\n<h4 id=\"输出-4\"><a href=\"#输出-4\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>仅一行，一个数，表示最大总价值。</p>\n<h4 id=\"输入样例-1\"><a href=\"#输入样例-1\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 6 3</span><br><span class=\"line\">2 1 1</span><br><span class=\"line\">3 3 1</span><br><span class=\"line\">4 8 2</span><br><span class=\"line\">6 9 2</span><br><span class=\"line\">2 8 3</span><br><span class=\"line\">3 9 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出样例-2\"><a href=\"#输出样例-2\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20</span><br></pre></td></tr></table></figure>"},{"title":"很急的灾题解","date":"2020-07-27T00:18:01.000Z","description":"2020-07-27图论测试 T3 很急的灾 题解。","top_img":"https://api.r10086.com/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F2.php","cover":"https://tvax3.sinaimg.cn/large/0072Vf1pgy1foxlhvnh9qj31hc0u0tmu.jpg","_content":"\n# 题目\n\n#### [很急的灾](https://likiblaze.gitee.io/%E5%BE%88%E6%80%A5%E7%9A%84%E7%81%BE/)\n\n# 分析\n\n……这个题……\n\n难道不是<b>很裸、很简单</b>吗？？？\n\n首先，我们看到题目中的每个村庄内部，每家每户都可以互相到达，一个避难所内部也都可以互相到达，很容易想到它们都是强连通分量。我们只需要使用`Tarjian`进行缩点，这些村庄，避难所就都变成一个个的节点了。然后，根据题目中的村庄之间不能到达，避难所之间不能到达，那么很明显这就会组成一张二分图。然后只需要进行二分图最大匹配，不就行啦吗？？？\n\n到底有什么难的呀？\n\n<h1>代码</h1>\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n    long long x = 0;\n    int f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch > '9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nvoid write(const long long &x)\n{\n    if (!x)\n    {\n        putchar('0');\n        return;\n    }\n    char f[100];\n    long long tmp = x;\n    if (tmp < 0)\n    {\n        tmp = -tmp;\n        putchar('-');\n    }\n    int s = 0;\n    while (tmp > 0)\n    {\n        f[s++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while (s > 0)\n    {\n        putchar(f[--s]);\n    }\n}\n\nconst int N = 3500010, M = 3500010;\nint ver[M], Next[M], head[N], dfn[N], low[N];\nint in_stack[N], in_DCC_num[N];\nint ver_of_DCC[M], next_of_DCC[M], head_of_DCC[N], tot_DCC_Nodes;\nstack<int> Nodes_of_DCCs;\nvector<int> DCCs[N];\nint tot, num, cnt;\n\nvoid add(int x, int y)\n{\n    ver[++tot] = y, Next[tot] = head[x], head[x] = tot;\n}\nvoid add_DCC_Node(int x, int y)\n{\n    ver_of_DCC[++tot_DCC_Nodes] = y, next_of_DCC[tot_DCC_Nodes] = head_of_DCC[x], head_of_DCC[x] = tot_DCC_Nodes;\n}\nvoid tarjan(int x)\n{\n    dfn[x] = low[x] = ++num;\n    Nodes_of_DCCs.push(x);\n    in_stack[x] = 1;\n    for (int i = head[x]; i; i = Next[i])\n        if (!dfn[ver[i]])\n        {\n            tarjan(ver[i]);\n            low[x] = min(low[x], low[ver[i]]);\n        }\n        else if (in_stack[ver[i]])\n            low[x] = min(low[x], dfn[ver[i]]);\n    if (dfn[x] == low[x])\n    {\n        cnt++;\n        int y;\n        do\n        {\n            y = Nodes_of_DCCs.top();\n            Nodes_of_DCCs.pop();\n            in_stack[y] = 0;\n            in_DCC_num[y] = cnt, DCCs[cnt].push_back(y);\n        } while (x != y);\n    }\n}\n\nbool visit[3500090];\nint match[3500090];\n\nbool dfs(int x)\n{\n    for (int i = head_of_DCC[x]; i; i = next_of_DCC[i])\n    {\n        int y;\n        if (!visit[y = ver_of_DCC[i]])\n        {\n            visit[y] = true;\n            if (!match[y] || dfs(match[y]))\n            {\n                match[y] = x;\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint answer = 0;\nint totDOT;\nint totROAD;\n\nint main()\n{\n    totDOT = read();\n    totROAD = read();\n    for (int i = 1; i <= totROAD; i++)\n    {\n        add(read(), read());\n    }\n    for (int i = 1; i <= totDOT; i++)\n    {\n        if (!dfn[i])\n        {\n            tarjan(i);\n        }\n    }\n    for (int i = 1; i <= totDOT; i++)\n    {\n        for (int j = head[i]; j; j = Next[j])\n        {\n            int y = ver[j];\n            if (in_DCC_num[i] == in_DCC_num[y])\n                continue;\n            add_DCC_Node(in_DCC_num[i], in_DCC_num[y]);\n        }\n    }\n    for (int i = 1; i <= cnt; i++)\n    {\n        memset(visit, 0, sizeof(visit));\n        if (dfs(i))\n        {\n            answer++;\n        }\n    }\n    write(answer);\n    return 0;\n} //LikiBlaze Code\n```\n\nemm……不就是这些？？？","source":"_posts/很急的灾题解.md","raw":"---\ntitle: 很急的灾题解\ndate: 2020-07-27 08:18:01\ntags: \n\t- 校内测试\n\t- Tarjian\n\t- 二分图最大匹配\ncategories: 校内测试\ndescription: 2020-07-27图论测试 T3 很急的灾 题解。\ntop_img: https://api.r10086.com/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F2.php\ncover: https://tvax3.sinaimg.cn/large/0072Vf1pgy1foxlhvnh9qj31hc0u0tmu.jpg\n---\n\n# 题目\n\n#### [很急的灾](https://likiblaze.gitee.io/%E5%BE%88%E6%80%A5%E7%9A%84%E7%81%BE/)\n\n# 分析\n\n……这个题……\n\n难道不是<b>很裸、很简单</b>吗？？？\n\n首先，我们看到题目中的每个村庄内部，每家每户都可以互相到达，一个避难所内部也都可以互相到达，很容易想到它们都是强连通分量。我们只需要使用`Tarjian`进行缩点，这些村庄，避难所就都变成一个个的节点了。然后，根据题目中的村庄之间不能到达，避难所之间不能到达，那么很明显这就会组成一张二分图。然后只需要进行二分图最大匹配，不就行啦吗？？？\n\n到底有什么难的呀？\n\n<h1>代码</h1>\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n    long long x = 0;\n    int f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch > '9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nvoid write(const long long &x)\n{\n    if (!x)\n    {\n        putchar('0');\n        return;\n    }\n    char f[100];\n    long long tmp = x;\n    if (tmp < 0)\n    {\n        tmp = -tmp;\n        putchar('-');\n    }\n    int s = 0;\n    while (tmp > 0)\n    {\n        f[s++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while (s > 0)\n    {\n        putchar(f[--s]);\n    }\n}\n\nconst int N = 3500010, M = 3500010;\nint ver[M], Next[M], head[N], dfn[N], low[N];\nint in_stack[N], in_DCC_num[N];\nint ver_of_DCC[M], next_of_DCC[M], head_of_DCC[N], tot_DCC_Nodes;\nstack<int> Nodes_of_DCCs;\nvector<int> DCCs[N];\nint tot, num, cnt;\n\nvoid add(int x, int y)\n{\n    ver[++tot] = y, Next[tot] = head[x], head[x] = tot;\n}\nvoid add_DCC_Node(int x, int y)\n{\n    ver_of_DCC[++tot_DCC_Nodes] = y, next_of_DCC[tot_DCC_Nodes] = head_of_DCC[x], head_of_DCC[x] = tot_DCC_Nodes;\n}\nvoid tarjan(int x)\n{\n    dfn[x] = low[x] = ++num;\n    Nodes_of_DCCs.push(x);\n    in_stack[x] = 1;\n    for (int i = head[x]; i; i = Next[i])\n        if (!dfn[ver[i]])\n        {\n            tarjan(ver[i]);\n            low[x] = min(low[x], low[ver[i]]);\n        }\n        else if (in_stack[ver[i]])\n            low[x] = min(low[x], dfn[ver[i]]);\n    if (dfn[x] == low[x])\n    {\n        cnt++;\n        int y;\n        do\n        {\n            y = Nodes_of_DCCs.top();\n            Nodes_of_DCCs.pop();\n            in_stack[y] = 0;\n            in_DCC_num[y] = cnt, DCCs[cnt].push_back(y);\n        } while (x != y);\n    }\n}\n\nbool visit[3500090];\nint match[3500090];\n\nbool dfs(int x)\n{\n    for (int i = head_of_DCC[x]; i; i = next_of_DCC[i])\n    {\n        int y;\n        if (!visit[y = ver_of_DCC[i]])\n        {\n            visit[y] = true;\n            if (!match[y] || dfs(match[y]))\n            {\n                match[y] = x;\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint answer = 0;\nint totDOT;\nint totROAD;\n\nint main()\n{\n    totDOT = read();\n    totROAD = read();\n    for (int i = 1; i <= totROAD; i++)\n    {\n        add(read(), read());\n    }\n    for (int i = 1; i <= totDOT; i++)\n    {\n        if (!dfn[i])\n        {\n            tarjan(i);\n        }\n    }\n    for (int i = 1; i <= totDOT; i++)\n    {\n        for (int j = head[i]; j; j = Next[j])\n        {\n            int y = ver[j];\n            if (in_DCC_num[i] == in_DCC_num[y])\n                continue;\n            add_DCC_Node(in_DCC_num[i], in_DCC_num[y]);\n        }\n    }\n    for (int i = 1; i <= cnt; i++)\n    {\n        memset(visit, 0, sizeof(visit));\n        if (dfs(i))\n        {\n            answer++;\n        }\n    }\n    write(answer);\n    return 0;\n} //LikiBlaze Code\n```\n\nemm……不就是这些？？？","slug":"很急的灾题解","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2n1001kpb0ydvjf49hi","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h4 id=\"很急的灾\"><a href=\"#很急的灾\" class=\"headerlink\" title=\"很急的灾\"></a><a href=\"https://likiblaze.gitee.io/%E5%BE%88%E6%80%A5%E7%9A%84%E7%81%BE/\">很急的灾</a></h4><h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>……这个题……</p>\n<p>难道不是<b>很裸、很简单</b>吗？？？</p>\n<p>首先，我们看到题目中的每个村庄内部，每家每户都可以互相到达，一个避难所内部也都可以互相到达，很容易想到它们都是强连通分量。我们只需要使用<code>Tarjian</code>进行缩点，这些村庄，避难所就都变成一个个的节点了。然后，根据题目中的村庄之间不能到达，避难所之间不能到达，那么很明显这就会组成一张二分图。然后只需要进行二分图最大匹配，不就行啦吗？？？</p>\n<p>到底有什么难的呀？</p>\n<h1>代码</h1>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = -tmp;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3500010</span>, M = <span class=\"number\">3500010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ver[M], Next[M], head[N], dfn[N], low[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> in_stack[N], in_DCC_num[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ver_of_DCC[M], next_of_DCC[M], head_of_DCC[N], tot_DCC_Nodes;</span><br><span class=\"line\"><span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; Nodes_of_DCCs;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; DCCs[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot, num, cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ver[++tot] = y, Next[tot] = head[x], head[x] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_DCC_Node</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ver_of_DCC[++tot_DCC_Nodes] = y, next_of_DCC[tot_DCC_Nodes] = head_of_DCC[x], head_of_DCC[x] = tot_DCC_Nodes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfn[x] = low[x] = ++num;</span><br><span class=\"line\">    Nodes_of_DCCs.push(x);</span><br><span class=\"line\">    in_stack[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[x]; i; i = Next[i])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[ver[i]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tarjan(ver[i]);</span><br><span class=\"line\">            low[x] = min(low[x], low[ver[i]]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (in_stack[ver[i]])</span><br><span class=\"line\">            low[x] = min(low[x], dfn[ver[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dfn[x] == low[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            y = Nodes_of_DCCs.top();</span><br><span class=\"line\">            Nodes_of_DCCs.pop();</span><br><span class=\"line\">            in_stack[y] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            in_DCC_num[y] = cnt, DCCs[cnt].push_back(y);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (x != y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[<span class=\"number\">3500090</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> match[<span class=\"number\">3500090</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head_of_DCC[x]; i; i = next_of_DCC[i])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!visit[y = ver_of_DCC[i]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            visit[y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!match[y] || dfs(match[y]))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                match[y] = x;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> answer = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> totDOT;</span><br><span class=\"line\"><span class=\"keyword\">int</span> totROAD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    totDOT = read();</span><br><span class=\"line\">    totROAD = read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totROAD; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        add(read(), read());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totDOT; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tarjan(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totDOT; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = head[i]; j; j = Next[j])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = ver[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (in_DCC_num[i] == in_DCC_num[y])</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            add_DCC_Node(in_DCC_num[i], in_DCC_num[y]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= cnt; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(visit, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(visit));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dfs(i))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            answer++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    write(answer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n\n<p>emm……不就是这些？？？</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h4 id=\"很急的灾\"><a href=\"#很急的灾\" class=\"headerlink\" title=\"很急的灾\"></a><a href=\"https://likiblaze.gitee.io/%E5%BE%88%E6%80%A5%E7%9A%84%E7%81%BE/\">很急的灾</a></h4><h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>……这个题……</p>\n<p>难道不是<b>很裸、很简单</b>吗？？？</p>\n<p>首先，我们看到题目中的每个村庄内部，每家每户都可以互相到达，一个避难所内部也都可以互相到达，很容易想到它们都是强连通分量。我们只需要使用<code>Tarjian</code>进行缩点，这些村庄，避难所就都变成一个个的节点了。然后，根据题目中的村庄之间不能到达，避难所之间不能到达，那么很明显这就会组成一张二分图。然后只需要进行二分图最大匹配，不就行啦吗？？？</p>\n<p>到底有什么难的呀？</p>\n<h1>代码</h1>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = -tmp;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3500010</span>, M = <span class=\"number\">3500010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ver[M], Next[M], head[N], dfn[N], low[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> in_stack[N], in_DCC_num[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ver_of_DCC[M], next_of_DCC[M], head_of_DCC[N], tot_DCC_Nodes;</span><br><span class=\"line\"><span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; Nodes_of_DCCs;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; DCCs[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot, num, cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ver[++tot] = y, Next[tot] = head[x], head[x] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_DCC_Node</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ver_of_DCC[++tot_DCC_Nodes] = y, next_of_DCC[tot_DCC_Nodes] = head_of_DCC[x], head_of_DCC[x] = tot_DCC_Nodes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfn[x] = low[x] = ++num;</span><br><span class=\"line\">    Nodes_of_DCCs.push(x);</span><br><span class=\"line\">    in_stack[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[x]; i; i = Next[i])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[ver[i]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tarjan(ver[i]);</span><br><span class=\"line\">            low[x] = min(low[x], low[ver[i]]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (in_stack[ver[i]])</span><br><span class=\"line\">            low[x] = min(low[x], dfn[ver[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dfn[x] == low[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            y = Nodes_of_DCCs.top();</span><br><span class=\"line\">            Nodes_of_DCCs.pop();</span><br><span class=\"line\">            in_stack[y] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            in_DCC_num[y] = cnt, DCCs[cnt].push_back(y);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (x != y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[<span class=\"number\">3500090</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> match[<span class=\"number\">3500090</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head_of_DCC[x]; i; i = next_of_DCC[i])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!visit[y = ver_of_DCC[i]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            visit[y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!match[y] || dfs(match[y]))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                match[y] = x;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> answer = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> totDOT;</span><br><span class=\"line\"><span class=\"keyword\">int</span> totROAD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    totDOT = read();</span><br><span class=\"line\">    totROAD = read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totROAD; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        add(read(), read());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totDOT; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tarjan(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totDOT; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = head[i]; j; j = Next[j])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y = ver[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (in_DCC_num[i] == in_DCC_num[y])</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            add_DCC_Node(in_DCC_num[i], in_DCC_num[y]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= cnt; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(visit, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(visit));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dfs(i))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            answer++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    write(answer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n\n<p>emm……不就是这些？？？</p>\n"},{"title":"总结一下当前阶段我认为比较常用的字符串操作","date":"2020-01-29T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%8814.php","_content":"首先是string：\n\n定义：\n\n```cpp\nstring str；\n```\n\n读取：\n\n```cpp\ngetline(cin,str);//读取一行\n```\n\n获取长度：\n\n```cpp\nlen=str.size;\n```\n\n粘贴：\n\n```cpp\nstr1=str.substr(2,len-1)//把str的第三位到最后一位粘贴到str1\n```\n\n计算：\n\n```cpp\nstr1+=str//在str1后面接上str\n```\n\n然后是字符数组：\n\n定义：\n\n```cpp\nchar a[100];\n```\n\n读取：\n\n```cpp\ngets(a);\n```\n\n获取长度：\n\n```cpp\nlen=strlen(a);\n```\n\n注意：\n\n字符串有时也可以当做字符数组，使用str[n]这样的写法，只不过它们大部分操作都不一样。\n","source":"_posts/总结一下当前阶段我认为比较常用的字符串操作.md","raw":"---\ntitle: 总结一下当前阶段我认为比较常用的字符串操作\ndate: 2020-01-30\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%8814.php   \ntags: \n    - C++基础\n    - 算法概述\n    - 字符串\n---\n首先是string：\n\n定义：\n\n```cpp\nstring str；\n```\n\n读取：\n\n```cpp\ngetline(cin,str);//读取一行\n```\n\n获取长度：\n\n```cpp\nlen=str.size;\n```\n\n粘贴：\n\n```cpp\nstr1=str.substr(2,len-1)//把str的第三位到最后一位粘贴到str1\n```\n\n计算：\n\n```cpp\nstr1+=str//在str1后面接上str\n```\n\n然后是字符数组：\n\n定义：\n\n```cpp\nchar a[100];\n```\n\n读取：\n\n```cpp\ngets(a);\n```\n\n获取长度：\n\n```cpp\nlen=strlen(a);\n```\n\n注意：\n\n字符串有时也可以当做字符数组，使用str[n]这样的写法，只不过它们大部分操作都不一样。\n","slug":"总结一下当前阶段我认为比较常用的字符串操作","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2n3001opb0yeaxx8tq0","content":"<p>首先是string：</p>\n<p>定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str；</span><br></pre></td></tr></table></figure>\n\n<p>读取：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getline(<span class=\"built_in\">cin</span>,str);<span class=\"comment\">//读取一行</span></span><br></pre></td></tr></table></figure>\n\n<p>获取长度：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len=str.size;</span><br></pre></td></tr></table></figure>\n\n<p>粘贴：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1=str.substr(<span class=\"number\">2</span>,len<span class=\"number\">-1</span>)<span class=\"comment\">//把str的第三位到最后一位粘贴到str1</span></span><br></pre></td></tr></table></figure>\n\n<p>计算：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1+=str<span class=\"comment\">//在str1后面接上str</span></span><br></pre></td></tr></table></figure>\n\n<p>然后是字符数组：</p>\n<p>定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">100</span>];</span><br></pre></td></tr></table></figure>\n\n<p>读取：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gets(a);</span><br></pre></td></tr></table></figure>\n\n<p>获取长度：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len=<span class=\"built_in\">strlen</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<p>字符串有时也可以当做字符数组，使用str[n]这样的写法，只不过它们大部分操作都不一样。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先是string：</p>\n<p>定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> str；</span><br></pre></td></tr></table></figure>\n\n<p>读取：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getline(<span class=\"built_in\">cin</span>,str);<span class=\"comment\">//读取一行</span></span><br></pre></td></tr></table></figure>\n\n<p>获取长度：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len=str.size;</span><br></pre></td></tr></table></figure>\n\n<p>粘贴：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1=str.substr(<span class=\"number\">2</span>,len<span class=\"number\">-1</span>)<span class=\"comment\">//把str的第三位到最后一位粘贴到str1</span></span><br></pre></td></tr></table></figure>\n\n<p>计算：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1+=str<span class=\"comment\">//在str1后面接上str</span></span><br></pre></td></tr></table></figure>\n\n<p>然后是字符数组：</p>\n<p>定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">100</span>];</span><br></pre></td></tr></table></figure>\n\n<p>读取：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gets(a);</span><br></pre></td></tr></table></figure>\n\n<p>获取长度：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len=<span class=\"built_in\">strlen</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<p>字符串有时也可以当做字符数组，使用str[n]这样的写法，只不过它们大部分操作都不一样。</p>\n"},{"title":"最短路径问题的几种算法","date":"2020-04-17T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%8815.php","_content":"# Floyd算法\n\n## 使用条件\n\n可以求出多源最短路，可以处理负权边的情况，但是不能出现负环。\n\n## 时间复杂度\n\nO（n<sup>3</sup>）\n\n## 讲解\n\nFloyed算法使用的是动态规划的方法。\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417230554342-692141756.png\" alt=\"\" />\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417230839931-835750678.png\" alt=\"\" />\n\n只需要使用最简单粗暴的做法，将出发点、结束点、中转点都枚举一遍就可以了。\n\n状态转移方程：\n\n```cpp\nd[i][j]=min(d[i][k]+d[k][j],d[i][j])\n```\n\n这样，再写出Floyd算法的核心代码就很容易了。\n\n另外需要注意的是：Floyd算法不能解决带有负权回路（或者叫负权环）的图，因为带有负权回路的图没有最短路。例如下面这个图就不存在1号顶点到3号顶点的最短路径。因为1->2->3->1->2->3->->1->2->3这样路径中，每绕一次1->-2>3这样的环，最短路就会减少1，永远找不到最短路。其实如果一个图中带有负权回路那么这个图则没有最短路。\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417232000293-1893870874.png\" alt=\"\" />\n\n## 核心代码\n\n```cpp\nfor(k=1;k<=n;k++) //枚举中转点\n    for(i=1;i<=n;i++) //枚举起点        \n        for(j=1;j<=n;j++)          //枚举终点\n            d[i][j]=min(d[i][k]+d[k][j],d[i][j]);\n```\n\n# Dijkstra算法\n\n## 使用条件\n\n求单源最短路径，不能处理负权。\n\n## 时间复杂度\n\nO（n<sup>2</sup>）\n\n## 讲解\n\nDijkstra算法使用的是贪心方法，d[i]表示起点s0到i的最短距离。\n\n从起点s0开始，选择未访问过的离s0最近的一个点i，也就是最小的d[i]，因为所以边权为正，不会存在更短的路径到达i，保证了贪心的正确性。然后将i作为中间点，更新经过i可到达的点的最短路距离，继续贪心寻找未访问过的最近的一个点，经过n次贪心，算法结束。\n\n看图：\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418080223791-1693237628.png\" alt=\"\" /><img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418080234900-1450733756.png\" alt=\"\" />\n\n根据这个图，Dijkstra算法应该就很好理解了。\n\n## 核心代码\n\n```cpp\nfor (i = 1; k <= n; k++)\n{\n    maxn = 0x7fffffff;\n    for (j = 1; j <= n; j++)                 //找出未访问最小的d[j]\n    {\n        if (!vis[j] && d[j] < maxn)\n        {\n            maxn = d[j];\n            k = i;\n        }\n\n    }\n    vis[k] = 1;\n    for (j = 1; j <= n; j++)          //k作为中间点，更新起点经过k到达其他点的d[j]\n        if (w[k][j])\n        {\n            d[j] = min{ d[k] + w[k][j],d[j] };\n        }\n}\n```\n\n# SPFA算法\n\n## 使用条件\n\n求单源最短路，可以处理负权边\n\n## 时间复杂度\n\n对于稀疏图，为O(km)，k为较小的常数，而对于稠密图或者构造的网格图，会提高到O(n*m)\n\n## 讲解\n\n建立一个队列，初始时队列里只有起始点，在建立一个表格记录起始点到所有点的最短路径（该表格的初始值要赋为极大值，该点到他本身的路径赋为0）。然后执行松弛操作，用队列里有的点去刷新起始点到所有点的最短路，如果刷新成功且被刷新点不在队列中则把该点加入到队列最后。重复执行直到队列为空。\n\n图：\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418082427765-963504437.png\" alt=\"\" />\n\n源点A首先入队，并且AB松弛\n\n<img src=\"https://img-blog.csdnimg.cn/20190316204559264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n扩展与A相连的边，B，C 入队并松弛。\n\n<img src=\"https://img-blog.csdnimg.cn/20190316204613979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<img src=\"https://img-blog.csdnimg.cn/20190316204625218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\nD出队，E入队并松弛。\n\n<img src=\"https://img-blog.csdnimg.cn/20190316204637351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\nE出队，此时队列为空，源点到所有点的最短路已被找到，A->E的最短路即为8\n\n<img src=\"https://img-blog.csdnimg.cn/20190316204648479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n以上就是SPFA算法的过程。\n\n## 核心代码\n\n```cpp\nq.push(s);\nvis[s]=1;  //源点s入队，标记入队\nwhile(q.size())\n{\n       u=q.front();q.pop();vis[u]=0;        //取出队头，标记未入队\n       for(i=head[u];i;i=next[i])\n       {\n              v=ver[i];\n              w=edge[i];\n              if(dis[u]+w<dis[v])\n              {\n                     dis[v]=dis[u]+w;\n                     if(!vis[v])   {q.push(v);vis[v]=1;}    //如果没有在队列，入队，标记已入队\n              }    \n       }\n}\n```\n","source":"_posts/最短路径问题的几种算法.md","raw":"---\ntitle: 最短路径问题的几种算法\ndate: 2020-04-18\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%8815.php   \ntags: \n    - 算法概述\n    - 最短路\n---\n# Floyd算法\n\n## 使用条件\n\n可以求出多源最短路，可以处理负权边的情况，但是不能出现负环。\n\n## 时间复杂度\n\nO（n<sup>3</sup>）\n\n## 讲解\n\nFloyed算法使用的是动态规划的方法。\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417230554342-692141756.png\" alt=\"\" />\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417230839931-835750678.png\" alt=\"\" />\n\n只需要使用最简单粗暴的做法，将出发点、结束点、中转点都枚举一遍就可以了。\n\n状态转移方程：\n\n```cpp\nd[i][j]=min(d[i][k]+d[k][j],d[i][j])\n```\n\n这样，再写出Floyd算法的核心代码就很容易了。\n\n另外需要注意的是：Floyd算法不能解决带有负权回路（或者叫负权环）的图，因为带有负权回路的图没有最短路。例如下面这个图就不存在1号顶点到3号顶点的最短路径。因为1->2->3->1->2->3->->1->2->3这样路径中，每绕一次1->-2>3这样的环，最短路就会减少1，永远找不到最短路。其实如果一个图中带有负权回路那么这个图则没有最短路。\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417232000293-1893870874.png\" alt=\"\" />\n\n## 核心代码\n\n```cpp\nfor(k=1;k<=n;k++) //枚举中转点\n    for(i=1;i<=n;i++) //枚举起点        \n        for(j=1;j<=n;j++)          //枚举终点\n            d[i][j]=min(d[i][k]+d[k][j],d[i][j]);\n```\n\n# Dijkstra算法\n\n## 使用条件\n\n求单源最短路径，不能处理负权。\n\n## 时间复杂度\n\nO（n<sup>2</sup>）\n\n## 讲解\n\nDijkstra算法使用的是贪心方法，d[i]表示起点s0到i的最短距离。\n\n从起点s0开始，选择未访问过的离s0最近的一个点i，也就是最小的d[i]，因为所以边权为正，不会存在更短的路径到达i，保证了贪心的正确性。然后将i作为中间点，更新经过i可到达的点的最短路距离，继续贪心寻找未访问过的最近的一个点，经过n次贪心，算法结束。\n\n看图：\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418080223791-1693237628.png\" alt=\"\" /><img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418080234900-1450733756.png\" alt=\"\" />\n\n根据这个图，Dijkstra算法应该就很好理解了。\n\n## 核心代码\n\n```cpp\nfor (i = 1; k <= n; k++)\n{\n    maxn = 0x7fffffff;\n    for (j = 1; j <= n; j++)                 //找出未访问最小的d[j]\n    {\n        if (!vis[j] && d[j] < maxn)\n        {\n            maxn = d[j];\n            k = i;\n        }\n\n    }\n    vis[k] = 1;\n    for (j = 1; j <= n; j++)          //k作为中间点，更新起点经过k到达其他点的d[j]\n        if (w[k][j])\n        {\n            d[j] = min{ d[k] + w[k][j],d[j] };\n        }\n}\n```\n\n# SPFA算法\n\n## 使用条件\n\n求单源最短路，可以处理负权边\n\n## 时间复杂度\n\n对于稀疏图，为O(km)，k为较小的常数，而对于稠密图或者构造的网格图，会提高到O(n*m)\n\n## 讲解\n\n建立一个队列，初始时队列里只有起始点，在建立一个表格记录起始点到所有点的最短路径（该表格的初始值要赋为极大值，该点到他本身的路径赋为0）。然后执行松弛操作，用队列里有的点去刷新起始点到所有点的最短路，如果刷新成功且被刷新点不在队列中则把该点加入到队列最后。重复执行直到队列为空。\n\n图：\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418082427765-963504437.png\" alt=\"\" />\n\n源点A首先入队，并且AB松弛\n\n<img src=\"https://img-blog.csdnimg.cn/20190316204559264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n扩展与A相连的边，B，C 入队并松弛。\n\n<img src=\"https://img-blog.csdnimg.cn/20190316204613979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<img src=\"https://img-blog.csdnimg.cn/20190316204625218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\nD出队，E入队并松弛。\n\n<img src=\"https://img-blog.csdnimg.cn/20190316204637351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\nE出队，此时队列为空，源点到所有点的最短路已被找到，A->E的最短路即为8\n\n<img src=\"https://img-blog.csdnimg.cn/20190316204648479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n以上就是SPFA算法的过程。\n\n## 核心代码\n\n```cpp\nq.push(s);\nvis[s]=1;  //源点s入队，标记入队\nwhile(q.size())\n{\n       u=q.front();q.pop();vis[u]=0;        //取出队头，标记未入队\n       for(i=head[u];i;i=next[i])\n       {\n              v=ver[i];\n              w=edge[i];\n              if(dis[u]+w<dis[v])\n              {\n                     dis[v]=dis[u]+w;\n                     if(!vis[v])   {q.push(v);vis[v]=1;}    //如果没有在队列，入队，标记已入队\n              }    \n       }\n}\n```\n","slug":"最短路径问题的几种算法","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2n4001rpb0yd1n389ll","content":"<h1 id=\"Floyd算法\"><a href=\"#Floyd算法\" class=\"headerlink\" title=\"Floyd算法\"></a>Floyd算法</h1><h2 id=\"使用条件\"><a href=\"#使用条件\" class=\"headerlink\" title=\"使用条件\"></a>使用条件</h2><p>可以求出多源最短路，可以处理负权边的情况，但是不能出现负环。</p>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>O（n<sup>3</sup>）</p>\n<h2 id=\"讲解\"><a href=\"#讲解\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>Floyed算法使用的是动态规划的方法。</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417230554342-692141756.png\" alt=\"\" />\n\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417230839931-835750678.png\" alt=\"\" />\n\n<p>只需要使用最简单粗暴的做法，将出发点、结束点、中转点都枚举一遍就可以了。</p>\n<p>状态转移方程：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d[i][j]=min(d[i][k]+d[k][j],d[i][j])</span><br></pre></td></tr></table></figure>\n\n<p>这样，再写出Floyd算法的核心代码就很容易了。</p>\n<p>另外需要注意的是：Floyd算法不能解决带有负权回路（或者叫负权环）的图，因为带有负权回路的图没有最短路。例如下面这个图就不存在1号顶点到3号顶点的最短路径。因为1-&gt;2-&gt;3-&gt;1-&gt;2-&gt;3-&gt;-&gt;1-&gt;2-&gt;3这样路径中，每绕一次1-&gt;-2&gt;3这样的环，最短路就会减少1，永远找不到最短路。其实如果一个图中带有负权回路那么这个图则没有最短路。</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417232000293-1893870874.png\" alt=\"\" />\n\n<h2 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(k=<span class=\"number\">1</span>;k&lt;=n;k++) <span class=\"comment\">//枚举中转点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++) <span class=\"comment\">//枚举起点        </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;=n;j++)          <span class=\"comment\">//枚举终点</span></span><br><span class=\"line\">            d[i][j]=min(d[i][k]+d[k][j],d[i][j]);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h1><h2 id=\"使用条件-1\"><a href=\"#使用条件-1\" class=\"headerlink\" title=\"使用条件\"></a>使用条件</h2><p>求单源最短路径，不能处理负权。</p>\n<h2 id=\"时间复杂度-1\"><a href=\"#时间复杂度-1\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>O（n<sup>2</sup>）</p>\n<h2 id=\"讲解-1\"><a href=\"#讲解-1\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>Dijkstra算法使用的是贪心方法，d[i]表示起点s0到i的最短距离。</p>\n<p>从起点s0开始，选择未访问过的离s0最近的一个点i，也就是最小的d[i]，因为所以边权为正，不会存在更短的路径到达i，保证了贪心的正确性。然后将i作为中间点，更新经过i可到达的点的最短路距离，继续贪心寻找未访问过的最近的一个点，经过n次贪心，算法结束。</p>\n<p>看图：</p>\n<p><img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418080223791-1693237628.png\" alt=\"\" /><img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418080234900-1450733756.png\" alt=\"\" /></p>\n<p>根据这个图，Dijkstra算法应该就很好理解了。</p>\n<h2 id=\"核心代码-1\"><a href=\"#核心代码-1\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; k &lt;= n; k++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    maxn = <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt;= n; j++)                 <span class=\"comment\">//找出未访问最小的d[j]</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!vis[j] &amp;&amp; d[j] &lt; maxn)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maxn = d[j];</span><br><span class=\"line\">            k = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vis[k] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt;= n; j++)          <span class=\"comment\">//k作为中间点，更新起点经过k到达其他点的d[j]</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (w[k][j])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            d[j] = min&#123; d[k] + w[k][j],d[j] &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SPFA算法\"><a href=\"#SPFA算法\" class=\"headerlink\" title=\"SPFA算法\"></a>SPFA算法</h1><h2 id=\"使用条件-2\"><a href=\"#使用条件-2\" class=\"headerlink\" title=\"使用条件\"></a>使用条件</h2><p>求单源最短路，可以处理负权边</p>\n<h2 id=\"时间复杂度-2\"><a href=\"#时间复杂度-2\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>对于稀疏图，为O(km)，k为较小的常数，而对于稠密图或者构造的网格图，会提高到O(n*m)</p>\n<h2 id=\"讲解-2\"><a href=\"#讲解-2\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>建立一个队列，初始时队列里只有起始点，在建立一个表格记录起始点到所有点的最短路径（该表格的初始值要赋为极大值，该点到他本身的路径赋为0）。然后执行松弛操作，用队列里有的点去刷新起始点到所有点的最短路，如果刷新成功且被刷新点不在队列中则把该点加入到队列最后。重复执行直到队列为空。</p>\n<p>图：</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418082427765-963504437.png\" alt=\"\" />\n\n<p>源点A首先入队，并且AB松弛</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20190316204559264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<p>扩展与A相连的边，B，C 入队并松弛。</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20190316204613979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20190316204625218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<p>D出队，E入队并松弛。</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20190316204637351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<p>E出队，此时队列为空，源点到所有点的最短路已被找到，A-&gt;E的最短路即为8</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20190316204648479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<p>以上就是SPFA算法的过程。</p>\n<h2 id=\"核心代码-2\"><a href=\"#核心代码-2\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q.push(s);</span><br><span class=\"line\">vis[s]=<span class=\"number\">1</span>;  <span class=\"comment\">//源点s入队，标记入队</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(q.size())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">       u=q.front();q.pop();vis[u]=<span class=\"number\">0</span>;        <span class=\"comment\">//取出队头，标记未入队</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(i=head[u];i;i=next[i])</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">              v=ver[i];</span><br><span class=\"line\">              w=edge[i];</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(dis[u]+w&lt;dis[v])</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                     dis[v]=dis[u]+w;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span>(!vis[v])   &#123;q.push(v);vis[v]=<span class=\"number\">1</span>;&#125;    <span class=\"comment\">//如果没有在队列，入队，标记已入队</span></span><br><span class=\"line\">              &#125;    </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Floyd算法\"><a href=\"#Floyd算法\" class=\"headerlink\" title=\"Floyd算法\"></a>Floyd算法</h1><h2 id=\"使用条件\"><a href=\"#使用条件\" class=\"headerlink\" title=\"使用条件\"></a>使用条件</h2><p>可以求出多源最短路，可以处理负权边的情况，但是不能出现负环。</p>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>O（n<sup>3</sup>）</p>\n<h2 id=\"讲解\"><a href=\"#讲解\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>Floyed算法使用的是动态规划的方法。</p>\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417230554342-692141756.png\" alt=\"\" />\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417230839931-835750678.png\" alt=\"\" />\n\n<p>只需要使用最简单粗暴的做法，将出发点、结束点、中转点都枚举一遍就可以了。</p>\n<p>状态转移方程：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d[i][j]=min(d[i][k]+d[k][j],d[i][j])</span><br></pre></td></tr></table></figure>\n\n<p>这样，再写出Floyd算法的核心代码就很容易了。</p>\n<p>另外需要注意的是：Floyd算法不能解决带有负权回路（或者叫负权环）的图，因为带有负权回路的图没有最短路。例如下面这个图就不存在1号顶点到3号顶点的最短路径。因为1-&gt;2-&gt;3-&gt;1-&gt;2-&gt;3-&gt;-&gt;1-&gt;2-&gt;3这样路径中，每绕一次1-&gt;-2&gt;3这样的环，最短路就会减少1，永远找不到最短路。其实如果一个图中带有负权回路那么这个图则没有最短路。</p>\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417232000293-1893870874.png\" alt=\"\" />\n\n<h2 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(k=<span class=\"number\">1</span>;k&lt;=n;k++) <span class=\"comment\">//枚举中转点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++) <span class=\"comment\">//枚举起点        </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;=n;j++)          <span class=\"comment\">//枚举终点</span></span><br><span class=\"line\">            d[i][j]=min(d[i][k]+d[k][j],d[i][j]);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h1><h2 id=\"使用条件-1\"><a href=\"#使用条件-1\" class=\"headerlink\" title=\"使用条件\"></a>使用条件</h2><p>求单源最短路径，不能处理负权。</p>\n<h2 id=\"时间复杂度-1\"><a href=\"#时间复杂度-1\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>O（n<sup>2</sup>）</p>\n<h2 id=\"讲解-1\"><a href=\"#讲解-1\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>Dijkstra算法使用的是贪心方法，d[i]表示起点s0到i的最短距离。</p>\n<p>从起点s0开始，选择未访问过的离s0最近的一个点i，也就是最小的d[i]，因为所以边权为正，不会存在更短的路径到达i，保证了贪心的正确性。然后将i作为中间点，更新经过i可到达的点的最短路距离，继续贪心寻找未访问过的最近的一个点，经过n次贪心，算法结束。</p>\n<p>看图：</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418080223791-1693237628.png\" alt=\"\" /><img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418080234900-1450733756.png\" alt=\"\" /></p>\n<p>根据这个图，Dijkstra算法应该就很好理解了。</p>\n<h2 id=\"核心代码-1\"><a href=\"#核心代码-1\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; k &lt;= n; k++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    maxn = <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt;= n; j++)                 <span class=\"comment\">//找出未访问最小的d[j]</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!vis[j] &amp;&amp; d[j] &lt; maxn)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maxn = d[j];</span><br><span class=\"line\">            k = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vis[k] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt;= n; j++)          <span class=\"comment\">//k作为中间点，更新起点经过k到达其他点的d[j]</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (w[k][j])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            d[j] = min&#123; d[k] + w[k][j],d[j] &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SPFA算法\"><a href=\"#SPFA算法\" class=\"headerlink\" title=\"SPFA算法\"></a>SPFA算法</h1><h2 id=\"使用条件-2\"><a href=\"#使用条件-2\" class=\"headerlink\" title=\"使用条件\"></a>使用条件</h2><p>求单源最短路，可以处理负权边</p>\n<h2 id=\"时间复杂度-2\"><a href=\"#时间复杂度-2\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>对于稀疏图，为O(km)，k为较小的常数，而对于稠密图或者构造的网格图，会提高到O(n*m)</p>\n<h2 id=\"讲解-2\"><a href=\"#讲解-2\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2><p>建立一个队列，初始时队列里只有起始点，在建立一个表格记录起始点到所有点的最短路径（该表格的初始值要赋为极大值，该点到他本身的路径赋为0）。然后执行松弛操作，用队列里有的点去刷新起始点到所有点的最短路，如果刷新成功且被刷新点不在队列中则把该点加入到队列最后。重复执行直到队列为空。</p>\n<p>图：</p>\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418082427765-963504437.png\" alt=\"\" />\n\n<p>源点A首先入队，并且AB松弛</p>\n<img src=\"https://img-blog.csdnimg.cn/20190316204559264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<p>扩展与A相连的边，B，C 入队并松弛。</p>\n<img src=\"https://img-blog.csdnimg.cn/20190316204613979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<img src=\"https://img-blog.csdnimg.cn/20190316204625218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<p>D出队，E入队并松弛。</p>\n<img src=\"https://img-blog.csdnimg.cn/20190316204637351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<p>E出队，此时队列为空，源点到所有点的最短路已被找到，A-&gt;E的最短路即为8</p>\n<img src=\"https://img-blog.csdnimg.cn/20190316204648479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" />\n\n<p>以上就是SPFA算法的过程。</p>\n<h2 id=\"核心代码-2\"><a href=\"#核心代码-2\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q.push(s);</span><br><span class=\"line\">vis[s]=<span class=\"number\">1</span>;  <span class=\"comment\">//源点s入队，标记入队</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(q.size())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">       u=q.front();q.pop();vis[u]=<span class=\"number\">0</span>;        <span class=\"comment\">//取出队头，标记未入队</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(i=head[u];i;i=next[i])</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">              v=ver[i];</span><br><span class=\"line\">              w=edge[i];</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(dis[u]+w&lt;dis[v])</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                     dis[v]=dis[u]+w;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span>(!vis[v])   &#123;q.push(v);vis[v]=<span class=\"number\">1</span>;&#125;    <span class=\"comment\">//如果没有在队列，入队，标记已入队</span></span><br><span class=\"line\">              &#125;    </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"数据离散化","date":"2020-04-17T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%8810.php","_content":"# 题目\n\n## 问题描述\n\n离散化就是把无限空间（或非常大的空间）中有限的个体映射到有限的空间（较小空间）中去，以此提高算法的时空效率。通俗的说，离散化就是在不改变数据相对大小的条件下，对数据进行相应的缩小。\n\n####栗子\n\n原始数据：\n\n```\n8 999 91 100000 0000 15 999 91\n```\n\n离散化后：\n\n```\n1 3 4 2 3\n```\n\n离散化有什么用处呢？有时候我们需要根据数值的大小开一个数组，由于数值很多，没办法开那么大的数组（大了会超内存限制的），但是数据的个数有限。\n\n如：有500000个数字，他们的范围是0-2000000000，这样就满足离散化的条件。我们可以把这些数离散化，最小的缩小为1，大小相邻的依次增加1，这样所有的数的范围一定能缩小到1到500000之间，同时不改变相对大小关系。\n\n####任务\n\n给你n个整数序列a[1],a[2],..,a[n]。请你在不改变相对大小关系的前提下进行离散化。\n\n####要求\n\n1.离散化后，最小的数值为1。\n2.原序列中相同的数，离散后还应相同。\n3.大小相邻的两个数离散后相差为1。\n4.离散后序列相对位置不变。\n\n###输入\n\n第一行n 原始数据的个数 。第二行n 个用一个空格隔开的整数 。\n\n###输出\n\n一行原序列离散后相应的序列 ，相邻两个数之间一个空格隔开。\n\n###输入输出样例\n\n| discretize.in               | discretize.out |\n| --------------------------- | -------------- |\n| 8 99991 1000000000 15 99991 | 1 3 4 2 3      |\n\n###数据范围\n\n30%的数据： n<100, 0< a[i]<1000;\n\n100% 的数据： n<500000 0< a[i]<2000000000\n\n# 第一种方法\n\n## 思路\n\n其实就是用一个辅助的数组把你要离散的所有数据存下来。\n\n然后排序，排序是为了后面的二分。\n\n去重，因为我们要保证相同的元素离散化后数字相同。\n\n再用二分把离散化后的数字放回原数组。\n\n## 注意事项\n\n1.去重并不是把数组中的元素删去，而是重复的部分元素在数组末尾，去重之后数组的大小要减一\n\n2.二分的时候，注意二分的区间范围，一定是离散化后的区间\n\n3.如果需要多个数组同时离散化，那就把这些数组中的数都用数组存下来\n\n## 核心代码\n\n```cpp\n//n:原数组大小\n//num:原数组中的元素\n//lsh:离散化的数组\n//cnt:离散化后的数组大小 \nint lsh[MAXN] , cnt , num[MAXN] , n;\nfor(int i=1; i<=n; i++)\n{\n    scanf(\"%d\",&num[i]);\n    lsh[i] = num[i];    \n}\nsort(lsh+1 , lsh+n+1);\ncnt = unique(lsh+1 , lsh+n+1) - lsh - 1;\nfor(int i=1; i<=n; i++)\n    num[i] = lower_bound(lsh+1 , lsh+cnt+1 , num[i]) - lsh;\n```\n\n# 第二种方法\n\n## 思路\n\n其实就是排序之后，枚举着放回原数组\n\n用一个结构体存下原数和位置，按照原数排序\n\n我结构体里面写了个重载，也可以写一个比较函数\n\n最后离散化后数在rank[]里面\n\n```cpp\nstruct Node\n{\n    int data, id;\n    bool operator < (const Node& a) const\n    {\n        return data < a.data;\n    }\n};\nNode num[MAXN];\nint rank[MAXN], n;\nfor (int i = 1; i <= n; i++)\n{\n    scanf(\"%d\", &num[i].data);\n    num[i].id = i;\n}\nsort(num + 1, num + n + 1);\nfor (int i = 1; i <= n; i++)\n{\n    rank[num[i].id] = i;\n}\n```\n","source":"_posts/数据离散化.md","raw":"---\ntitle: 数据离散化\ndate: 2020-04-18\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%8810.php   \ntags: \n    - 离散化\n    - 算法概述\n---\n# 题目\n\n## 问题描述\n\n离散化就是把无限空间（或非常大的空间）中有限的个体映射到有限的空间（较小空间）中去，以此提高算法的时空效率。通俗的说，离散化就是在不改变数据相对大小的条件下，对数据进行相应的缩小。\n\n####栗子\n\n原始数据：\n\n```\n8 999 91 100000 0000 15 999 91\n```\n\n离散化后：\n\n```\n1 3 4 2 3\n```\n\n离散化有什么用处呢？有时候我们需要根据数值的大小开一个数组，由于数值很多，没办法开那么大的数组（大了会超内存限制的），但是数据的个数有限。\n\n如：有500000个数字，他们的范围是0-2000000000，这样就满足离散化的条件。我们可以把这些数离散化，最小的缩小为1，大小相邻的依次增加1，这样所有的数的范围一定能缩小到1到500000之间，同时不改变相对大小关系。\n\n####任务\n\n给你n个整数序列a[1],a[2],..,a[n]。请你在不改变相对大小关系的前提下进行离散化。\n\n####要求\n\n1.离散化后，最小的数值为1。\n2.原序列中相同的数，离散后还应相同。\n3.大小相邻的两个数离散后相差为1。\n4.离散后序列相对位置不变。\n\n###输入\n\n第一行n 原始数据的个数 。第二行n 个用一个空格隔开的整数 。\n\n###输出\n\n一行原序列离散后相应的序列 ，相邻两个数之间一个空格隔开。\n\n###输入输出样例\n\n| discretize.in               | discretize.out |\n| --------------------------- | -------------- |\n| 8 99991 1000000000 15 99991 | 1 3 4 2 3      |\n\n###数据范围\n\n30%的数据： n<100, 0< a[i]<1000;\n\n100% 的数据： n<500000 0< a[i]<2000000000\n\n# 第一种方法\n\n## 思路\n\n其实就是用一个辅助的数组把你要离散的所有数据存下来。\n\n然后排序，排序是为了后面的二分。\n\n去重，因为我们要保证相同的元素离散化后数字相同。\n\n再用二分把离散化后的数字放回原数组。\n\n## 注意事项\n\n1.去重并不是把数组中的元素删去，而是重复的部分元素在数组末尾，去重之后数组的大小要减一\n\n2.二分的时候，注意二分的区间范围，一定是离散化后的区间\n\n3.如果需要多个数组同时离散化，那就把这些数组中的数都用数组存下来\n\n## 核心代码\n\n```cpp\n//n:原数组大小\n//num:原数组中的元素\n//lsh:离散化的数组\n//cnt:离散化后的数组大小 \nint lsh[MAXN] , cnt , num[MAXN] , n;\nfor(int i=1; i<=n; i++)\n{\n    scanf(\"%d\",&num[i]);\n    lsh[i] = num[i];    \n}\nsort(lsh+1 , lsh+n+1);\ncnt = unique(lsh+1 , lsh+n+1) - lsh - 1;\nfor(int i=1; i<=n; i++)\n    num[i] = lower_bound(lsh+1 , lsh+cnt+1 , num[i]) - lsh;\n```\n\n# 第二种方法\n\n## 思路\n\n其实就是排序之后，枚举着放回原数组\n\n用一个结构体存下原数和位置，按照原数排序\n\n我结构体里面写了个重载，也可以写一个比较函数\n\n最后离散化后数在rank[]里面\n\n```cpp\nstruct Node\n{\n    int data, id;\n    bool operator < (const Node& a) const\n    {\n        return data < a.data;\n    }\n};\nNode num[MAXN];\nint rank[MAXN], n;\nfor (int i = 1; i <= n; i++)\n{\n    scanf(\"%d\", &num[i].data);\n    num[i].id = i;\n}\nsort(num + 1, num + n + 1);\nfor (int i = 1; i <= n; i++)\n{\n    rank[num[i].id] = i;\n}\n```\n","slug":"数据离散化","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2n5001upb0yc6xf8mco","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>离散化就是把无限空间（或非常大的空间）中有限的个体映射到有限的空间（较小空间）中去，以此提高算法的时空效率。通俗的说，离散化就是在不改变数据相对大小的条件下，对数据进行相应的缩小。</p>\n<p>####栗子</p>\n<p>原始数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 999 91 100000 0000 15 999 91</span><br></pre></td></tr></table></figure>\n\n<p>离散化后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 3 4 2 3</span><br></pre></td></tr></table></figure>\n\n<p>离散化有什么用处呢？有时候我们需要根据数值的大小开一个数组，由于数值很多，没办法开那么大的数组（大了会超内存限制的），但是数据的个数有限。</p>\n<p>如：有500000个数字，他们的范围是0-2000000000，这样就满足离散化的条件。我们可以把这些数离散化，最小的缩小为1，大小相邻的依次增加1，这样所有的数的范围一定能缩小到1到500000之间，同时不改变相对大小关系。</p>\n<p>####任务</p>\n<p>给你n个整数序列a[1],a[2],..,a[n]。请你在不改变相对大小关系的前提下进行离散化。</p>\n<p>####要求</p>\n<p>1.离散化后，最小的数值为1。<br>2.原序列中相同的数，离散后还应相同。<br>3.大小相邻的两个数离散后相差为1。<br>4.离散后序列相对位置不变。</p>\n<p>###输入</p>\n<p>第一行n 原始数据的个数 。第二行n 个用一个空格隔开的整数 。</p>\n<p>###输出</p>\n<p>一行原序列离散后相应的序列 ，相邻两个数之间一个空格隔开。</p>\n<p>###输入输出样例</p>\n<table>\n<thead>\n<tr>\n<th>discretize.in</th>\n<th>discretize.out</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>8 99991 1000000000 15 99991</td>\n<td>1 3 4 2 3</td>\n</tr>\n</tbody></table>\n<p>###数据范围</p>\n<p>30%的数据： n&lt;100, 0&lt; a[i]&lt;1000;</p>\n<p>100% 的数据： n&lt;500000 0&lt; a[i]&lt;2000000000</p>\n<h1 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>其实就是用一个辅助的数组把你要离散的所有数据存下来。</p>\n<p>然后排序，排序是为了后面的二分。</p>\n<p>去重，因为我们要保证相同的元素离散化后数字相同。</p>\n<p>再用二分把离散化后的数字放回原数组。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>1.去重并不是把数组中的元素删去，而是重复的部分元素在数组末尾，去重之后数组的大小要减一</p>\n<p>2.二分的时候，注意二分的区间范围，一定是离散化后的区间</p>\n<p>3.如果需要多个数组同时离散化，那就把这些数组中的数都用数组存下来</p>\n<h2 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//n:原数组大小</span></span><br><span class=\"line\"><span class=\"comment\">//num:原数组中的元素</span></span><br><span class=\"line\"><span class=\"comment\">//lsh:离散化的数组</span></span><br><span class=\"line\"><span class=\"comment\">//cnt:离散化后的数组大小 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> lsh[MAXN] , cnt , num[MAXN] , n;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;num[i]);</span><br><span class=\"line\">    lsh[i] = num[i];    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(lsh+<span class=\"number\">1</span> , lsh+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">cnt = unique(lsh+<span class=\"number\">1</span> , lsh+n+<span class=\"number\">1</span>) - lsh - <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)</span><br><span class=\"line\">    num[i] = lower_bound(lsh+<span class=\"number\">1</span> , lsh+cnt+<span class=\"number\">1</span> , num[i]) - lsh;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h1><h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>其实就是排序之后，枚举着放回原数组</p>\n<p>用一个结构体存下原数和位置，按照原数排序</p>\n<p>我结构体里面写了个重载，也可以写一个比较函数</p>\n<p>最后离散化后数在rank[]里面</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data, id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Node&amp; a) <span class=\"keyword\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data &lt; a.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Node num[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> rank[MAXN], n;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num[i].data);</span><br><span class=\"line\">    num[i].id = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(num + <span class=\"number\">1</span>, num + n + <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    rank[num[i].id] = i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>离散化就是把无限空间（或非常大的空间）中有限的个体映射到有限的空间（较小空间）中去，以此提高算法的时空效率。通俗的说，离散化就是在不改变数据相对大小的条件下，对数据进行相应的缩小。</p>\n<p>####栗子</p>\n<p>原始数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 999 91 100000 0000 15 999 91</span><br></pre></td></tr></table></figure>\n\n<p>离散化后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 3 4 2 3</span><br></pre></td></tr></table></figure>\n\n<p>离散化有什么用处呢？有时候我们需要根据数值的大小开一个数组，由于数值很多，没办法开那么大的数组（大了会超内存限制的），但是数据的个数有限。</p>\n<p>如：有500000个数字，他们的范围是0-2000000000，这样就满足离散化的条件。我们可以把这些数离散化，最小的缩小为1，大小相邻的依次增加1，这样所有的数的范围一定能缩小到1到500000之间，同时不改变相对大小关系。</p>\n<p>####任务</p>\n<p>给你n个整数序列a[1],a[2],..,a[n]。请你在不改变相对大小关系的前提下进行离散化。</p>\n<p>####要求</p>\n<p>1.离散化后，最小的数值为1。<br>2.原序列中相同的数，离散后还应相同。<br>3.大小相邻的两个数离散后相差为1。<br>4.离散后序列相对位置不变。</p>\n<p>###输入</p>\n<p>第一行n 原始数据的个数 。第二行n 个用一个空格隔开的整数 。</p>\n<p>###输出</p>\n<p>一行原序列离散后相应的序列 ，相邻两个数之间一个空格隔开。</p>\n<p>###输入输出样例</p>\n<table>\n<thead>\n<tr>\n<th>discretize.in</th>\n<th>discretize.out</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>8 99991 1000000000 15 99991</td>\n<td>1 3 4 2 3</td>\n</tr>\n</tbody></table>\n<p>###数据范围</p>\n<p>30%的数据： n&lt;100, 0&lt; a[i]&lt;1000;</p>\n<p>100% 的数据： n&lt;500000 0&lt; a[i]&lt;2000000000</p>\n<h1 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>其实就是用一个辅助的数组把你要离散的所有数据存下来。</p>\n<p>然后排序，排序是为了后面的二分。</p>\n<p>去重，因为我们要保证相同的元素离散化后数字相同。</p>\n<p>再用二分把离散化后的数字放回原数组。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>1.去重并不是把数组中的元素删去，而是重复的部分元素在数组末尾，去重之后数组的大小要减一</p>\n<p>2.二分的时候，注意二分的区间范围，一定是离散化后的区间</p>\n<p>3.如果需要多个数组同时离散化，那就把这些数组中的数都用数组存下来</p>\n<h2 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//n:原数组大小</span></span><br><span class=\"line\"><span class=\"comment\">//num:原数组中的元素</span></span><br><span class=\"line\"><span class=\"comment\">//lsh:离散化的数组</span></span><br><span class=\"line\"><span class=\"comment\">//cnt:离散化后的数组大小 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> lsh[MAXN] , cnt , num[MAXN] , n;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;num[i]);</span><br><span class=\"line\">    lsh[i] = num[i];    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(lsh+<span class=\"number\">1</span> , lsh+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">cnt = unique(lsh+<span class=\"number\">1</span> , lsh+n+<span class=\"number\">1</span>) - lsh - <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)</span><br><span class=\"line\">    num[i] = lower_bound(lsh+<span class=\"number\">1</span> , lsh+cnt+<span class=\"number\">1</span> , num[i]) - lsh;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h1><h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>其实就是排序之后，枚举着放回原数组</p>\n<p>用一个结构体存下原数和位置，按照原数排序</p>\n<p>我结构体里面写了个重载，也可以写一个比较函数</p>\n<p>最后离散化后数在rank[]里面</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data, id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> Node&amp; a) <span class=\"keyword\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data &lt; a.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Node num[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> rank[MAXN], n;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num[i].data);</span><br><span class=\"line\">    num[i].id = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(num + <span class=\"number\">1</span>, num + n + <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    rank[num[i].id] = i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"洛谷P1217USACO1.5回文质数PrimePalindromes","date":"2020-02-05T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%889.php","_content":"# P1217 [USACO1.5]回文质数 Prime Palindromes\n\n## 题目描述\n\n因为 151 既是一个质数又是一个回文数（从左到右和从右到左是看一样的），所以 151 是回文质数。\n\n写一个程序来找出范围 \\[a,b\\](5≤a<b≤100,000,000)( 一亿)间的所有回文质数。\n\n## 输入格式\n\n第 1 行: 二个整数 `a `和 `b` .\n\n## 输出格式\n\n输出一个回文质数的列表，一行一个。\n\n## 输入输出样例\n\n```\n5 500\n```\n\n```cpp\n5\n7\n11\n101\n131\n151\n181\n191\n313\n353\n373\n383\n```\n\n## 说明/提示\n\nHint 1: Generate the palindromes and see if they are prime.\n\n提示 1: 找出所有的回文数再判断它们是不是质数（素数）.\n\nHint 2: Generate palindromes by combining digits properly. You might need more than one of the loops like below.\n\n提示 2: 要产生正确的回文数，你可能需要几个像下面这样的循环。\n\n题目翻译来自NOCOW。\n\nUSACO Training Section 1.5\n\n产生长度为5的回文数:\n\n```\n1 for (d1 = 1; d1 <= 9; d1+=2) {    // 只有奇数才会是素数\n2      for (d2 = 0; d2 <= 9; d2++) {\n3          for (d3 = 0; d3 <= 9; d3++) {\n4            palindrome = 10000*d1 + 1000*d2 +100*d3 + 10*d2 + d1;//(处理回文数...)\n5          }\n6      }\n7  }\n```\n\n **首先，我看了题下面的提示，就想按照提示的方法解这道题。因为右边界的取值范围最大到100000000，所以我考虑到位数可以有以下几种情况：1,3,5,7,9.分类讨论分别写循环就可以列举出这里所有回文数了。**\n\n**然后因为题目要的是回文质数，所以再加上一个质数的判断函数，是质数就输出就可以了：**\n\n**按照提示，列举回文数的方法是这样的：**\n\n**比如说我们需要列举所有九位的回文数，我们需要循环5个数：a,b,c,d,e，把这五个数从0`9进行循环，我们的回文数是这样的：**\n\n<img src=\"https://img2018.cnblogs.com/common/1924270/202002/1924270-20200206094520257-1296305125.png\" alt=\"\" />\n\n**那就以此类推，写出其他位数的情况：**\n\n```cpp\nint l,r,num,abc=0;\ncin >> l >> r;\nint res[10000];\n    for (int a = 1; a <= 9; a += 2)//一位\n    {\n        num =a;\n        if (num >= l && num <= r && isp(num))\n        {\n            res[abc] = num;\n            abc++;\n        }\n    }\nfor (int a = 0; a <= 9; a++)//三位\n{\n        for (int b = 1; b <= 9; b += 2)\n        {\n            num =b * 100 + a * 10 + b;\n            if (num >= l && num <= r && isp(num))\n            {\n                res[abc] = num;\n                abc++;\n            }\n        }\n}\nfor (int a = 0; a <= 9; a++)//五位\n{\n    for (int b = 0; b <= 9; b++)\n    {\n            for (int c = 1; c <= 9; c += 2)\n            {\n                num = c * 10000 + b * 1000 + a * 100 + b * 10 + c;\n                if (num >= l && num <= r && isp(num))\n                {\n                    res[abc] = num;\n                    abc++;\n                }\n            }\n    }\n}\nfor (int a = 0; a <= 9; a++)//七位\n{\n    for (int b = 0; b <= 9; b++)\n    {\n        for (int c = 0; c <= 9; c++)\n        {\n            for (int d = 1; d <= 9; d+=2)\n            {\n                    num =   d * 1000000 + c * 100000 + b * 10000 + a * 1000 + b * 100 + c * 10 + d ;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n            }\n        }\n    }\n}\nfor (int a = 0; a <= 9; a++)//九位\n{\n    for (int b = 0; b <= 9; b++)\n    {\n        for (int c = 0; c <= 9; c++)\n        {\n            for (int d = 0; d <= 9; d++)\n            {\n                for (int e = 1; e <= 9; e+=2)\n                {\n                    num = e * 100000000 + d * 10000000 + c * 1000000 + b * 100000 + a * 10000 + b * 1000 + c * 100 + d * 10 + e;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n质数判断函数：\n\n```cpp\nint isp(int a)\n{\n    for (int i = 2; i <= floor(sqrt(a));i++)\n    {\n        if (a % i == 0)\n        {\n            return 0;//能被整除说明不是质数\n        }\n    }\n    return 1;\n}\n```\n\n但是这样子储存在数组中的数据顺序有些乱，因为我是按照它中间那一位数的顺序循环的。所以需要排一下序：\n\n```cpp\nsort(res, res + abc);\n```\n\n然后就珂以输出了：\n\n```cpp\nfor (int z = 0; z <= abc-1; z++)\n{\n    cout << res[z] << endl;\n}\n```\n\n最后提交上去一看：\n\nWA，WA，WA\n\n仔细研究程序发现：\n\n回文数不止有奇数位的，还有偶数位的！！！（真是一个惊天动地的珂学大发现呢！）\n\n赶紧加上：\n\n```cpp\nfor (int b = 0; b <= 9; b++)//六位\n        {\n            for (int c = 0; c <= 9; c++)\n            {\n                for (int d = 1; d <= 9; d += 2)\n                {\n                    num = d * 100000 + c * 10000 + b * 1000 +b * 100 + c * 10 + d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n            }\n        }\n            for (int c = 0; c <= 9; c++)//四位\n            {\n                for (int d = 1; d <= 9; d += 2)\n                {\n                    num = d * 1000 + c * 100 + c * 10 + d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n            }\n                for (int d = 1; d <= 9; d += 2)//两位\n                {\n                    num = d * 10 +d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n```\n\n大功告成！\n\n附上全部的程序：\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nint isp(int a)\n{\n    for (int i = 2; i <= floor(sqrt(a));i++)\n    {\n        if (a % i == 0)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main()\n{\n    int l,r,num,abc=0;\n    cin >> l >> r;\n    int res[10000];\n        for (int a = 1; a <= 9; a += 2)//一位\n        {\n            num =a;\n            if (num >= l && num <= r && isp(num))\n            {\n                res[abc] = num;\n                abc++;\n            }\n        }\n    for (int a = 0; a <= 9; a++)//三位\n    {\n            for (int b = 1; b <= 9; b += 2)\n            {\n                num =b * 100 + a * 10 + b;\n                if (num >= l && num <= r && isp(num))\n                {\n                    res[abc] = num;\n                    abc++;\n                }\n            }\n    }\n    for (int a = 0; a <= 9; a++)//五位\n    {\n        for (int b = 0; b <= 9; b++)\n        {\n                for (int c = 1; c <= 9; c += 2)\n                {\n                    num = c * 10000 + b * 1000 + a * 100 + b * 10 + c;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n        }\n    }\n    for (int a = 0; a <= 9; a++)//七位\n    {\n        for (int b = 0; b <= 9; b++)\n        {\n            for (int c = 0; c <= 9; c++)\n            {\n                for (int d = 1; d <= 9; d+=2)\n                {\n                        num =   d * 1000000 + c * 100000 + b * 10000 + a * 1000 + b * 100 + c * 10 + d ;\n                        if (num >= l && num <= r && isp(num))\n                        {\n                            res[abc] = num;\n                            abc++;\n                        }\n                }\n            }\n        }\n    }\n    for (int a = 0; a <= 9; a++)//九位\n    {\n        for (int b = 0; b <= 9; b++)\n        {\n            for (int c = 0; c <= 9; c++)\n            {\n                for (int d = 0; d <= 9; d++)\n                {\n                    for (int e = 1; e <= 9; e+=2)\n                    {\n                        num = e * 100000000 + d * 10000000 + c * 1000000 + b * 100000 + a * 10000 + b * 1000 + c * 100 + d * 10 + e;\n                        if (num >= l && num <= r && isp(num))\n                        {\n                            res[abc] = num;\n                            abc++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n        for (int b = 0; b <= 9; b++)//六位\n        {\n            for (int c = 0; c <= 9; c++)\n            {\n                for (int d = 1; d <= 9; d += 2)\n                {\n                    num = d * 100000 + c * 10000 + b * 1000 +b * 100 + c * 10 + d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n            }\n        }\n            for (int c = 0; c <= 9; c++)//四位\n            {\n                for (int d = 1; d <= 9; d += 2)\n                {\n                    num = d * 1000 + c * 100 + c * 10 + d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n            }\n                for (int d = 1; d <= 9; d += 2)//两位\n                {\n                    num = d * 10 +d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n    sort(res, res + abc);\n    for (int z = 0; z <= abc-1; z++)\n    {\n        cout << res[z] << endl;\n    }\n    return 0;\n}\n```\n\n还有一个方法。我们其实可以先列举出所有5~100000000的整数，然后分别判断是不是回文数，是不是质数，是不是在区间内。因为会超时，所以还是别试了78.42秒\n\n程序：（其实可以直接用++来列举，我这样进行嵌套是为了能一眼看出效率有多么低）（5 100000000时）\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint isp(int pr)\n{\n    for (int i = 2; i <= floor(sqrt(pr)); i++)\n    {\n        if (pr % i == 0)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}\nint ishui(int x)\n{\n    int s=0;\n    if (x % 10 == 0 || x <= 0)\n    {\n        return 0;\n    }\n    while (x > s)\n    {\n        s = s * 10 + x % 10;\n        x /= 10;\n    }\n    if (x == s || s / 10 == x)\n    {\n        return 1;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main()\n{\n    int s = 0;\n    int l=5, r=100000000;\n    for (int a = 0; a <= 9; a++)\n    {\n        for (int b = 0; b <= 9; b++)\n        {\n            for (int c = 0; c <= 9; c++)\n            {\n                for (int d = 0; d <= 9; d++)\n                {\n                    for (int e = 0; e <= 9; e++)\n                    {\n                        for (int f = 0; f <= 9; f++)\n                        {\n                            for (int g = 0; g <= 9; g++)\n                            {\n                                for (int h = 0; h <= 9; h++)\n                                {\n                                    for (int i = 0; i <= 9; i++)\n                                    {\n                                        s = a * 100000000 + b * 10000000 + c * 1000000 + d * 100000 + e * 10000 + f * 1000 + g * 100 + h * 10 + i;\n                                        if (isp(s) && ishui(s) && s >= l && s <= r)\n                                        {\n                                            cout << s << endl;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return 0;\n}\n```\n","source":"_posts/洛谷P1217USACO1.5回文质数PrimePalindromes.md","raw":"---\ntitle: 洛谷P1217USACO1.5回文质数PrimePalindromes\ndate: 2020-02-06\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%889.php   \ntags: \n    - 洛谷\n    - 数论\n---\n# P1217 [USACO1.5]回文质数 Prime Palindromes\n\n## 题目描述\n\n因为 151 既是一个质数又是一个回文数（从左到右和从右到左是看一样的），所以 151 是回文质数。\n\n写一个程序来找出范围 \\[a,b\\](5≤a<b≤100,000,000)( 一亿)间的所有回文质数。\n\n## 输入格式\n\n第 1 行: 二个整数 `a `和 `b` .\n\n## 输出格式\n\n输出一个回文质数的列表，一行一个。\n\n## 输入输出样例\n\n```\n5 500\n```\n\n```cpp\n5\n7\n11\n101\n131\n151\n181\n191\n313\n353\n373\n383\n```\n\n## 说明/提示\n\nHint 1: Generate the palindromes and see if they are prime.\n\n提示 1: 找出所有的回文数再判断它们是不是质数（素数）.\n\nHint 2: Generate palindromes by combining digits properly. You might need more than one of the loops like below.\n\n提示 2: 要产生正确的回文数，你可能需要几个像下面这样的循环。\n\n题目翻译来自NOCOW。\n\nUSACO Training Section 1.5\n\n产生长度为5的回文数:\n\n```\n1 for (d1 = 1; d1 <= 9; d1+=2) {    // 只有奇数才会是素数\n2      for (d2 = 0; d2 <= 9; d2++) {\n3          for (d3 = 0; d3 <= 9; d3++) {\n4            palindrome = 10000*d1 + 1000*d2 +100*d3 + 10*d2 + d1;//(处理回文数...)\n5          }\n6      }\n7  }\n```\n\n **首先，我看了题下面的提示，就想按照提示的方法解这道题。因为右边界的取值范围最大到100000000，所以我考虑到位数可以有以下几种情况：1,3,5,7,9.分类讨论分别写循环就可以列举出这里所有回文数了。**\n\n**然后因为题目要的是回文质数，所以再加上一个质数的判断函数，是质数就输出就可以了：**\n\n**按照提示，列举回文数的方法是这样的：**\n\n**比如说我们需要列举所有九位的回文数，我们需要循环5个数：a,b,c,d,e，把这五个数从0`9进行循环，我们的回文数是这样的：**\n\n<img src=\"https://img2018.cnblogs.com/common/1924270/202002/1924270-20200206094520257-1296305125.png\" alt=\"\" />\n\n**那就以此类推，写出其他位数的情况：**\n\n```cpp\nint l,r,num,abc=0;\ncin >> l >> r;\nint res[10000];\n    for (int a = 1; a <= 9; a += 2)//一位\n    {\n        num =a;\n        if (num >= l && num <= r && isp(num))\n        {\n            res[abc] = num;\n            abc++;\n        }\n    }\nfor (int a = 0; a <= 9; a++)//三位\n{\n        for (int b = 1; b <= 9; b += 2)\n        {\n            num =b * 100 + a * 10 + b;\n            if (num >= l && num <= r && isp(num))\n            {\n                res[abc] = num;\n                abc++;\n            }\n        }\n}\nfor (int a = 0; a <= 9; a++)//五位\n{\n    for (int b = 0; b <= 9; b++)\n    {\n            for (int c = 1; c <= 9; c += 2)\n            {\n                num = c * 10000 + b * 1000 + a * 100 + b * 10 + c;\n                if (num >= l && num <= r && isp(num))\n                {\n                    res[abc] = num;\n                    abc++;\n                }\n            }\n    }\n}\nfor (int a = 0; a <= 9; a++)//七位\n{\n    for (int b = 0; b <= 9; b++)\n    {\n        for (int c = 0; c <= 9; c++)\n        {\n            for (int d = 1; d <= 9; d+=2)\n            {\n                    num =   d * 1000000 + c * 100000 + b * 10000 + a * 1000 + b * 100 + c * 10 + d ;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n            }\n        }\n    }\n}\nfor (int a = 0; a <= 9; a++)//九位\n{\n    for (int b = 0; b <= 9; b++)\n    {\n        for (int c = 0; c <= 9; c++)\n        {\n            for (int d = 0; d <= 9; d++)\n            {\n                for (int e = 1; e <= 9; e+=2)\n                {\n                    num = e * 100000000 + d * 10000000 + c * 1000000 + b * 100000 + a * 10000 + b * 1000 + c * 100 + d * 10 + e;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n质数判断函数：\n\n```cpp\nint isp(int a)\n{\n    for (int i = 2; i <= floor(sqrt(a));i++)\n    {\n        if (a % i == 0)\n        {\n            return 0;//能被整除说明不是质数\n        }\n    }\n    return 1;\n}\n```\n\n但是这样子储存在数组中的数据顺序有些乱，因为我是按照它中间那一位数的顺序循环的。所以需要排一下序：\n\n```cpp\nsort(res, res + abc);\n```\n\n然后就珂以输出了：\n\n```cpp\nfor (int z = 0; z <= abc-1; z++)\n{\n    cout << res[z] << endl;\n}\n```\n\n最后提交上去一看：\n\nWA，WA，WA\n\n仔细研究程序发现：\n\n回文数不止有奇数位的，还有偶数位的！！！（真是一个惊天动地的珂学大发现呢！）\n\n赶紧加上：\n\n```cpp\nfor (int b = 0; b <= 9; b++)//六位\n        {\n            for (int c = 0; c <= 9; c++)\n            {\n                for (int d = 1; d <= 9; d += 2)\n                {\n                    num = d * 100000 + c * 10000 + b * 1000 +b * 100 + c * 10 + d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n            }\n        }\n            for (int c = 0; c <= 9; c++)//四位\n            {\n                for (int d = 1; d <= 9; d += 2)\n                {\n                    num = d * 1000 + c * 100 + c * 10 + d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n            }\n                for (int d = 1; d <= 9; d += 2)//两位\n                {\n                    num = d * 10 +d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n```\n\n大功告成！\n\n附上全部的程序：\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nint isp(int a)\n{\n    for (int i = 2; i <= floor(sqrt(a));i++)\n    {\n        if (a % i == 0)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main()\n{\n    int l,r,num,abc=0;\n    cin >> l >> r;\n    int res[10000];\n        for (int a = 1; a <= 9; a += 2)//一位\n        {\n            num =a;\n            if (num >= l && num <= r && isp(num))\n            {\n                res[abc] = num;\n                abc++;\n            }\n        }\n    for (int a = 0; a <= 9; a++)//三位\n    {\n            for (int b = 1; b <= 9; b += 2)\n            {\n                num =b * 100 + a * 10 + b;\n                if (num >= l && num <= r && isp(num))\n                {\n                    res[abc] = num;\n                    abc++;\n                }\n            }\n    }\n    for (int a = 0; a <= 9; a++)//五位\n    {\n        for (int b = 0; b <= 9; b++)\n        {\n                for (int c = 1; c <= 9; c += 2)\n                {\n                    num = c * 10000 + b * 1000 + a * 100 + b * 10 + c;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n        }\n    }\n    for (int a = 0; a <= 9; a++)//七位\n    {\n        for (int b = 0; b <= 9; b++)\n        {\n            for (int c = 0; c <= 9; c++)\n            {\n                for (int d = 1; d <= 9; d+=2)\n                {\n                        num =   d * 1000000 + c * 100000 + b * 10000 + a * 1000 + b * 100 + c * 10 + d ;\n                        if (num >= l && num <= r && isp(num))\n                        {\n                            res[abc] = num;\n                            abc++;\n                        }\n                }\n            }\n        }\n    }\n    for (int a = 0; a <= 9; a++)//九位\n    {\n        for (int b = 0; b <= 9; b++)\n        {\n            for (int c = 0; c <= 9; c++)\n            {\n                for (int d = 0; d <= 9; d++)\n                {\n                    for (int e = 1; e <= 9; e+=2)\n                    {\n                        num = e * 100000000 + d * 10000000 + c * 1000000 + b * 100000 + a * 10000 + b * 1000 + c * 100 + d * 10 + e;\n                        if (num >= l && num <= r && isp(num))\n                        {\n                            res[abc] = num;\n                            abc++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n        for (int b = 0; b <= 9; b++)//六位\n        {\n            for (int c = 0; c <= 9; c++)\n            {\n                for (int d = 1; d <= 9; d += 2)\n                {\n                    num = d * 100000 + c * 10000 + b * 1000 +b * 100 + c * 10 + d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n            }\n        }\n            for (int c = 0; c <= 9; c++)//四位\n            {\n                for (int d = 1; d <= 9; d += 2)\n                {\n                    num = d * 1000 + c * 100 + c * 10 + d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n            }\n                for (int d = 1; d <= 9; d += 2)//两位\n                {\n                    num = d * 10 +d;\n                    if (num >= l && num <= r && isp(num))\n                    {\n                        res[abc] = num;\n                        abc++;\n                    }\n                }\n    sort(res, res + abc);\n    for (int z = 0; z <= abc-1; z++)\n    {\n        cout << res[z] << endl;\n    }\n    return 0;\n}\n```\n\n还有一个方法。我们其实可以先列举出所有5~100000000的整数，然后分别判断是不是回文数，是不是质数，是不是在区间内。因为会超时，所以还是别试了78.42秒\n\n程序：（其实可以直接用++来列举，我这样进行嵌套是为了能一眼看出效率有多么低）（5 100000000时）\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint isp(int pr)\n{\n    for (int i = 2; i <= floor(sqrt(pr)); i++)\n    {\n        if (pr % i == 0)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}\nint ishui(int x)\n{\n    int s=0;\n    if (x % 10 == 0 || x <= 0)\n    {\n        return 0;\n    }\n    while (x > s)\n    {\n        s = s * 10 + x % 10;\n        x /= 10;\n    }\n    if (x == s || s / 10 == x)\n    {\n        return 1;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main()\n{\n    int s = 0;\n    int l=5, r=100000000;\n    for (int a = 0; a <= 9; a++)\n    {\n        for (int b = 0; b <= 9; b++)\n        {\n            for (int c = 0; c <= 9; c++)\n            {\n                for (int d = 0; d <= 9; d++)\n                {\n                    for (int e = 0; e <= 9; e++)\n                    {\n                        for (int f = 0; f <= 9; f++)\n                        {\n                            for (int g = 0; g <= 9; g++)\n                            {\n                                for (int h = 0; h <= 9; h++)\n                                {\n                                    for (int i = 0; i <= 9; i++)\n                                    {\n                                        s = a * 100000000 + b * 10000000 + c * 1000000 + d * 100000 + e * 10000 + f * 1000 + g * 100 + h * 10 + i;\n                                        if (isp(s) && ishui(s) && s >= l && s <= r)\n                                        {\n                                            cout << s << endl;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return 0;\n}\n```\n","slug":"洛谷P1217USACO1.5回文质数PrimePalindromes","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2n6001xpb0ychpe73e3","content":"<h1 id=\"P1217-USACO1-5-回文质数-Prime-Palindromes\"><a href=\"#P1217-USACO1-5-回文质数-Prime-Palindromes\" class=\"headerlink\" title=\"P1217 [USACO1.5]回文质数 Prime Palindromes\"></a>P1217 [USACO1.5]回文质数 Prime Palindromes</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>因为 151 既是一个质数又是一个回文数（从左到右和从右到左是看一样的），所以 151 是回文质数。</p>\n<p>写一个程序来找出范围 [a,b](5≤a&lt;b≤100,000,000)( 一亿)间的所有回文质数。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第 1 行: 二个整数 <code>a</code>和 <code>b</code> .</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出一个回文质数的列表，一行一个。</p>\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 500</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">131</span></span><br><span class=\"line\"><span class=\"number\">151</span></span><br><span class=\"line\"><span class=\"number\">181</span></span><br><span class=\"line\"><span class=\"number\">191</span></span><br><span class=\"line\"><span class=\"number\">313</span></span><br><span class=\"line\"><span class=\"number\">353</span></span><br><span class=\"line\"><span class=\"number\">373</span></span><br><span class=\"line\"><span class=\"number\">383</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h2><p>Hint 1: Generate the palindromes and see if they are prime.</p>\n<p>提示 1: 找出所有的回文数再判断它们是不是质数（素数）.</p>\n<p>Hint 2: Generate palindromes by combining digits properly. You might need more than one of the loops like below.</p>\n<p>提示 2: 要产生正确的回文数，你可能需要几个像下面这样的循环。</p>\n<p>题目翻译来自NOCOW。</p>\n<p>USACO Training Section 1.5</p>\n<p>产生长度为5的回文数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 for (d1 &#x3D; 1; d1 &lt;&#x3D; 9; d1+&#x3D;2) &#123;    &#x2F;&#x2F; 只有奇数才会是素数</span><br><span class=\"line\">2      for (d2 &#x3D; 0; d2 &lt;&#x3D; 9; d2++) &#123;</span><br><span class=\"line\">3          for (d3 &#x3D; 0; d3 &lt;&#x3D; 9; d3++) &#123;</span><br><span class=\"line\">4            palindrome &#x3D; 10000*d1 + 1000*d2 +100*d3 + 10*d2 + d1;&#x2F;&#x2F;(处理回文数...)</span><br><span class=\"line\">5          &#125;</span><br><span class=\"line\">6      &#125;</span><br><span class=\"line\">7  &#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>首先，我看了题下面的提示，就想按照提示的方法解这道题。因为右边界的取值范围最大到100000000，所以我考虑到位数可以有以下几种情况：1,3,5,7,9.分类讨论分别写循环就可以列举出这里所有回文数了。</strong></p>\n<p><strong>然后因为题目要的是回文质数，所以再加上一个质数的判断函数，是质数就输出就可以了：</strong></p>\n<p><strong>按照提示，列举回文数的方法是这样的：</strong></p>\n<p><strong>比如说我们需要列举所有九位的回文数，我们需要循环5个数：a,b,c,d,e，把这五个数从0`9进行循环，我们的回文数是这样的：</strong></p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/common/1924270/202002/1924270-20200206094520257-1296305125.png\" alt=\"\" />\n\n<p><strong>那就以此类推，写出其他位数的情况：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> l,r,num,abc=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\"><span class=\"keyword\">int</span> res[<span class=\"number\">10000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>; a &lt;= <span class=\"number\">9</span>; a += <span class=\"number\">2</span>)<span class=\"comment\">//一位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        num =a;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[abc] = num;</span><br><span class=\"line\">            abc++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//三位</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">1</span>; b &lt;= <span class=\"number\">9</span>; b += <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num =b * <span class=\"number\">100</span> + a * <span class=\"number\">10</span> + b;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[abc] = num;</span><br><span class=\"line\">                abc++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//五位</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">1</span>; c &lt;= <span class=\"number\">9</span>; c += <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num = c * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> + a * <span class=\"number\">100</span> + b * <span class=\"number\">10</span> + c;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    res[abc] = num;</span><br><span class=\"line\">                    abc++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//七位</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d+=<span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                    num =   d * <span class=\"number\">1000000</span> + c * <span class=\"number\">100000</span> + b * <span class=\"number\">10000</span> + a * <span class=\"number\">1000</span> + b * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d ;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//九位</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">0</span>; d &lt;= <span class=\"number\">9</span>; d++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = <span class=\"number\">1</span>; e &lt;= <span class=\"number\">9</span>; e+=<span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = e * <span class=\"number\">100000000</span> + d * <span class=\"number\">10000000</span> + c * <span class=\"number\">1000000</span> + b * <span class=\"number\">100000</span> + a * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> + c * <span class=\"number\">100</span> + d * <span class=\"number\">10</span> + e;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>质数判断函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isp</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">floor</span>(<span class=\"built_in\">sqrt</span>(a));i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//能被整除说明不是质数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样子储存在数组中的数据顺序有些乱，因为我是按照它中间那一位数的顺序循环的。所以需要排一下序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort(res, res + abc);</span><br></pre></td></tr></table></figure>\n\n<p>然后就珂以输出了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> z = <span class=\"number\">0</span>; z &lt;= abc<span class=\"number\">-1</span>; z++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; res[z] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后提交上去一看：</p>\n<p>WA，WA，WA</p>\n<p>仔细研究程序发现：</p>\n<p>回文数不止有奇数位的，还有偶数位的！！！（真是一个惊天动地的珂学大发现呢！）</p>\n<p>赶紧加上：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)<span class=\"comment\">//六位</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">100000</span> + c * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> +b * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)<span class=\"comment\">//四位</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">1000</span> + c * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)<span class=\"comment\">//两位</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">10</span> +d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure>\n\n<p>大功告成！</p>\n<p>附上全部的程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isp</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">floor</span>(<span class=\"built_in\">sqrt</span>(a));i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l,r,num,abc=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res[<span class=\"number\">10000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>; a &lt;= <span class=\"number\">9</span>; a += <span class=\"number\">2</span>)<span class=\"comment\">//一位</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num =a;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[abc] = num;</span><br><span class=\"line\">                abc++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//三位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">1</span>; b &lt;= <span class=\"number\">9</span>; b += <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num =b * <span class=\"number\">100</span> + a * <span class=\"number\">10</span> + b;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    res[abc] = num;</span><br><span class=\"line\">                    abc++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//五位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">1</span>; c &lt;= <span class=\"number\">9</span>; c += <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = c * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> + a * <span class=\"number\">100</span> + b * <span class=\"number\">10</span> + c;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//七位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d+=<span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        num =   d * <span class=\"number\">1000000</span> + c * <span class=\"number\">100000</span> + b * <span class=\"number\">10000</span> + a * <span class=\"number\">1000</span> + b * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d ;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            res[abc] = num;</span><br><span class=\"line\">                            abc++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//九位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">0</span>; d &lt;= <span class=\"number\">9</span>; d++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = <span class=\"number\">1</span>; e &lt;= <span class=\"number\">9</span>; e+=<span class=\"number\">2</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        num = e * <span class=\"number\">100000000</span> + d * <span class=\"number\">10000000</span> + c * <span class=\"number\">1000000</span> + b * <span class=\"number\">100000</span> + a * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> + c * <span class=\"number\">100</span> + d * <span class=\"number\">10</span> + e;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            res[abc] = num;</span><br><span class=\"line\">                            abc++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)<span class=\"comment\">//六位</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">100000</span> + c * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> +b * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)<span class=\"comment\">//四位</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">1000</span> + c * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)<span class=\"comment\">//两位</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">10</span> +d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">    sort(res, res + abc);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> z = <span class=\"number\">0</span>; z &lt;= abc<span class=\"number\">-1</span>; z++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; res[z] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有一个方法。我们其实可以先列举出所有5~100000000的整数，然后分别判断是不是回文数，是不是质数，是不是在区间内。因为会超时，所以还是别试了78.42秒</p>\n<p>程序：（其实可以直接用++来列举，我这样进行嵌套是为了能一眼看出效率有多么低）（5 100000000时）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isp</span><span class=\"params\">(<span class=\"keyword\">int</span> pr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">floor</span>(<span class=\"built_in\">sqrt</span>(pr)); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pr % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ishui</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x % <span class=\"number\">10</span> == <span class=\"number\">0</span> || x &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x &gt; s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s = s * <span class=\"number\">10</span> + x % <span class=\"number\">10</span>;</span><br><span class=\"line\">        x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == s || s / <span class=\"number\">10</span> == x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">5</span>, r=<span class=\"number\">100000000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">0</span>; d &lt;= <span class=\"number\">9</span>; d++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = <span class=\"number\">0</span>; e &lt;= <span class=\"number\">9</span>; e++)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> f = <span class=\"number\">0</span>; f &lt;= <span class=\"number\">9</span>; f++)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> g = <span class=\"number\">0</span>; g &lt;= <span class=\"number\">9</span>; g++)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; h &lt;= <span class=\"number\">9</span>; h++)</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">                                    &#123;</span><br><span class=\"line\">                                        s = a * <span class=\"number\">100000000</span> + b * <span class=\"number\">10000000</span> + c * <span class=\"number\">1000000</span> + d * <span class=\"number\">100000</span> + e * <span class=\"number\">10000</span> + f * <span class=\"number\">1000</span> + g * <span class=\"number\">100</span> + h * <span class=\"number\">10</span> + i;</span><br><span class=\"line\">                                        <span class=\"keyword\">if</span> (isp(s) &amp;&amp; ishui(s) &amp;&amp; s &gt;= l &amp;&amp; s &lt;= r)</span><br><span class=\"line\">                                        &#123;</span><br><span class=\"line\">                                            <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"P1217-USACO1-5-回文质数-Prime-Palindromes\"><a href=\"#P1217-USACO1-5-回文质数-Prime-Palindromes\" class=\"headerlink\" title=\"P1217 [USACO1.5]回文质数 Prime Palindromes\"></a>P1217 [USACO1.5]回文质数 Prime Palindromes</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>因为 151 既是一个质数又是一个回文数（从左到右和从右到左是看一样的），所以 151 是回文质数。</p>\n<p>写一个程序来找出范围 [a,b](5≤a&lt;b≤100,000,000)( 一亿)间的所有回文质数。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第 1 行: 二个整数 <code>a</code>和 <code>b</code> .</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出一个回文质数的列表，一行一个。</p>\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 500</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">131</span></span><br><span class=\"line\"><span class=\"number\">151</span></span><br><span class=\"line\"><span class=\"number\">181</span></span><br><span class=\"line\"><span class=\"number\">191</span></span><br><span class=\"line\"><span class=\"number\">313</span></span><br><span class=\"line\"><span class=\"number\">353</span></span><br><span class=\"line\"><span class=\"number\">373</span></span><br><span class=\"line\"><span class=\"number\">383</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h2><p>Hint 1: Generate the palindromes and see if they are prime.</p>\n<p>提示 1: 找出所有的回文数再判断它们是不是质数（素数）.</p>\n<p>Hint 2: Generate palindromes by combining digits properly. You might need more than one of the loops like below.</p>\n<p>提示 2: 要产生正确的回文数，你可能需要几个像下面这样的循环。</p>\n<p>题目翻译来自NOCOW。</p>\n<p>USACO Training Section 1.5</p>\n<p>产生长度为5的回文数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 for (d1 &#x3D; 1; d1 &lt;&#x3D; 9; d1+&#x3D;2) &#123;    &#x2F;&#x2F; 只有奇数才会是素数</span><br><span class=\"line\">2      for (d2 &#x3D; 0; d2 &lt;&#x3D; 9; d2++) &#123;</span><br><span class=\"line\">3          for (d3 &#x3D; 0; d3 &lt;&#x3D; 9; d3++) &#123;</span><br><span class=\"line\">4            palindrome &#x3D; 10000*d1 + 1000*d2 +100*d3 + 10*d2 + d1;&#x2F;&#x2F;(处理回文数...)</span><br><span class=\"line\">5          &#125;</span><br><span class=\"line\">6      &#125;</span><br><span class=\"line\">7  &#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>首先，我看了题下面的提示，就想按照提示的方法解这道题。因为右边界的取值范围最大到100000000，所以我考虑到位数可以有以下几种情况：1,3,5,7,9.分类讨论分别写循环就可以列举出这里所有回文数了。</strong></p>\n<p><strong>然后因为题目要的是回文质数，所以再加上一个质数的判断函数，是质数就输出就可以了：</strong></p>\n<p><strong>按照提示，列举回文数的方法是这样的：</strong></p>\n<p><strong>比如说我们需要列举所有九位的回文数，我们需要循环5个数：a,b,c,d,e，把这五个数从0`9进行循环，我们的回文数是这样的：</strong></p>\n<img src=\"https://img2018.cnblogs.com/common/1924270/202002/1924270-20200206094520257-1296305125.png\" alt=\"\" />\n\n<p><strong>那就以此类推，写出其他位数的情况：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> l,r,num,abc=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\"><span class=\"keyword\">int</span> res[<span class=\"number\">10000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>; a &lt;= <span class=\"number\">9</span>; a += <span class=\"number\">2</span>)<span class=\"comment\">//一位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        num =a;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[abc] = num;</span><br><span class=\"line\">            abc++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//三位</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">1</span>; b &lt;= <span class=\"number\">9</span>; b += <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num =b * <span class=\"number\">100</span> + a * <span class=\"number\">10</span> + b;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[abc] = num;</span><br><span class=\"line\">                abc++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//五位</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">1</span>; c &lt;= <span class=\"number\">9</span>; c += <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num = c * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> + a * <span class=\"number\">100</span> + b * <span class=\"number\">10</span> + c;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    res[abc] = num;</span><br><span class=\"line\">                    abc++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//七位</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d+=<span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                    num =   d * <span class=\"number\">1000000</span> + c * <span class=\"number\">100000</span> + b * <span class=\"number\">10000</span> + a * <span class=\"number\">1000</span> + b * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d ;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//九位</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">0</span>; d &lt;= <span class=\"number\">9</span>; d++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = <span class=\"number\">1</span>; e &lt;= <span class=\"number\">9</span>; e+=<span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = e * <span class=\"number\">100000000</span> + d * <span class=\"number\">10000000</span> + c * <span class=\"number\">1000000</span> + b * <span class=\"number\">100000</span> + a * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> + c * <span class=\"number\">100</span> + d * <span class=\"number\">10</span> + e;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>质数判断函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isp</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">floor</span>(<span class=\"built_in\">sqrt</span>(a));i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//能被整除说明不是质数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样子储存在数组中的数据顺序有些乱，因为我是按照它中间那一位数的顺序循环的。所以需要排一下序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort(res, res + abc);</span><br></pre></td></tr></table></figure>\n\n<p>然后就珂以输出了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> z = <span class=\"number\">0</span>; z &lt;= abc<span class=\"number\">-1</span>; z++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; res[z] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后提交上去一看：</p>\n<p>WA，WA，WA</p>\n<p>仔细研究程序发现：</p>\n<p>回文数不止有奇数位的，还有偶数位的！！！（真是一个惊天动地的珂学大发现呢！）</p>\n<p>赶紧加上：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)<span class=\"comment\">//六位</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">100000</span> + c * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> +b * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)<span class=\"comment\">//四位</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">1000</span> + c * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)<span class=\"comment\">//两位</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">10</span> +d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure>\n\n<p>大功告成！</p>\n<p>附上全部的程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isp</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">floor</span>(<span class=\"built_in\">sqrt</span>(a));i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l,r,num,abc=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res[<span class=\"number\">10000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>; a &lt;= <span class=\"number\">9</span>; a += <span class=\"number\">2</span>)<span class=\"comment\">//一位</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num =a;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[abc] = num;</span><br><span class=\"line\">                abc++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//三位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">1</span>; b &lt;= <span class=\"number\">9</span>; b += <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num =b * <span class=\"number\">100</span> + a * <span class=\"number\">10</span> + b;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    res[abc] = num;</span><br><span class=\"line\">                    abc++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//五位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">1</span>; c &lt;= <span class=\"number\">9</span>; c += <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = c * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> + a * <span class=\"number\">100</span> + b * <span class=\"number\">10</span> + c;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//七位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d+=<span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        num =   d * <span class=\"number\">1000000</span> + c * <span class=\"number\">100000</span> + b * <span class=\"number\">10000</span> + a * <span class=\"number\">1000</span> + b * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d ;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            res[abc] = num;</span><br><span class=\"line\">                            abc++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)<span class=\"comment\">//九位</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">0</span>; d &lt;= <span class=\"number\">9</span>; d++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = <span class=\"number\">1</span>; e &lt;= <span class=\"number\">9</span>; e+=<span class=\"number\">2</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        num = e * <span class=\"number\">100000000</span> + d * <span class=\"number\">10000000</span> + c * <span class=\"number\">1000000</span> + b * <span class=\"number\">100000</span> + a * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> + c * <span class=\"number\">100</span> + d * <span class=\"number\">10</span> + e;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            res[abc] = num;</span><br><span class=\"line\">                            abc++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)<span class=\"comment\">//六位</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">100000</span> + c * <span class=\"number\">10000</span> + b * <span class=\"number\">1000</span> +b * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)<span class=\"comment\">//四位</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">1000</span> + c * <span class=\"number\">100</span> + c * <span class=\"number\">10</span> + d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">9</span>; d += <span class=\"number\">2</span>)<span class=\"comment\">//两位</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = d * <span class=\"number\">10</span> +d;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        res[abc] = num;</span><br><span class=\"line\">                        abc++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">    sort(res, res + abc);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> z = <span class=\"number\">0</span>; z &lt;= abc<span class=\"number\">-1</span>; z++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; res[z] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有一个方法。我们其实可以先列举出所有5~100000000的整数，然后分别判断是不是回文数，是不是质数，是不是在区间内。因为会超时，所以还是别试了78.42秒</p>\n<p>程序：（其实可以直接用++来列举，我这样进行嵌套是为了能一眼看出效率有多么低）（5 100000000时）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isp</span><span class=\"params\">(<span class=\"keyword\">int</span> pr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">floor</span>(<span class=\"built_in\">sqrt</span>(pr)); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pr % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ishui</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x % <span class=\"number\">10</span> == <span class=\"number\">0</span> || x &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x &gt; s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s = s * <span class=\"number\">10</span> + x % <span class=\"number\">10</span>;</span><br><span class=\"line\">        x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == s || s / <span class=\"number\">10</span> == x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">5</span>, r=<span class=\"number\">100000000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">9</span>; a++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">9</span>; b++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; c++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">0</span>; d &lt;= <span class=\"number\">9</span>; d++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = <span class=\"number\">0</span>; e &lt;= <span class=\"number\">9</span>; e++)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> f = <span class=\"number\">0</span>; f &lt;= <span class=\"number\">9</span>; f++)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> g = <span class=\"number\">0</span>; g &lt;= <span class=\"number\">9</span>; g++)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; h &lt;= <span class=\"number\">9</span>; h++)</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">                                    &#123;</span><br><span class=\"line\">                                        s = a * <span class=\"number\">100000000</span> + b * <span class=\"number\">10000000</span> + c * <span class=\"number\">1000000</span> + d * <span class=\"number\">100000</span> + e * <span class=\"number\">10000</span> + f * <span class=\"number\">1000</span> + g * <span class=\"number\">100</span> + h * <span class=\"number\">10</span> + i;</span><br><span class=\"line\">                                        <span class=\"keyword\">if</span> (isp(s) &amp;&amp; ishui(s) &amp;&amp; s &gt;= l &amp;&amp; s &lt;= r)</span><br><span class=\"line\">                                        &#123;</span><br><span class=\"line\">                                            <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"清北学堂笔记","date":"2021-02-08T06:31:45.000Z","_content":"\n## 无向图连通分量\n### 边双连通分量\n - 定义：一个极大子图，去掉任意一条边，变成不连通分量\n - 缩点：树\n一条边只能属于一个边双连通分量\n### 点双连通分量\n - 定义：一个极大子图，去掉任意一个点，变成不连通分量\n缩点：\n\n（区别）一个点可以属于多个点双连通分量\n\n## 手动开栈模拟DFS\n```c++\n#include <stdlib.h>\n#include <stdio.h>\n\n#define N 4 //定义图中点个数\n\nint a[N][N] = {{-1,1,1,-1},{1,-1,-1,1},{1,-1,-1,1},{-1,1,1,-1}}; //邻接矩阵，-1无边\nint label[N] = {0}; //标记数组，0未标记\n\n//定义栈及其方法\nstruct Stack\n{\n    int a[4]; //存入栈元素\n    int top; //栈顶指针\n};\n\nvoid addStack(Stack *s, int data) //入栈\n{\n    s->top++;\n    s->a[s->top] = data;\n}\n\nint delStack(Stack *s) //出栈\n{\n    return s->a[s->top--];\n}\n\nint getTop(Stack *s) //得到栈顶元素\n{\n    return s->a[s->top];\n}\n\n//使用栈的非递归DFS\nvoid dfs(int start)\n{\n    Stack *s = (Stack *)malloc(sizeof(Stack));\n    s->top = -1;\n    printf(\"%d \", start);\n    label[start] = 1;\n    addStack(s, start);\n    while(s->top != -1)\n    {\n        int tmp = getTop(s);\n        int i;\n        for(i=0; i<4; i++)\n        {\n            if(a[tmp][i] == 1 && label[i] == 0)\n            {\n                printf(\"%d \", i);\n                label[i] = 1;\n                addStack(s, i);\n                break; //此处必须有break，否则构不成DFS\n            }\n        }\n        if(i == 4)\n            delStack(s);\n    }\n    free(s);\n}\n\nint main()\n{\n    dfs(0);\n    return 0;\n}\n```\n\n","source":"_posts/清北学堂笔记.md","raw":"---\ntitle: 清北学堂笔记\ndate: 2021-02-08 14:31:45\ntags:\n---\n\n## 无向图连通分量\n### 边双连通分量\n - 定义：一个极大子图，去掉任意一条边，变成不连通分量\n - 缩点：树\n一条边只能属于一个边双连通分量\n### 点双连通分量\n - 定义：一个极大子图，去掉任意一个点，变成不连通分量\n缩点：\n\n（区别）一个点可以属于多个点双连通分量\n\n## 手动开栈模拟DFS\n```c++\n#include <stdlib.h>\n#include <stdio.h>\n\n#define N 4 //定义图中点个数\n\nint a[N][N] = {{-1,1,1,-1},{1,-1,-1,1},{1,-1,-1,1},{-1,1,1,-1}}; //邻接矩阵，-1无边\nint label[N] = {0}; //标记数组，0未标记\n\n//定义栈及其方法\nstruct Stack\n{\n    int a[4]; //存入栈元素\n    int top; //栈顶指针\n};\n\nvoid addStack(Stack *s, int data) //入栈\n{\n    s->top++;\n    s->a[s->top] = data;\n}\n\nint delStack(Stack *s) //出栈\n{\n    return s->a[s->top--];\n}\n\nint getTop(Stack *s) //得到栈顶元素\n{\n    return s->a[s->top];\n}\n\n//使用栈的非递归DFS\nvoid dfs(int start)\n{\n    Stack *s = (Stack *)malloc(sizeof(Stack));\n    s->top = -1;\n    printf(\"%d \", start);\n    label[start] = 1;\n    addStack(s, start);\n    while(s->top != -1)\n    {\n        int tmp = getTop(s);\n        int i;\n        for(i=0; i<4; i++)\n        {\n            if(a[tmp][i] == 1 && label[i] == 0)\n            {\n                printf(\"%d \", i);\n                label[i] = 1;\n                addStack(s, i);\n                break; //此处必须有break，否则构不成DFS\n            }\n        }\n        if(i == 4)\n            delStack(s);\n    }\n    free(s);\n}\n\nint main()\n{\n    dfs(0);\n    return 0;\n}\n```\n\n","slug":"清北学堂笔记","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2n7001ypb0y7r47du0s","content":"<h2 id=\"无向图连通分量\"><a href=\"#无向图连通分量\" class=\"headerlink\" title=\"无向图连通分量\"></a>无向图连通分量</h2><h3 id=\"边双连通分量\"><a href=\"#边双连通分量\" class=\"headerlink\" title=\"边双连通分量\"></a>边双连通分量</h3><ul>\n<li>定义：一个极大子图，去掉任意一条边，变成不连通分量</li>\n<li>缩点：树<br>一条边只能属于一个边双连通分量<h3 id=\"点双连通分量\"><a href=\"#点双连通分量\" class=\"headerlink\" title=\"点双连通分量\"></a>点双连通分量</h3></li>\n<li>定义：一个极大子图，去掉任意一个点，变成不连通分量<br>缩点：</li>\n</ul>\n<p>（区别）一个点可以属于多个点双连通分量</p>\n<h2 id=\"手动开栈模拟DFS\"><a href=\"#手动开栈模拟DFS\" class=\"headerlink\" title=\"手动开栈模拟DFS\"></a>手动开栈模拟DFS</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 4 <span class=\"comment\">//定义图中点个数</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N][N] = &#123;&#123;<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;&#125;; <span class=\"comment\">//邻接矩阵，-1无边</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> label[N] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">//标记数组，0未标记</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义栈及其方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">4</span>]; <span class=\"comment\">//存入栈元素</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> top; <span class=\"comment\">//栈顶指针</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addStack</span><span class=\"params\">(Stack *s, <span class=\"keyword\">int</span> data)</span> <span class=\"comment\">//入栈</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    s-&gt;top++;</span><br><span class=\"line\">    s-&gt;a[s-&gt;top] = data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">delStack</span><span class=\"params\">(Stack *s)</span> <span class=\"comment\">//出栈</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s-&gt;a[s-&gt;top--];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getTop</span><span class=\"params\">(Stack *s)</span> <span class=\"comment\">//得到栈顶元素</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s-&gt;a[s-&gt;top];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用栈的非递归DFS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> start)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Stack *s = (Stack *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Stack));</span><br><span class=\"line\">    s-&gt;top = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, start);</span><br><span class=\"line\">    label[start] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    addStack(s, start);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s-&gt;top != <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = getTop(s);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[tmp][i] == <span class=\"number\">1</span> &amp;&amp; label[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, i);</span><br><span class=\"line\">                label[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                addStack(s, i);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//此处必须有break，否则构不成DFS</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">4</span>)</span><br><span class=\"line\">            delStack(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfs(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"https://acg.xydwz.cn/api/api.php","excerpt":"","more":"<h2 id=\"无向图连通分量\"><a href=\"#无向图连通分量\" class=\"headerlink\" title=\"无向图连通分量\"></a>无向图连通分量</h2><h3 id=\"边双连通分量\"><a href=\"#边双连通分量\" class=\"headerlink\" title=\"边双连通分量\"></a>边双连通分量</h3><ul>\n<li>定义：一个极大子图，去掉任意一条边，变成不连通分量</li>\n<li>缩点：树<br>一条边只能属于一个边双连通分量<h3 id=\"点双连通分量\"><a href=\"#点双连通分量\" class=\"headerlink\" title=\"点双连通分量\"></a>点双连通分量</h3></li>\n<li>定义：一个极大子图，去掉任意一个点，变成不连通分量<br>缩点：</li>\n</ul>\n<p>（区别）一个点可以属于多个点双连通分量</p>\n<h2 id=\"手动开栈模拟DFS\"><a href=\"#手动开栈模拟DFS\" class=\"headerlink\" title=\"手动开栈模拟DFS\"></a>手动开栈模拟DFS</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 4 <span class=\"comment\">//定义图中点个数</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N][N] = &#123;&#123;<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;&#125;; <span class=\"comment\">//邻接矩阵，-1无边</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> label[N] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">//标记数组，0未标记</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义栈及其方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">4</span>]; <span class=\"comment\">//存入栈元素</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> top; <span class=\"comment\">//栈顶指针</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addStack</span><span class=\"params\">(Stack *s, <span class=\"keyword\">int</span> data)</span> <span class=\"comment\">//入栈</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    s-&gt;top++;</span><br><span class=\"line\">    s-&gt;a[s-&gt;top] = data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">delStack</span><span class=\"params\">(Stack *s)</span> <span class=\"comment\">//出栈</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s-&gt;a[s-&gt;top--];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getTop</span><span class=\"params\">(Stack *s)</span> <span class=\"comment\">//得到栈顶元素</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s-&gt;a[s-&gt;top];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用栈的非递归DFS</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> start)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Stack *s = (Stack *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Stack));</span><br><span class=\"line\">    s-&gt;top = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, start);</span><br><span class=\"line\">    label[start] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    addStack(s, start);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s-&gt;top != <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = getTop(s);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[tmp][i] == <span class=\"number\">1</span> &amp;&amp; label[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, i);</span><br><span class=\"line\">                label[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                addStack(s, i);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//此处必须有break，否则构不成DFS</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">4</span>)</span><br><span class=\"line\">            delStack(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfs(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"洛谷P6492 COCI 2010-2011 #6 STEP","date":"2020-07-04T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://tvax2.sinaimg.cn/large/006ZFECEgy1fr1x6gam4tj31hc0u04mn.jpg","description":"洛谷 P6492 COCI 2010-2011 #6 STEP 题解。","_content":"# 题目\n\n## 题目描述\n\n给定一个长度为 `n` 的字符序列 `a`，初始时序列中全部都是字符 `L`。\n\n有 `q` 次修改，每次给定一个 `x`，若$$ a_{x}$$ 为 `L`，则将 $$a_{x}$$​ 修改成 `R`，否则将 $$a_{x}$$​ 修改成 `L`。\n\n对于一个只含字符 `L`，`R` 的字符串 ss，若其中不存在连续的 `L` 和 `R`，则称 `s` 满足要求。\n\n每次修改后，请输出当前序列 `a` 中最长的满足要求的连续子串的长度。\n\n## 输入格式\n\n第一行有两个整数，分别表示序列的长度 `n` 和修改操作的次数` q`。\n\n接下来 `q` 行，每行一个整数，表示本次修改的位置` x`。\n\n## 输出格式\n\n对于每次修改操作，输出一行一个整数表示修改 `a` 中最长的满足要求的子串的长度。\n\n## 输入输出样例\n\n```cpp\n6 2\n2\n4\n```\n\n```cpp\n3\n5\n```\n\n```cpp\n6 5\n4\n1\n1\n2\n6\n```\n\n```cpp\n3\n3\n3\n5\n6\n```\n\n## 说明/提示\n\n#### 数据规模与约定\n\n对于全部的测试点，保证 1≤n,q≤2×105，1 ≤ x ≤ n。\n\n#### 说明\n\n题目译自 [COCI2010-2011](https://hsin.hr/coci/archive/2010_2011/) [CONTEST #6](https://hsin.hr/coci/archive/2010_2011/contest6_tasks.pdf) **T5 STEP**，翻译来自 @[一扶苏一](https://www.luogu.com.cn/user/65363)。\n\n# 思考\n\n这个题其实和区间和区别并不大，只是把求和的push_up操作改为求最长的连续符合条件的串即可。\n\n分左，中，右三部分考虑。\n\n# 代码\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n    long long x = 0;\n    int f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch > '9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nvoid write(const int& x)\n{\n    if (!x)\n    {\n        putchar('0');\n        return;\n    }\n    char f[100];\n    int tmp = x;\n    if (tmp < 0)\n    {\n        tmp = -tmp;\n        putchar('-');\n    }\n    int s = 0;\n    while (tmp > 0)\n    {\n        f[s++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while (s > 0)\n    {\n        putchar(f[--s]);\n    }\n}\n\nconst int MAXN = 1000090;\n\nbool nums[MAXN];\nlong long totN;\nlong long totDO;\n\nstruct Node\n{\n    long long lvalue;\n    long long rvalue;\n    long long midvalue;\n    long long l, r;\n    Node* lch, * rch;\n    inline void push_up()\n    {\n        lvalue=lch->lvalue;\n        rvalue=rch->rvalue;\n        if (nums[lch->r]!=nums[rch->l])\n        {\n            if (lch->lvalue==(lch->r-lch->l+1))\n            {\n                lvalue+=rch->lvalue;\n            }\n            if (rch->rvalue==(rch->r-rch->l+1))\n            {\n                rvalue+=lch->rvalue;\n            }\n        }\n        midvalue=max(nums[lch->r]!=nums[rch->l]?lch->rvalue+rch->lvalue:0,max(lch->midvalue,rch->midvalue));\n    }\n    Node(const long long L, const long long R)\n    {\n        l = L;\n        r = R;\n        if (l==r)\n        {\n            lch = NULL;\n            rch = NULL;\n            lvalue=rvalue=midvalue=1;\n        }\n        else\n        {\n            long long mid = (l + r) >> 1;\n            lch = new Node(L, mid);\n            rch = new Node(mid + 1, R);\n            push_up();\n        }\n    }\n    inline void update(const long long w)\n    {\n        if (l==r)\n        {\n            return;\n        }\n        if (lch->r>=w)\n        {\n            lch->update(w);\n        } else\n        {\n            rch->update(w);\n        }\n        push_up();\n    }\n};\n\nint main()\n{\n    totN=read();\n    totDO=read();\n    Node *root=new Node(1,totN);\n    for (int i = 1; i <= totDO; ++i)\n    {\n        auto tempX=read();\n        nums[tempX]^=1;\n        root->update(tempX);\n        write(root->midvalue);\n        putchar('\\n');\n    }\n    return 0;\n}//LikiBlaze Code\n```\n\n","source":"_posts/洛谷P6492COCI2010-20116STEP.md","raw":"---\ntitle: \"洛谷P6492 COCI 2010-2011 #6 STEP\"\ndate: 2020-07-05\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://tvax2.sinaimg.cn/large/006ZFECEgy1fr1x6gam4tj31hc0u04mn.jpg\ntags: \n    - 洛谷\n    - 线段树\ndescription: \"洛谷 P6492 COCI 2010-2011 #6 STEP 题解。\"\n---\n# 题目\n\n## 题目描述\n\n给定一个长度为 `n` 的字符序列 `a`，初始时序列中全部都是字符 `L`。\n\n有 `q` 次修改，每次给定一个 `x`，若$$ a_{x}$$ 为 `L`，则将 $$a_{x}$$​ 修改成 `R`，否则将 $$a_{x}$$​ 修改成 `L`。\n\n对于一个只含字符 `L`，`R` 的字符串 ss，若其中不存在连续的 `L` 和 `R`，则称 `s` 满足要求。\n\n每次修改后，请输出当前序列 `a` 中最长的满足要求的连续子串的长度。\n\n## 输入格式\n\n第一行有两个整数，分别表示序列的长度 `n` 和修改操作的次数` q`。\n\n接下来 `q` 行，每行一个整数，表示本次修改的位置` x`。\n\n## 输出格式\n\n对于每次修改操作，输出一行一个整数表示修改 `a` 中最长的满足要求的子串的长度。\n\n## 输入输出样例\n\n```cpp\n6 2\n2\n4\n```\n\n```cpp\n3\n5\n```\n\n```cpp\n6 5\n4\n1\n1\n2\n6\n```\n\n```cpp\n3\n3\n3\n5\n6\n```\n\n## 说明/提示\n\n#### 数据规模与约定\n\n对于全部的测试点，保证 1≤n,q≤2×105，1 ≤ x ≤ n。\n\n#### 说明\n\n题目译自 [COCI2010-2011](https://hsin.hr/coci/archive/2010_2011/) [CONTEST #6](https://hsin.hr/coci/archive/2010_2011/contest6_tasks.pdf) **T5 STEP**，翻译来自 @[一扶苏一](https://www.luogu.com.cn/user/65363)。\n\n# 思考\n\n这个题其实和区间和区别并不大，只是把求和的push_up操作改为求最长的连续符合条件的串即可。\n\n分左，中，右三部分考虑。\n\n# 代码\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline long long read()\n{\n    long long x = 0;\n    int f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch > '9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nvoid write(const int& x)\n{\n    if (!x)\n    {\n        putchar('0');\n        return;\n    }\n    char f[100];\n    int tmp = x;\n    if (tmp < 0)\n    {\n        tmp = -tmp;\n        putchar('-');\n    }\n    int s = 0;\n    while (tmp > 0)\n    {\n        f[s++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while (s > 0)\n    {\n        putchar(f[--s]);\n    }\n}\n\nconst int MAXN = 1000090;\n\nbool nums[MAXN];\nlong long totN;\nlong long totDO;\n\nstruct Node\n{\n    long long lvalue;\n    long long rvalue;\n    long long midvalue;\n    long long l, r;\n    Node* lch, * rch;\n    inline void push_up()\n    {\n        lvalue=lch->lvalue;\n        rvalue=rch->rvalue;\n        if (nums[lch->r]!=nums[rch->l])\n        {\n            if (lch->lvalue==(lch->r-lch->l+1))\n            {\n                lvalue+=rch->lvalue;\n            }\n            if (rch->rvalue==(rch->r-rch->l+1))\n            {\n                rvalue+=lch->rvalue;\n            }\n        }\n        midvalue=max(nums[lch->r]!=nums[rch->l]?lch->rvalue+rch->lvalue:0,max(lch->midvalue,rch->midvalue));\n    }\n    Node(const long long L, const long long R)\n    {\n        l = L;\n        r = R;\n        if (l==r)\n        {\n            lch = NULL;\n            rch = NULL;\n            lvalue=rvalue=midvalue=1;\n        }\n        else\n        {\n            long long mid = (l + r) >> 1;\n            lch = new Node(L, mid);\n            rch = new Node(mid + 1, R);\n            push_up();\n        }\n    }\n    inline void update(const long long w)\n    {\n        if (l==r)\n        {\n            return;\n        }\n        if (lch->r>=w)\n        {\n            lch->update(w);\n        } else\n        {\n            rch->update(w);\n        }\n        push_up();\n    }\n};\n\nint main()\n{\n    totN=read();\n    totDO=read();\n    Node *root=new Node(1,totN);\n    for (int i = 1; i <= totDO; ++i)\n    {\n        auto tempX=read();\n        nums[tempX]^=1;\n        root->update(tempX);\n        write(root->midvalue);\n        putchar('\\n');\n    }\n    return 0;\n}//LikiBlaze Code\n```\n\n","slug":"洛谷P6492COCI2010-20116STEP","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2n80021pb0ybkup8has","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个长度为 <code>n</code> 的字符序列 <code>a</code>，初始时序列中全部都是字符 <code>L</code>。</p>\n<p>有 <code>q</code> 次修改，每次给定一个 <code>x</code>，若$$ a_{x}$$ 为 <code>L</code>，则将 $$a_{x}$$​ 修改成 <code>R</code>，否则将 $$a_{x}$$​ 修改成 <code>L</code>。</p>\n<p>对于一个只含字符 <code>L</code>，<code>R</code> 的字符串 ss，若其中不存在连续的 <code>L</code> 和 <code>R</code>，则称 <code>s</code> 满足要求。</p>\n<p>每次修改后，请输出当前序列 <code>a</code> 中最长的满足要求的连续子串的长度。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行有两个整数，分别表示序列的长度 <code>n</code> 和修改操作的次数<code>q</code>。</p>\n<p>接下来 <code>q</code> 行，每行一个整数，表示本次修改的位置<code>x</code>。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>对于每次修改操作，输出一行一个整数表示修改 <code>a</code> 中最长的满足要求的子串的长度。</p>\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h2><h4 id=\"数据规模与约定\"><a href=\"#数据规模与约定\" class=\"headerlink\" title=\"数据规模与约定\"></a>数据规模与约定</h4><p>对于全部的测试点，保证 1≤n,q≤2×105，1 ≤ x ≤ n。</p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>题目译自 <a href=\"https://hsin.hr/coci/archive/2010_2011/\">COCI2010-2011</a> <a href=\"https://hsin.hr/coci/archive/2010_2011/contest6_tasks.pdf\">CONTEST #6</a> <strong>T5 STEP</strong>，翻译来自 @<a href=\"https://www.luogu.com.cn/user/65363\">一扶苏一</a>。</p>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>这个题其实和区间和区别并不大，只是把求和的push_up操作改为求最长的连续符合条件的串即可。</p>\n<p>分左，中，右三部分考虑。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = -tmp;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1000090</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> nums[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totN;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totDO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> lvalue;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> rvalue;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> midvalue;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> l, r;</span><br><span class=\"line\">    Node* lch, * rch;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">push_up</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        lvalue=lch-&gt;lvalue;</span><br><span class=\"line\">        rvalue=rch-&gt;rvalue;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[lch-&gt;r]!=nums[rch-&gt;l])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lch-&gt;lvalue==(lch-&gt;r-lch-&gt;l+<span class=\"number\">1</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                lvalue+=rch-&gt;lvalue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rch-&gt;rvalue==(rch-&gt;r-rch-&gt;l+<span class=\"number\">1</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                rvalue+=lch-&gt;rvalue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        midvalue=max(nums[lch-&gt;r]!=nums[rch-&gt;l]?lch-&gt;rvalue+rch-&gt;lvalue:<span class=\"number\">0</span>,max(lch-&gt;midvalue,rch-&gt;midvalue));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l = L;</span><br><span class=\"line\">        r = R;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l==r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            lch = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            rch = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            lvalue=rvalue=midvalue=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            lch = <span class=\"keyword\">new</span> Node(L, mid);</span><br><span class=\"line\">            rch = <span class=\"keyword\">new</span> Node(mid + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">            push_up();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l==r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lch-&gt;r&gt;=w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            lch-&gt;update(w);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rch-&gt;update(w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        push_up();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    totN=read();</span><br><span class=\"line\">    totDO=read();</span><br><span class=\"line\">    Node *root=<span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>,totN);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totDO; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> tempX=read();</span><br><span class=\"line\">        nums[tempX]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">        root-&gt;update(tempX);</span><br><span class=\"line\">        write(root-&gt;midvalue);</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个长度为 <code>n</code> 的字符序列 <code>a</code>，初始时序列中全部都是字符 <code>L</code>。</p>\n<p>有 <code>q</code> 次修改，每次给定一个 <code>x</code>，若$$ a_{x}$$ 为 <code>L</code>，则将 $$a_{x}$$​ 修改成 <code>R</code>，否则将 $$a_{x}$$​ 修改成 <code>L</code>。</p>\n<p>对于一个只含字符 <code>L</code>，<code>R</code> 的字符串 ss，若其中不存在连续的 <code>L</code> 和 <code>R</code>，则称 <code>s</code> 满足要求。</p>\n<p>每次修改后，请输出当前序列 <code>a</code> 中最长的满足要求的连续子串的长度。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行有两个整数，分别表示序列的长度 <code>n</code> 和修改操作的次数<code>q</code>。</p>\n<p>接下来 <code>q</code> 行，每行一个整数，表示本次修改的位置<code>x</code>。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>对于每次修改操作，输出一行一个整数表示修改 <code>a</code> 中最长的满足要求的子串的长度。</p>\n<h2 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说明-提示\"><a href=\"#说明-提示\" class=\"headerlink\" title=\"说明/提示\"></a>说明/提示</h2><h4 id=\"数据规模与约定\"><a href=\"#数据规模与约定\" class=\"headerlink\" title=\"数据规模与约定\"></a>数据规模与约定</h4><p>对于全部的测试点，保证 1≤n,q≤2×105，1 ≤ x ≤ n。</p>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>题目译自 <a href=\"https://hsin.hr/coci/archive/2010_2011/\">COCI2010-2011</a> <a href=\"https://hsin.hr/coci/archive/2010_2011/contest6_tasks.pdf\">CONTEST #6</a> <strong>T5 STEP</strong>，翻译来自 @<a href=\"https://www.luogu.com.cn/user/65363\">一扶苏一</a>。</p>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>这个题其实和区间和区别并不大，只是把求和的push_up操作改为求最长的连续符合条件的串即可。</p>\n<p>分左，中，右三部分考虑。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">1</span>) + (x &lt;&lt; <span class=\"number\">3</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> f[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = -tmp;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[s++] = tmp % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(f[--s]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1000090</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> nums[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totN;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> totDO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> lvalue;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> rvalue;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> midvalue;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> l, r;</span><br><span class=\"line\">    Node* lch, * rch;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">push_up</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        lvalue=lch-&gt;lvalue;</span><br><span class=\"line\">        rvalue=rch-&gt;rvalue;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[lch-&gt;r]!=nums[rch-&gt;l])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lch-&gt;lvalue==(lch-&gt;r-lch-&gt;l+<span class=\"number\">1</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                lvalue+=rch-&gt;lvalue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rch-&gt;rvalue==(rch-&gt;r-rch-&gt;l+<span class=\"number\">1</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                rvalue+=lch-&gt;rvalue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        midvalue=max(nums[lch-&gt;r]!=nums[rch-&gt;l]?lch-&gt;rvalue+rch-&gt;lvalue:<span class=\"number\">0</span>,max(lch-&gt;midvalue,rch-&gt;midvalue));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l = L;</span><br><span class=\"line\">        r = R;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l==r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            lch = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            rch = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            lvalue=rvalue=midvalue=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            lch = <span class=\"keyword\">new</span> Node(L, mid);</span><br><span class=\"line\">            rch = <span class=\"keyword\">new</span> Node(mid + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">            push_up();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l==r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lch-&gt;r&gt;=w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            lch-&gt;update(w);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rch-&gt;update(w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        push_up();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    totN=read();</span><br><span class=\"line\">    totDO=read();</span><br><span class=\"line\">    Node *root=<span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>,totN);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= totDO; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> tempX=read();</span><br><span class=\"line\">        nums[tempX]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">        root-&gt;update(tempX);</span><br><span class=\"line\">        write(root-&gt;midvalue);</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"莫比乌斯反演","date":"2020-03-14T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%889.php","_content":"##莫比乌斯反演相关\n\n###莫比乌斯函数\n\n$$\n\\mu(n)=\\left\\{\\begin{array}{ll}\n1 & \\text { 若 } n=1 \\\\\n(-1)^{k} & \\text { 若 } n \\text { 无平方数因数，且 } n=p_{1} p_{2} \\ldots \\ldots p_{k} \\\\\n0 & \\text { 若 } n \\text { 有大于 } 1 \\text { 的平方数因数。 }\n\\end{array}\\right.\n$$\n\n设f(n)、g(n)是两个数论函数，它们的狄利克雷乘积也是一个数论函数，其定义为：\n\n$$\n\\begin{aligned}\nh(n)=& \\sum_{d \\mid n} f(d) g\\left(\\frac{n}{d}\\right) \\\\\n& d>0\n\\end{aligned}\n$$\n若函数<img src=\"https://img2020.cnblogs.com/i-beta/1924270/202003/1924270-20200315200806063-1269850754.png\" alt=\"\" />满足：\n$$\nf(n)=\\sum_{d \\mid n} g(d)=\\sum_{d \\mid n} g\\left(\\frac{n}{d}\\right)\n$$\n则有\n$$\ng(n)=\\sum_{d \\mid n} \\mu(d) f\\left(\\frac{n}{d}\\right)=\\sum_{d \\mid n} \\mu\\left(\\frac{n}{d}\\right) f(d)\n$$\n\n###例题\n\n求1<=i<=n,1<=j<=m，gcd(i,j)==d的对数。\n\n先让n/=d,m/=d，变成求gcd(i,j)==1的对数。\n\n$$\n\\begin{array}{l}\n\\sum_{i=1}^{n} \\sum_{j=1}^{m}[\\operatorname{gcd}(i, j)=1] \\\\\n=\\sum_{i=1}^{n} \\sum_{j=1}^{m} \\sum_{d \\mid \\operatorname{gcd}(i, j)}^{\\min } \\mu(d) \\\\\n=\\sum_{i=1}^{n} \\sum_{j=1}^{m} \\sum_{d|i, d| j}^{\\min } \\mu(d) \\\\\n=\\sum_{d=1}^{\\min } \\mu(d) \\sum_{d \\mid i}^{n} \\sum_{d \\mid j}^{m} 1 \\\\\n=\\sum_{d=1}^{\\min } \\mu(d) \\frac{n}{d} \\frac{m}{d}\n\\end{array}\n$$\n然后预处理出(d)的前缀和，O(sqrt(n))枚举d即可。\n\n代码\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define lli long long int\nusing namespace std;\nconst int maxn=5e4+1e2;\n\nint mu[maxn];\nlli sum[maxn];\n\ninline void gen() {\n    static int prime[maxn],cnt;\n    static unsigned char vis[maxn];\n    sum[1] = mu[1] = 1;\n    for(int i=2;i<maxn;i++) {\n        if( !vis[i] ) {\n            prime[++cnt] = i,\n            mu[i] = -1;\n        }\n        for(int j=1;j<=cnt&&i*prime[j]<maxn;j++) {\n            vis[i*prime[j]] = 1;\n            mu[i*prime[j]] = -mu[i];\n            if( ! ( i % prime[j]) ) {\n                mu[i*prime[j]] = 0;\n                break;\n            }\n        }\n        sum[i] = sum[i-1] + mu[i];\n    }\n}\n\ninline lli calc(int n,int m) {\n    lli ret = 0;\n    if( n > m )\n        swap(n,m);\n    int pos = 0;\n    for(int i=1;i<=n;i=pos+1) {\n        pos = min( n / ( n / i ) , m / ( m / i ) );\n        ret += ( sum[pos] - sum[i-1] ) * ( n / i ) * ( m / i );\n    }\n    return ret;\n}\n\nint main() {\n    static int T;\n    int a,b,d;\n    \n    gen();\n    \n    scanf(\"%d\",&T);\n    \n    while( T-- ) {\n        scanf(\"%d%d%d\",&a,&b,&d);\n        a /= d , b /= d;\n        printf(\"%lld\\n\",calc(a,b));\n    }\n    \n    return 0;\n}\n```\n\n","source":"_posts/莫比乌斯反演.md","raw":"---\ntitle: 莫比乌斯反演\ndate: 2020-03-15\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%889.php   \ntags: \n    - 数论\n    - 算法概述\n---\n##莫比乌斯反演相关\n\n###莫比乌斯函数\n\n$$\n\\mu(n)=\\left\\{\\begin{array}{ll}\n1 & \\text { 若 } n=1 \\\\\n(-1)^{k} & \\text { 若 } n \\text { 无平方数因数，且 } n=p_{1} p_{2} \\ldots \\ldots p_{k} \\\\\n0 & \\text { 若 } n \\text { 有大于 } 1 \\text { 的平方数因数。 }\n\\end{array}\\right.\n$$\n\n设f(n)、g(n)是两个数论函数，它们的狄利克雷乘积也是一个数论函数，其定义为：\n\n$$\n\\begin{aligned}\nh(n)=& \\sum_{d \\mid n} f(d) g\\left(\\frac{n}{d}\\right) \\\\\n& d>0\n\\end{aligned}\n$$\n若函数<img src=\"https://img2020.cnblogs.com/i-beta/1924270/202003/1924270-20200315200806063-1269850754.png\" alt=\"\" />满足：\n$$\nf(n)=\\sum_{d \\mid n} g(d)=\\sum_{d \\mid n} g\\left(\\frac{n}{d}\\right)\n$$\n则有\n$$\ng(n)=\\sum_{d \\mid n} \\mu(d) f\\left(\\frac{n}{d}\\right)=\\sum_{d \\mid n} \\mu\\left(\\frac{n}{d}\\right) f(d)\n$$\n\n###例题\n\n求1<=i<=n,1<=j<=m，gcd(i,j)==d的对数。\n\n先让n/=d,m/=d，变成求gcd(i,j)==1的对数。\n\n$$\n\\begin{array}{l}\n\\sum_{i=1}^{n} \\sum_{j=1}^{m}[\\operatorname{gcd}(i, j)=1] \\\\\n=\\sum_{i=1}^{n} \\sum_{j=1}^{m} \\sum_{d \\mid \\operatorname{gcd}(i, j)}^{\\min } \\mu(d) \\\\\n=\\sum_{i=1}^{n} \\sum_{j=1}^{m} \\sum_{d|i, d| j}^{\\min } \\mu(d) \\\\\n=\\sum_{d=1}^{\\min } \\mu(d) \\sum_{d \\mid i}^{n} \\sum_{d \\mid j}^{m} 1 \\\\\n=\\sum_{d=1}^{\\min } \\mu(d) \\frac{n}{d} \\frac{m}{d}\n\\end{array}\n$$\n然后预处理出(d)的前缀和，O(sqrt(n))枚举d即可。\n\n代码\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define lli long long int\nusing namespace std;\nconst int maxn=5e4+1e2;\n\nint mu[maxn];\nlli sum[maxn];\n\ninline void gen() {\n    static int prime[maxn],cnt;\n    static unsigned char vis[maxn];\n    sum[1] = mu[1] = 1;\n    for(int i=2;i<maxn;i++) {\n        if( !vis[i] ) {\n            prime[++cnt] = i,\n            mu[i] = -1;\n        }\n        for(int j=1;j<=cnt&&i*prime[j]<maxn;j++) {\n            vis[i*prime[j]] = 1;\n            mu[i*prime[j]] = -mu[i];\n            if( ! ( i % prime[j]) ) {\n                mu[i*prime[j]] = 0;\n                break;\n            }\n        }\n        sum[i] = sum[i-1] + mu[i];\n    }\n}\n\ninline lli calc(int n,int m) {\n    lli ret = 0;\n    if( n > m )\n        swap(n,m);\n    int pos = 0;\n    for(int i=1;i<=n;i=pos+1) {\n        pos = min( n / ( n / i ) , m / ( m / i ) );\n        ret += ( sum[pos] - sum[i-1] ) * ( n / i ) * ( m / i );\n    }\n    return ret;\n}\n\nint main() {\n    static int T;\n    int a,b,d;\n    \n    gen();\n    \n    scanf(\"%d\",&T);\n    \n    while( T-- ) {\n        scanf(\"%d%d%d\",&a,&b,&d);\n        a /= d , b /= d;\n        printf(\"%lld\\n\",calc(a,b));\n    }\n    \n    return 0;\n}\n```\n\n","slug":"莫比乌斯反演","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2nj0022pb0yd83k36cr","content":"<p>##莫比乌斯反演相关</p>\n<p>###莫比乌斯函数</p>\n<p>$$<br>\\mu(n)=\\left{\\begin{array}{ll}<br>1 &amp; \\text { 若 } n=1 \\<br>(-1)^{k} &amp; \\text { 若 } n \\text { 无平方数因数，且 } n=p_{1} p_{2} \\ldots \\ldots p_{k} \\<br>0 &amp; \\text { 若 } n \\text { 有大于 } 1 \\text { 的平方数因数。 }<br>\\end{array}\\right.<br>$$</p>\n<p>设f(n)、g(n)是两个数论函数，它们的狄利克雷乘积也是一个数论函数，其定义为：</p>\n<p>$$<br>\\begin{aligned}<br>h(n)=&amp; \\sum_{d \\mid n} f(d) g\\left(\\frac{n}{d}\\right) \\<br>&amp; d&gt;0<br>\\end{aligned}<br>$$<br>若函数<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/i-beta/1924270/202003/1924270-20200315200806063-1269850754.png\" alt=\"\" />满足：<br>$$<br>f(n)=\\sum_{d \\mid n} g(d)=\\sum_{d \\mid n} g\\left(\\frac{n}{d}\\right)<br>$$<br>则有<br>$$<br>g(n)=\\sum_{d \\mid n} \\mu(d) f\\left(\\frac{n}{d}\\right)=\\sum_{d \\mid n} \\mu\\left(\\frac{n}{d}\\right) f(d)<br>$$</p>\n<p>###例题</p>\n<p>求1&lt;=i&lt;=n,1&lt;=j&lt;=m，gcd(i,j)==d的对数。</p>\n<p>先让n/=d,m/=d，变成求gcd(i,j)==1的对数。</p>\n<p>$$<br>\\begin{array}{l}<br>\\sum_{i=1}^{n} \\sum_{j=1}^{m}[\\operatorname{gcd}(i, j)=1] \\<br>=\\sum_{i=1}^{n} \\sum_{j=1}^{m} \\sum_{d \\mid \\operatorname{gcd}(i, j)}^{\\min } \\mu(d) \\<br>=\\sum_{i=1}^{n} \\sum_{j=1}^{m} \\sum_{d|i, d| j}^{\\min } \\mu(d) \\<br>=\\sum_{d=1}^{\\min } \\mu(d) \\sum_{d \\mid i}^{n} \\sum_{d \\mid j}^{m} 1 \\<br>=\\sum_{d=1}^{\\min } \\mu(d) \\frac{n}{d} \\frac{m}{d}<br>\\end{array}<br>$$<br>然后预处理出(d)的前缀和，O(sqrt(n))枚举d即可。</p>\n<p>代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lli long long int</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">5e4</span>+<span class=\"number\">1e2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> mu[maxn];</span><br><span class=\"line\">lli sum[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">gen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> prime[maxn],cnt;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> vis[maxn];</span><br><span class=\"line\">    sum[<span class=\"number\">1</span>] = mu[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;maxn;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !vis[i] ) &#123;</span><br><span class=\"line\">            prime[++cnt] = i,</span><br><span class=\"line\">            mu[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;maxn;j++) &#123;</span><br><span class=\"line\">            vis[i*prime[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            mu[i*prime[j]] = -mu[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( ! ( i % prime[j]) ) &#123;</span><br><span class=\"line\">                mu[i*prime[j]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum[i] = sum[i<span class=\"number\">-1</span>] + mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> lli <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    lli ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( n &gt; m )</span><br><span class=\"line\">        swap(n,m);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i=pos+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        pos = min( n / ( n / i ) , m / ( m / i ) );</span><br><span class=\"line\">        ret += ( sum[pos] - sum[i<span class=\"number\">-1</span>] ) * ( n / i ) * ( m / i );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,d;</span><br><span class=\"line\">    </span><br><span class=\"line\">    gen();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;T);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>( T-- ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;d);</span><br><span class=\"line\">        a /= d , b /= d;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,calc(a,b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>##莫比乌斯反演相关</p>\n<p>###莫比乌斯函数</p>\n<p>$$<br>\\mu(n)=\\left{\\begin{array}{ll}<br>1 &amp; \\text { 若 } n=1 \\<br>(-1)^{k} &amp; \\text { 若 } n \\text { 无平方数因数，且 } n=p_{1} p_{2} \\ldots \\ldots p_{k} \\<br>0 &amp; \\text { 若 } n \\text { 有大于 } 1 \\text { 的平方数因数。 }<br>\\end{array}\\right.<br>$$</p>\n<p>设f(n)、g(n)是两个数论函数，它们的狄利克雷乘积也是一个数论函数，其定义为：</p>\n<p>$$<br>\\begin{aligned}<br>h(n)=&amp; \\sum_{d \\mid n} f(d) g\\left(\\frac{n}{d}\\right) \\<br>&amp; d&gt;0<br>\\end{aligned}<br>$$<br>若函数<img src=\"https://img2020.cnblogs.com/i-beta/1924270/202003/1924270-20200315200806063-1269850754.png\" alt=\"\" />满足：<br>$$<br>f(n)=\\sum_{d \\mid n} g(d)=\\sum_{d \\mid n} g\\left(\\frac{n}{d}\\right)<br>$$<br>则有<br>$$<br>g(n)=\\sum_{d \\mid n} \\mu(d) f\\left(\\frac{n}{d}\\right)=\\sum_{d \\mid n} \\mu\\left(\\frac{n}{d}\\right) f(d)<br>$$</p>\n<p>###例题</p>\n<p>求1&lt;=i&lt;=n,1&lt;=j&lt;=m，gcd(i,j)==d的对数。</p>\n<p>先让n/=d,m/=d，变成求gcd(i,j)==1的对数。</p>\n<p>$$<br>\\begin{array}{l}<br>\\sum_{i=1}^{n} \\sum_{j=1}^{m}[\\operatorname{gcd}(i, j)=1] \\<br>=\\sum_{i=1}^{n} \\sum_{j=1}^{m} \\sum_{d \\mid \\operatorname{gcd}(i, j)}^{\\min } \\mu(d) \\<br>=\\sum_{i=1}^{n} \\sum_{j=1}^{m} \\sum_{d|i, d| j}^{\\min } \\mu(d) \\<br>=\\sum_{d=1}^{\\min } \\mu(d) \\sum_{d \\mid i}^{n} \\sum_{d \\mid j}^{m} 1 \\<br>=\\sum_{d=1}^{\\min } \\mu(d) \\frac{n}{d} \\frac{m}{d}<br>\\end{array}<br>$$<br>然后预处理出(d)的前缀和，O(sqrt(n))枚举d即可。</p>\n<p>代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lli long long int</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">5e4</span>+<span class=\"number\">1e2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> mu[maxn];</span><br><span class=\"line\">lli sum[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">gen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> prime[maxn],cnt;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> vis[maxn];</span><br><span class=\"line\">    sum[<span class=\"number\">1</span>] = mu[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;maxn;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !vis[i] ) &#123;</span><br><span class=\"line\">            prime[++cnt] = i,</span><br><span class=\"line\">            mu[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;maxn;j++) &#123;</span><br><span class=\"line\">            vis[i*prime[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            mu[i*prime[j]] = -mu[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( ! ( i % prime[j]) ) &#123;</span><br><span class=\"line\">                mu[i*prime[j]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum[i] = sum[i<span class=\"number\">-1</span>] + mu[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> lli <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    lli ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( n &gt; m )</span><br><span class=\"line\">        swap(n,m);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i=pos+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        pos = min( n / ( n / i ) , m / ( m / i ) );</span><br><span class=\"line\">        ret += ( sum[pos] - sum[i<span class=\"number\">-1</span>] ) * ( n / i ) * ( m / i );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,d;</span><br><span class=\"line\">    </span><br><span class=\"line\">    gen();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;T);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>( T-- ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;d);</span><br><span class=\"line\">        a /= d , b /= d;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,calc(a,b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"递推;矩阵加速","date":"2020-03-02T16:00:00.000Z","top_img":"https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php","cover":"https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%886.php","_content":"<img src=\"https://img2020.cnblogs.com/blog/1924270/202003/1924270-20200303084213350-258204603.png\" alt=\"\" />\n\n这个题其实很简单，简单分析一下规律，发现发f[i]=f[i-1]+f[i-2]。\n\n如下图：\n\n<img src=\"https://img2020.cnblogs.com/i-beta/1924270/202003/1924270-20200303090245118-1492545993.png\" alt=\"\" />\n\n```cpp\n 1 #include<iostream>\n 2 using namespace std;\n 3 int main()\n 4 {\n 5   int n,i,j,a[101];                  \n 6   cin>>n;\n 7   a[1]=1;a[2]=2;\n 8   for (i=3;i<=n;i++) \n 9    {\n10      a[i]=a[i-1]+a[i-2];\n11 　   }\n12 cout<<a[n];\n13 } \n```\n\n用这个代码，解决这个题的确很轻松。\n\n可是只要稍微更改一下数据范围，就完全不一样了：\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202003/1924270-20200303092801661-773393263.png\" alt=\"\" />\n\n这样子，难度就完全不是一个等级了。\n\n首先是不能开一个10^18^的数组，那样肯定会爆内存。\n\n我们可以用滚动的数组：\n\n```cpp\n#include<bits/stdc++.h>\n#define mod 1e9+7\n\nusing namespace std;\n\nlong long a[4] = {0,1,2};\n\nint main()\n{\n    freopen(\"brick.in\", \"r\", stdin);\n    freopen(\"brick.out\", \"w\", stdout);\n    int fbk;\n    cin >> fbk;\n    if (fbk==1)\n    {\n        cout << 1;\n    }\n    else if (fbk==2)\n    {\n        cout << 2;\n    }\n    else\n    {\n        for (int yousa = 3; yousa <= fbk-2; yousa++)\n        {\n            a[3] = (a[2] + a[1])%(long long)(mod);\n            a[1] = a[2];\n            a[2] = a[3];\n        }\n        cout << a[3] << \"\\n\";\n    }\n    fclose(stdin);\n    fclose(stdout);\n}\n```\n\n测试之后发现虽然内存占用很少，但是会超时。\n\n这就用到我们的矩阵加速了：\n\n### 矩阵乘法\n\n矩阵乘法可以先稍作了解，知道矩阵相乘的运算法则\n\n<img src=\"https://images.cnblogs.com/cnblogs_com/huixinxinw/1503711/o_200117131304%E5%9B%BE%E7%89%871.png\" alt=\"img\" />\n\n### 快速幂\n\n快速幂要求解的是这样一类问题：\n\n给你A,B,C，求A的B次方模C的余数\n\nA,C<=10^9^,B<=10^18^\n\n如果我们线性去求，时间复杂度是O（n）的，但题目中给出的B是很大的数，这样显然会超时,我们可以用快速幂来加速这个过程。\n\n我们可以想像一下小学的时候我们如何计算2^16^\n\n2^16^=4^8^=16^4^=256^2^=65536\n\n那如何计算2^18^呢？\n\n快速幂同理也是如此\n\n我们可以按照上面做法，利用分治的思想求去解\n\n这样原本O(n)的时间复杂度便降到了O(log n )\n\n```cpp\nlong long ans=1,base=a;\nwhile(n>0)\n{\n    if(n&1)\n \t{\n    \tans*=base;\n    }\n        base*=base;\n        n=n/2;\n}\n```\n\n### 矩阵快速幂\n\n矩阵快速幂的原理同快速幂一样，只是转换为了矩阵之间的乘法操作\n\n所以单纯的重载一下运算符(写成函数的形式也可），将普通的乘法转换为矩阵乘法就好了。\n\n### 矩阵加速\n\n知道那个叫矩阵快速幂的东西后我们可以学矩阵加速了\n\n斐波那契数列中的每一项都是前两项之和\n\n我们考虑构造这么一个矩阵：每一次乘上这个矩阵都能从f[n-1],f[n-2]两项向后递推到f[n-1],f[n]这两项\n\n那么关键就是如何构造这样的矩阵\n\n对于这样一个矩阵我们有\n\n\n所以我们将每一次两项相加转换为了乘以一个转移矩阵\n\n既然是乘法，每次乘以的也是同一个矩阵\n\n我们可以利用矩阵快速幂的思想对于求解斐波那契数列加速\n\n代码实现基本上是一致的，只需要构造一个转移矩阵来进行状态之间的转移即可\n\n```cpp\nstruct mat{\n    ll m[5][5];\n}a,ans;\nll n,b,k; \nmat mul(mat x,mat y,int flag){\n    mat c;\n    for(int i=1;i<=2;i++)\n        for(int j=1;j<=2;j++)\n            c.m[i][j]=0;\n    for(int i=1;i<=2;i++){\n        for(int j=1;j<=2;j++){\n            for(int q=1;q<=2;q++){\n                    c.m[i][j]=(c.m[i][j]+x.m[i][q]*y.m[q][j])%Mod;\n        \n            }\n        }\n    }\n    return c;\n}\nint main(){\n    cin >> n;\n    a.m[1][1]=1;a.m[1][2]=1;\n    a.m[2][1]=1;a.m[2][2]=0;\n    b=n-2;\n    ans.m[1][1]=1;\n    ans.m[1][2]=1;\n    while(b){\n         if(b&1){\n            ans=mul(ans,a,1);\n        }\n        a=mul(a,a,2);\n        b=b/2;\n    } \n    if(n==1||n==2)cout<<1;\n    else cout<<ans.m[1][1]%Mod;\n}\n```\n\n这样这个题就被解决了！\n","source":"_posts/递推;矩阵加速.md","raw":"---\ntitle: 递推;矩阵加速\ndate: 2020-03-03\ntop_img: https://api.r10086.com/%E9%A3%8E%E6%99%AF%E7%B3%BB%E5%88%9710.php\ncover: https://api.r10086.com/%E5%8A%A8%E6%BC%AB%E7%BB%BC%E5%90%886.php   \ntags: \n    - 递推\n    - 矩阵加速\n    - 算法概述\n---\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202003/1924270-20200303084213350-258204603.png\" alt=\"\" />\n\n这个题其实很简单，简单分析一下规律，发现发f[i]=f[i-1]+f[i-2]。\n\n如下图：\n\n<img src=\"https://img2020.cnblogs.com/i-beta/1924270/202003/1924270-20200303090245118-1492545993.png\" alt=\"\" />\n\n```cpp\n 1 #include<iostream>\n 2 using namespace std;\n 3 int main()\n 4 {\n 5   int n,i,j,a[101];                  \n 6   cin>>n;\n 7   a[1]=1;a[2]=2;\n 8   for (i=3;i<=n;i++) \n 9    {\n10      a[i]=a[i-1]+a[i-2];\n11 　   }\n12 cout<<a[n];\n13 } \n```\n\n用这个代码，解决这个题的确很轻松。\n\n可是只要稍微更改一下数据范围，就完全不一样了：\n\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202003/1924270-20200303092801661-773393263.png\" alt=\"\" />\n\n这样子，难度就完全不是一个等级了。\n\n首先是不能开一个10^18^的数组，那样肯定会爆内存。\n\n我们可以用滚动的数组：\n\n```cpp\n#include<bits/stdc++.h>\n#define mod 1e9+7\n\nusing namespace std;\n\nlong long a[4] = {0,1,2};\n\nint main()\n{\n    freopen(\"brick.in\", \"r\", stdin);\n    freopen(\"brick.out\", \"w\", stdout);\n    int fbk;\n    cin >> fbk;\n    if (fbk==1)\n    {\n        cout << 1;\n    }\n    else if (fbk==2)\n    {\n        cout << 2;\n    }\n    else\n    {\n        for (int yousa = 3; yousa <= fbk-2; yousa++)\n        {\n            a[3] = (a[2] + a[1])%(long long)(mod);\n            a[1] = a[2];\n            a[2] = a[3];\n        }\n        cout << a[3] << \"\\n\";\n    }\n    fclose(stdin);\n    fclose(stdout);\n}\n```\n\n测试之后发现虽然内存占用很少，但是会超时。\n\n这就用到我们的矩阵加速了：\n\n### 矩阵乘法\n\n矩阵乘法可以先稍作了解，知道矩阵相乘的运算法则\n\n<img src=\"https://images.cnblogs.com/cnblogs_com/huixinxinw/1503711/o_200117131304%E5%9B%BE%E7%89%871.png\" alt=\"img\" />\n\n### 快速幂\n\n快速幂要求解的是这样一类问题：\n\n给你A,B,C，求A的B次方模C的余数\n\nA,C<=10^9^,B<=10^18^\n\n如果我们线性去求，时间复杂度是O（n）的，但题目中给出的B是很大的数，这样显然会超时,我们可以用快速幂来加速这个过程。\n\n我们可以想像一下小学的时候我们如何计算2^16^\n\n2^16^=4^8^=16^4^=256^2^=65536\n\n那如何计算2^18^呢？\n\n快速幂同理也是如此\n\n我们可以按照上面做法，利用分治的思想求去解\n\n这样原本O(n)的时间复杂度便降到了O(log n )\n\n```cpp\nlong long ans=1,base=a;\nwhile(n>0)\n{\n    if(n&1)\n \t{\n    \tans*=base;\n    }\n        base*=base;\n        n=n/2;\n}\n```\n\n### 矩阵快速幂\n\n矩阵快速幂的原理同快速幂一样，只是转换为了矩阵之间的乘法操作\n\n所以单纯的重载一下运算符(写成函数的形式也可），将普通的乘法转换为矩阵乘法就好了。\n\n### 矩阵加速\n\n知道那个叫矩阵快速幂的东西后我们可以学矩阵加速了\n\n斐波那契数列中的每一项都是前两项之和\n\n我们考虑构造这么一个矩阵：每一次乘上这个矩阵都能从f[n-1],f[n-2]两项向后递推到f[n-1],f[n]这两项\n\n那么关键就是如何构造这样的矩阵\n\n对于这样一个矩阵我们有\n\n\n所以我们将每一次两项相加转换为了乘以一个转移矩阵\n\n既然是乘法，每次乘以的也是同一个矩阵\n\n我们可以利用矩阵快速幂的思想对于求解斐波那契数列加速\n\n代码实现基本上是一致的，只需要构造一个转移矩阵来进行状态之间的转移即可\n\n```cpp\nstruct mat{\n    ll m[5][5];\n}a,ans;\nll n,b,k; \nmat mul(mat x,mat y,int flag){\n    mat c;\n    for(int i=1;i<=2;i++)\n        for(int j=1;j<=2;j++)\n            c.m[i][j]=0;\n    for(int i=1;i<=2;i++){\n        for(int j=1;j<=2;j++){\n            for(int q=1;q<=2;q++){\n                    c.m[i][j]=(c.m[i][j]+x.m[i][q]*y.m[q][j])%Mod;\n        \n            }\n        }\n    }\n    return c;\n}\nint main(){\n    cin >> n;\n    a.m[1][1]=1;a.m[1][2]=1;\n    a.m[2][1]=1;a.m[2][2]=0;\n    b=n-2;\n    ans.m[1][1]=1;\n    ans.m[1][2]=1;\n    while(b){\n         if(b&1){\n            ans=mul(ans,a,1);\n        }\n        a=mul(a,a,2);\n        b=b/2;\n    } \n    if(n==1||n==2)cout<<1;\n    else cout<<ans.m[1][1]%Mod;\n}\n```\n\n这样这个题就被解决了！\n","slug":"递推;矩阵加速","published":1,"updated":"2021-02-24T00:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklkql2nl0024pb0y8chv2fx3","content":"<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/blog/1924270/202003/1924270-20200303084213350-258204603.png\" alt=\"\" />\n\n<p>这个题其实很简单，简单分析一下规律，发现发f[i]=f[i-1]+f[i-2]。</p>\n<p>如下图：</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/i-beta/1924270/202003/1924270-20200303090245118-1492545993.png\" alt=\"\" />\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> <span class=\"number\">2</span> <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> <span class=\"number\">3</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>   <span class=\"keyword\">int</span> n,i,j,a[<span class=\"number\">101</span>];                  </span><br><span class=\"line\"> <span class=\"number\">6</span>   <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\"> <span class=\"number\">7</span>   a[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;a[<span class=\"number\">2</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\"> <span class=\"number\">8</span>   <span class=\"keyword\">for</span> (i=<span class=\"number\">3</span>;i&lt;=n;i++) </span><br><span class=\"line\"> <span class=\"number\">9</span>    &#123;</span><br><span class=\"line\"><span class=\"number\">10</span>      a[i]=a[i<span class=\"number\">-1</span>]+a[i<span class=\"number\">-2</span>];</span><br><span class=\"line\"><span class=\"number\">11</span> 　   &#125;</span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"built_in\">cout</span>&lt;&lt;a[n];</span><br><span class=\"line\"><span class=\"number\">13</span> &#125; </span><br></pre></td></tr></table></figure>\n\n<p>用这个代码，解决这个题的确很轻松。</p>\n<p>可是只要稍微更改一下数据范围，就完全不一样了：</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://img2020.cnblogs.com/blog/1924270/202003/1924270-20200303092801661-773393263.png\" alt=\"\" />\n\n<p>这样子，难度就完全不是一个等级了。</p>\n<p>首先是不能开一个10^18^的数组，那样肯定会爆内存。</p>\n<p>我们可以用滚动的数组：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mod 1e9+7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;brick.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;brick.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fbk;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; fbk;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fbk==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fbk==<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> yousa = <span class=\"number\">3</span>; yousa &lt;= fbk<span class=\"number\">-2</span>; yousa++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[<span class=\"number\">3</span>] = (a[<span class=\"number\">2</span>] + a[<span class=\"number\">1</span>])%(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)(mod);</span><br><span class=\"line\">            a[<span class=\"number\">1</span>] = a[<span class=\"number\">2</span>];</span><br><span class=\"line\">            a[<span class=\"number\">2</span>] = a[<span class=\"number\">3</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[<span class=\"number\">3</span>] &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试之后发现虽然内存占用很少，但是会超时。</p>\n<p>这就用到我们的矩阵加速了：</p>\n<h3 id=\"矩阵乘法\"><a href=\"#矩阵乘法\" class=\"headerlink\" title=\"矩阵乘法\"></a>矩阵乘法</h3><p>矩阵乘法可以先稍作了解，知道矩阵相乘的运算法则</p>\n<img src= \"https://cdn.jsdelivr.net/gh/thomitics/blog@master/img/loading.gif\" data-lazy-src=\"https://images.cnblogs.com/cnblogs_com/huixinxinw/1503711/o_200117131304%E5%9B%BE%E7%89%871.png\" alt=\"img\" />\n\n<h3 id=\"快速幂\"><a href=\"#快速幂\" class=\"headerlink\" title=\"快速幂\"></a>快速幂</h3><p>快速幂要求解的是这样一类问题：</p>\n<p>给你A,B,C，求A的B次方模C的余数</p>\n<p>A,C&lt;=10^9^,B&lt;=10^18^</p>\n<p>如果我们线性去求，时间复杂度是O（n）的，但题目中给出的B是很大的数，这样显然会超时,我们可以用快速幂来加速这个过程。</p>\n<p>我们可以想像一下小学的时候我们如何计算2^16^</p>\n<p>2^16^=4^8^=16^4^=256^2^=65536</p>\n<p>那如何计算2^18^呢？</p>\n<p>快速幂同理也是如此</p>\n<p>我们可以按照上面做法，利用分治的思想求去解</p>\n<p>这样原本O(n)的时间复杂度便降到了O(log n )</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">1</span>,base=a;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\">    \tans*=base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        base*=base;</span><br><span class=\"line\">        n=n/<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩阵快速幂\"><a href=\"#矩阵快速幂\" class=\"headerlink\" title=\"矩阵快速幂\"></a>矩阵快速幂</h3><p>矩阵快速幂的原理同快速幂一样，只是转换为了矩阵之间的乘法操作</p>\n<p>所以单纯的重载一下运算符(写成函数的形式也可），将普通的乘法转换为矩阵乘法就好了。</p>\n<h3 id=\"矩阵加速\"><a href=\"#矩阵加速\" class=\"headerlink\" title=\"矩阵加速\"></a>矩阵加速</h3><p>知道那个叫矩阵快速幂的东西后我们可以学矩阵加速了</p>\n<p>斐波那契数列中的每一项都是前两项之和</p>\n<p>我们考虑构造这么一个矩阵：每一次乘上这个矩阵都能从f[n-1],f[n-2]两项向后递推到f[n-1],f[n]这两项</p>\n<p>那么关键就是如何构造这样的矩阵</p>\n<p>对于这样一个矩阵我们有</p>\n<p>所以我们将每一次两项相加转换为了乘以一个转移矩阵</p>\n<p>既然是乘法，每次乘以的也是同一个矩阵</p>\n<p>我们可以利用矩阵快速幂的思想对于求解斐波那契数列加速</p>\n<p>代码实现基本上是一致的，只需要构造一个转移矩阵来进行状态之间的转移即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mat</span>&#123;</span></span><br><span class=\"line\">    ll m[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\">&#125;a,ans;</span><br><span class=\"line\">ll n,b,k; </span><br><span class=\"line\"><span class=\"function\">mat <span class=\"title\">mul</span><span class=\"params\">(mat x,mat y,<span class=\"keyword\">int</span> flag)</span></span>&#123;</span><br><span class=\"line\">    mat c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">2</span>;j++)</span><br><span class=\"line\">            c.m[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">2</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">2</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> q=<span class=\"number\">1</span>;q&lt;=<span class=\"number\">2</span>;q++)&#123;</span><br><span class=\"line\">                    c.m[i][j]=(c.m[i][j]+x.m[i][q]*y.m[q][j])%Mod;</span><br><span class=\"line\">        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    a.m[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;a.m[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    a.m[<span class=\"number\">2</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;a.m[<span class=\"number\">2</span>][<span class=\"number\">2</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    b=n<span class=\"number\">-2</span>;</span><br><span class=\"line\">    ans.m[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    ans.m[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            ans=mul(ans,a,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a=mul(a,a,<span class=\"number\">2</span>);</span><br><span class=\"line\">        b=b/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>||n==<span class=\"number\">2</span>)<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;ans.m[<span class=\"number\">1</span>][<span class=\"number\">1</span>]%Mod;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样这个题就被解决了！</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"https://img2020.cnblogs.com/blog/1924270/202003/1924270-20200303084213350-258204603.png\" alt=\"\" />\n\n<p>这个题其实很简单，简单分析一下规律，发现发f[i]=f[i-1]+f[i-2]。</p>\n<p>如下图：</p>\n<img src=\"https://img2020.cnblogs.com/i-beta/1924270/202003/1924270-20200303090245118-1492545993.png\" alt=\"\" />\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> <span class=\"number\">2</span> <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> <span class=\"number\">3</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> 4 </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">5</span>   <span class=\"keyword\">int</span> n,i,j,a[<span class=\"number\">101</span>];                  </span><br><span class=\"line\"> <span class=\"number\">6</span>   <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\"> <span class=\"number\">7</span>   a[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;a[<span class=\"number\">2</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\"> <span class=\"number\">8</span>   <span class=\"keyword\">for</span> (i=<span class=\"number\">3</span>;i&lt;=n;i++) </span><br><span class=\"line\"> <span class=\"number\">9</span>    &#123;</span><br><span class=\"line\"><span class=\"number\">10</span>      a[i]=a[i<span class=\"number\">-1</span>]+a[i<span class=\"number\">-2</span>];</span><br><span class=\"line\"><span class=\"number\">11</span> 　   &#125;</span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"built_in\">cout</span>&lt;&lt;a[n];</span><br><span class=\"line\"><span class=\"number\">13</span> &#125; </span><br></pre></td></tr></table></figure>\n\n<p>用这个代码，解决这个题的确很轻松。</p>\n<p>可是只要稍微更改一下数据范围，就完全不一样了：</p>\n<img src=\"https://img2020.cnblogs.com/blog/1924270/202003/1924270-20200303092801661-773393263.png\" alt=\"\" />\n\n<p>这样子，难度就完全不是一个等级了。</p>\n<p>首先是不能开一个10^18^的数组，那样肯定会爆内存。</p>\n<p>我们可以用滚动的数组：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mod 1e9+7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;brick.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">&quot;brick.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fbk;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; fbk;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fbk==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fbk==<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> yousa = <span class=\"number\">3</span>; yousa &lt;= fbk<span class=\"number\">-2</span>; yousa++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[<span class=\"number\">3</span>] = (a[<span class=\"number\">2</span>] + a[<span class=\"number\">1</span>])%(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)(mod);</span><br><span class=\"line\">            a[<span class=\"number\">1</span>] = a[<span class=\"number\">2</span>];</span><br><span class=\"line\">            a[<span class=\"number\">2</span>] = a[<span class=\"number\">3</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[<span class=\"number\">3</span>] &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试之后发现虽然内存占用很少，但是会超时。</p>\n<p>这就用到我们的矩阵加速了：</p>\n<h3 id=\"矩阵乘法\"><a href=\"#矩阵乘法\" class=\"headerlink\" title=\"矩阵乘法\"></a>矩阵乘法</h3><p>矩阵乘法可以先稍作了解，知道矩阵相乘的运算法则</p>\n<img src=\"https://images.cnblogs.com/cnblogs_com/huixinxinw/1503711/o_200117131304%E5%9B%BE%E7%89%871.png\" alt=\"img\" />\n\n<h3 id=\"快速幂\"><a href=\"#快速幂\" class=\"headerlink\" title=\"快速幂\"></a>快速幂</h3><p>快速幂要求解的是这样一类问题：</p>\n<p>给你A,B,C，求A的B次方模C的余数</p>\n<p>A,C&lt;=10^9^,B&lt;=10^18^</p>\n<p>如果我们线性去求，时间复杂度是O（n）的，但题目中给出的B是很大的数，这样显然会超时,我们可以用快速幂来加速这个过程。</p>\n<p>我们可以想像一下小学的时候我们如何计算2^16^</p>\n<p>2^16^=4^8^=16^4^=256^2^=65536</p>\n<p>那如何计算2^18^呢？</p>\n<p>快速幂同理也是如此</p>\n<p>我们可以按照上面做法，利用分治的思想求去解</p>\n<p>这样原本O(n)的时间复杂度便降到了O(log n )</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans=<span class=\"number\">1</span>,base=a;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\">    \tans*=base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        base*=base;</span><br><span class=\"line\">        n=n/<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩阵快速幂\"><a href=\"#矩阵快速幂\" class=\"headerlink\" title=\"矩阵快速幂\"></a>矩阵快速幂</h3><p>矩阵快速幂的原理同快速幂一样，只是转换为了矩阵之间的乘法操作</p>\n<p>所以单纯的重载一下运算符(写成函数的形式也可），将普通的乘法转换为矩阵乘法就好了。</p>\n<h3 id=\"矩阵加速\"><a href=\"#矩阵加速\" class=\"headerlink\" title=\"矩阵加速\"></a>矩阵加速</h3><p>知道那个叫矩阵快速幂的东西后我们可以学矩阵加速了</p>\n<p>斐波那契数列中的每一项都是前两项之和</p>\n<p>我们考虑构造这么一个矩阵：每一次乘上这个矩阵都能从f[n-1],f[n-2]两项向后递推到f[n-1],f[n]这两项</p>\n<p>那么关键就是如何构造这样的矩阵</p>\n<p>对于这样一个矩阵我们有</p>\n<p>所以我们将每一次两项相加转换为了乘以一个转移矩阵</p>\n<p>既然是乘法，每次乘以的也是同一个矩阵</p>\n<p>我们可以利用矩阵快速幂的思想对于求解斐波那契数列加速</p>\n<p>代码实现基本上是一致的，只需要构造一个转移矩阵来进行状态之间的转移即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mat</span>&#123;</span></span><br><span class=\"line\">    ll m[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\">&#125;a,ans;</span><br><span class=\"line\">ll n,b,k; </span><br><span class=\"line\"><span class=\"function\">mat <span class=\"title\">mul</span><span class=\"params\">(mat x,mat y,<span class=\"keyword\">int</span> flag)</span></span>&#123;</span><br><span class=\"line\">    mat c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">2</span>;j++)</span><br><span class=\"line\">            c.m[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">2</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">2</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> q=<span class=\"number\">1</span>;q&lt;=<span class=\"number\">2</span>;q++)&#123;</span><br><span class=\"line\">                    c.m[i][j]=(c.m[i][j]+x.m[i][q]*y.m[q][j])%Mod;</span><br><span class=\"line\">        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    a.m[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;a.m[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    a.m[<span class=\"number\">2</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;a.m[<span class=\"number\">2</span>][<span class=\"number\">2</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    b=n<span class=\"number\">-2</span>;</span><br><span class=\"line\">    ans.m[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    ans.m[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            ans=mul(ans,a,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a=mul(a,a,<span class=\"number\">2</span>);</span><br><span class=\"line\">        b=b/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>||n==<span class=\"number\">2</span>)<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;ans.m[<span class=\"number\">1</span>][<span class=\"number\">1</span>]%Mod;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样这个题就被解决了！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cklkql2m10003pb0y1h7e2bw7","category_id":"cklkql2m50007pb0ygpnm1ag3","_id":"cklkql2mf000lpb0y2c3055lt"},{"post_id":"cklkql2m60009pb0y4nold3ea","category_id":"cklkql2ma000fpb0y08vqg71k","_id":"cklkql2mj000upb0y6wk31iz1"},{"post_id":"cklkql2ma000epb0yg70sdh2e","category_id":"cklkql2mf000npb0y3fxc4py8","_id":"cklkql2mn000zpb0y256d97jx"},{"post_id":"cklkql2mc000hpb0y1s5h3ooc","category_id":"cklkql2mj000vpb0y2fxvajwr","_id":"cklkql2ms0014pb0y42zge7w7"},{"post_id":"cklkql2mi000tpb0yhdbqcgha","category_id":"cklkql2mn0010pb0y5eci2fvg","_id":"cklkql2mx001dpb0yfg7fhvk0"},{"post_id":"cklkql2mo0011pb0yayyg2wub","category_id":"cklkql2mn0010pb0y5eci2fvg","_id":"cklkql2n0001ipb0y2m6uevqm"},{"post_id":"cklkql2my001fpb0y3rgac67e","category_id":"cklkql2mn0010pb0y5eci2fvg","_id":"cklkql2n3001ppb0y6hfx7pfg"},{"post_id":"cklkql2mv0019pb0y51uq2xen","category_id":"cklkql2my001epb0yhc2d1faz","_id":"cklkql2n4001spb0y6bnl9hot"},{"post_id":"cklkql2n1001kpb0ydvjf49hi","category_id":"cklkql2m50007pb0ygpnm1ag3","_id":"cklkql2n5001vpb0ycmd79uzw"},{"post_id":"cklkql2n0001hpb0y759g9fj5","category_id":"cklkql2n2001mpb0ycnj33l4e","_id":"cklkql2n7001zpb0ybc171xaa"}],"PostTag":[{"post_id":"cklkql2lx0001pb0y1ixvdduc","tag_id":"cklkql2m20004pb0y5m33ba0f","_id":"cklkql2mf000mpb0y1yoselqx"},{"post_id":"cklkql2lx0001pb0y1ixvdduc","tag_id":"cklkql2m9000cpb0y0z925vc9","_id":"cklkql2mh000qpb0yfxhvglli"},{"post_id":"cklkql2m10003pb0y1h7e2bw7","tag_id":"cklkql2md000ipb0y5o8k6eu9","_id":"cklkql2ms0015pb0yfl0fg0eo"},{"post_id":"cklkql2m10003pb0y1h7e2bw7","tag_id":"cklkql2mh000rpb0ydnzn9ooo","_id":"cklkql2mv0018pb0ydl51e1zz"},{"post_id":"cklkql2m10003pb0y1h7e2bw7","tag_id":"cklkql2ml000xpb0y63bvdk4u","_id":"cklkql2mw001bpb0y16gcggjm"},{"post_id":"cklkql2m40006pb0yf269bk3k","tag_id":"cklkql2mq0013pb0y0wi5arqk","_id":"cklkql2n1001jpb0yhb8v11pp"},{"post_id":"cklkql2m40006pb0yf269bk3k","tag_id":"cklkql2mw001apb0ybfsp45n5","_id":"cklkql2n2001lpb0y5svdcqgj"},{"post_id":"cklkql2n0001hpb0y759g9fj5","tag_id":"cklkql2ml000xpb0y63bvdk4u","_id":"cklkql2n4001qpb0y9jyu2i33"},{"post_id":"cklkql2m60009pb0y4nold3ea","tag_id":"cklkql2mz001gpb0y8je8g09r","_id":"cklkql2n5001tpb0y66ip6qwt"},{"post_id":"cklkql2m8000bpb0y2hfz8ibd","tag_id":"cklkql2n2001npb0y30h9c05b","_id":"cklkql2nl0025pb0yfd40bo5c"},{"post_id":"cklkql2m8000bpb0y2hfz8ibd","tag_id":"cklkql2n5001wpb0yeskwgtcw","_id":"cklkql2nm0026pb0y9ro3b0cd"},{"post_id":"cklkql2m8000bpb0y2hfz8ibd","tag_id":"cklkql2m9000cpb0y0z925vc9","_id":"cklkql2nm0028pb0y9zsyhyie"},{"post_id":"cklkql2nj0022pb0yd83k36cr","tag_id":"cklkql2mw001apb0ybfsp45n5","_id":"cklkql2nm0029pb0yc1p919y7"},{"post_id":"cklkql2nj0022pb0yd83k36cr","tag_id":"cklkql2mq0013pb0y0wi5arqk","_id":"cklkql2no002bpb0yhjw962vi"},{"post_id":"cklkql2ma000epb0yg70sdh2e","tag_id":"cklkql2nk0023pb0y1rhxexws","_id":"cklkql2no002cpb0y0xcf8mh1"},{"post_id":"cklkql2mc000hpb0y1s5h3ooc","tag_id":"cklkql2nm0027pb0ycu1q5ycs","_id":"cklkql2np002epb0ybnny560d"},{"post_id":"cklkql2mc000hpb0y1s5h3ooc","tag_id":"cklkql2nn002apb0y8jy82guo","_id":"cklkql2np002fpb0y2dpjdib4"},{"post_id":"cklkql2me000kpb0y9kgp864f","tag_id":"cklkql2no002dpb0y02ti9nih","_id":"cklkql2nq002jpb0y8hjgcnkq"},{"post_id":"cklkql2me000kpb0y9kgp864f","tag_id":"cklkql2mw001apb0ybfsp45n5","_id":"cklkql2nr002kpb0y2y8g6uwq"},{"post_id":"cklkql2me000kpb0y9kgp864f","tag_id":"cklkql2n2001npb0y30h9c05b","_id":"cklkql2nr002mpb0y2umg3zmu"},{"post_id":"cklkql2mg000ppb0ycx2fcq1a","tag_id":"cklkql2nq002ipb0y550fbzd2","_id":"cklkql2ns002ppb0ybasi02i5"},{"post_id":"cklkql2mg000ppb0ycx2fcq1a","tag_id":"cklkql2nr002lpb0y64wa5a5a","_id":"cklkql2ns002qpb0y3xblhhdp"},{"post_id":"cklkql2mg000ppb0ycx2fcq1a","tag_id":"cklkql2mq0013pb0y0wi5arqk","_id":"cklkql2ns002spb0ycjsrbbcn"},{"post_id":"cklkql2mi000tpb0yhdbqcgha","tag_id":"cklkql2nr002opb0y8gxwa87w","_id":"cklkql2ns002tpb0y5px377pp"},{"post_id":"cklkql2mj000wpb0yfya41glx","tag_id":"cklkql2n2001npb0y30h9c05b","_id":"cklkql2nu002xpb0y5vt6blnc"},{"post_id":"cklkql2mj000wpb0yfya41glx","tag_id":"cklkql2n5001wpb0yeskwgtcw","_id":"cklkql2nu002ypb0y78is6x68"},{"post_id":"cklkql2mj000wpb0yfya41glx","tag_id":"cklkql2nt002vpb0y5kysgtkv","_id":"cklkql2nu0030pb0y9ptr0ffm"},{"post_id":"cklkql2mm000ypb0y9oxt67eb","tag_id":"cklkql2no002dpb0y02ti9nih","_id":"cklkql2nv0032pb0ygx8n72de"},{"post_id":"cklkql2mm000ypb0y9oxt67eb","tag_id":"cklkql2mw001apb0ybfsp45n5","_id":"cklkql2nv0033pb0y87wl9gtx"},{"post_id":"cklkql2mo0011pb0yayyg2wub","tag_id":"cklkql2nr002opb0y8gxwa87w","_id":"cklkql2nw0036pb0y9xwmcptc"},{"post_id":"cklkql2mo0011pb0yayyg2wub","tag_id":"cklkql2n2001npb0y30h9c05b","_id":"cklkql2nw0037pb0y2thnhcsj"},{"post_id":"cklkql2mp0012pb0y519g0krn","tag_id":"cklkql2mw001apb0ybfsp45n5","_id":"cklkql2nx003apb0ygu8xfxqy"},{"post_id":"cklkql2mp0012pb0y519g0krn","tag_id":"cklkql2mq0013pb0y0wi5arqk","_id":"cklkql2nx003bpb0yhs0d73do"},{"post_id":"cklkql2mt0016pb0yfd50c3z3","tag_id":"cklkql2nr002opb0y8gxwa87w","_id":"cklkql2ny003dpb0ygumr928r"},{"post_id":"cklkql2mv0019pb0y51uq2xen","tag_id":"cklkql2nx003cpb0yd9juhd1w","_id":"cklkql2ny003fpb0y3d2i7mc1"},{"post_id":"cklkql2mx001cpb0y0hkk4js0","tag_id":"cklkql2no002dpb0y02ti9nih","_id":"cklkql2nz003ipb0y420bapdu"},{"post_id":"cklkql2mx001cpb0y0hkk4js0","tag_id":"cklkql2m20004pb0y5m33ba0f","_id":"cklkql2nz003jpb0yaf0ehhs2"},{"post_id":"cklkql2mx001cpb0y0hkk4js0","tag_id":"cklkql2ny003gpb0ycb0s19r6","_id":"cklkql2o0003lpb0y77fz8ocq"},{"post_id":"cklkql2my001fpb0y3rgac67e","tag_id":"cklkql2nr002opb0y8gxwa87w","_id":"cklkql2o0003npb0y7a5337xl"},{"post_id":"cklkql2my001fpb0y3rgac67e","tag_id":"cklkql2nz003kpb0y6wt4crzd","_id":"cklkql2o0003opb0y4f310yky"},{"post_id":"cklkql2n1001kpb0ydvjf49hi","tag_id":"cklkql2md000ipb0y5o8k6eu9","_id":"cklkql2o1003rpb0yebwc4q3t"},{"post_id":"cklkql2n1001kpb0ydvjf49hi","tag_id":"cklkql2o0003mpb0yemjp7j31","_id":"cklkql2o1003spb0y2m1i9zlj"},{"post_id":"cklkql2n1001kpb0ydvjf49hi","tag_id":"cklkql2o0003ppb0ybcfwbhuw","_id":"cklkql2o2003upb0y8qy872j8"},{"post_id":"cklkql2n3001opb0yeaxx8tq0","tag_id":"cklkql2nr002opb0y8gxwa87w","_id":"cklkql2o3003wpb0y3ikz5gvm"},{"post_id":"cklkql2n3001opb0yeaxx8tq0","tag_id":"cklkql2mq0013pb0y0wi5arqk","_id":"cklkql2o3003xpb0yaboka7zu"},{"post_id":"cklkql2n3001opb0yeaxx8tq0","tag_id":"cklkql2n2001npb0y30h9c05b","_id":"cklkql2o4003zpb0y6311fyej"},{"post_id":"cklkql2n4001rpb0yd1n389ll","tag_id":"cklkql2mq0013pb0y0wi5arqk","_id":"cklkql2o40040pb0y0hsgaw0e"},{"post_id":"cklkql2n4001rpb0yd1n389ll","tag_id":"cklkql2o2003vpb0yf3h50wng","_id":"cklkql2o50042pb0y6o046n9u"},{"post_id":"cklkql2n5001upb0yc6xf8mco","tag_id":"cklkql2o3003ypb0yc4yk2kd6","_id":"cklkql2o50043pb0ygkhdawty"},{"post_id":"cklkql2n5001upb0yc6xf8mco","tag_id":"cklkql2mq0013pb0y0wi5arqk","_id":"cklkql2o60045pb0y4sgg6qwf"},{"post_id":"cklkql2n6001xpb0ychpe73e3","tag_id":"cklkql2nq002ipb0y550fbzd2","_id":"cklkql2o60046pb0y18pn705r"},{"post_id":"cklkql2n6001xpb0ychpe73e3","tag_id":"cklkql2mw001apb0ybfsp45n5","_id":"cklkql2o70048pb0y86xc0ipg"},{"post_id":"cklkql2n80021pb0ybkup8has","tag_id":"cklkql2nq002ipb0y550fbzd2","_id":"cklkql2o7004apb0y2abb21f7"},{"post_id":"cklkql2n80021pb0ybkup8has","tag_id":"cklkql2nr002lpb0y64wa5a5a","_id":"cklkql2o8004bpb0ya4fbdo5z"},{"post_id":"cklkql2nl0024pb0y8chv2fx3","tag_id":"cklkql2ny003gpb0ycb0s19r6","_id":"cklkql2o8004dpb0ycx57amd9"},{"post_id":"cklkql2nl0024pb0y8chv2fx3","tag_id":"cklkql2o8004cpb0y46qn8s2f","_id":"cklkql2o9004epb0y8w8uekry"},{"post_id":"cklkql2nl0024pb0y8chv2fx3","tag_id":"cklkql2mq0013pb0y0wi5arqk","_id":"cklkql2o9004fpb0yc4502kkh"}],"Tag":[{"name":"递归","_id":"cklkql2m20004pb0y5m33ba0f"},{"name":"校内考试","_id":"cklkql2m9000cpb0y0z925vc9"},{"name":"校内测试","_id":"cklkql2md000ipb0y5o8k6eu9"},{"name":"BFS","_id":"cklkql2mh000rpb0ydnzn9ooo"},{"name":"背包问题","_id":"cklkql2ml000xpb0y63bvdk4u"},{"name":"算法概述","_id":"cklkql2mq0013pb0y0wi5arqk"},{"name":"数论","_id":"cklkql2mw001apb0ybfsp45n5"},{"name":"非技术","_id":"cklkql2mz001gpb0y8je8g09r"},{"name":"字符串","_id":"cklkql2n2001npb0y30h9c05b"},{"name":"排序","_id":"cklkql2n5001wpb0yeskwgtcw"},{"name":"About","_id":"cklkql2nk0023pb0y1rhxexws"},{"name":"CSP","_id":"cklkql2nm0027pb0ycu1q5ycs"},{"name":"游记","_id":"cklkql2nn002apb0y8jy82guo"},{"name":"C++一本通题库","_id":"cklkql2no002dpb0y02ti9nih"},{"name":"洛谷","_id":"cklkql2nq002ipb0y550fbzd2"},{"name":"线段树","_id":"cklkql2nr002lpb0y64wa5a5a"},{"name":"C++基础","_id":"cklkql2nr002opb0y8gxwa87w"},{"name":"校内事务","_id":"cklkql2nt002vpb0y5kysgtkv"},{"name":"数据结构","_id":"cklkql2nx003cpb0yd9juhd1w"},{"name":"递推","_id":"cklkql2ny003gpb0ycb0s19r6"},{"name":"运算符重载","_id":"cklkql2nz003kpb0y6wt4crzd"},{"name":"Tarjian","_id":"cklkql2o0003mpb0yemjp7j31"},{"name":"二分图最大匹配","_id":"cklkql2o0003ppb0ybcfwbhuw"},{"name":"最短路","_id":"cklkql2o2003vpb0yf3h50wng"},{"name":"离散化","_id":"cklkql2o3003ypb0yc4yk2kd6"},{"name":"矩阵加速","_id":"cklkql2o8004cpb0y46qn8s2f"}]}}